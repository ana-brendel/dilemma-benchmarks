Lemma Synthesis Execution Log and Results
--------------------------------------------------------------------
--------------------------------------------------------------------

Label: Initial State
Assumptions: 
 -- (sorted (a :: l))
 -- (x > a)
 -- (sorted l -> sorted (merge [x] l))

----------------------------------
Goal: (sorted (a :: merge [x] l))


------------------------------ GENERALIZED VARIABLES ------------------------------
Time Elapsed From Start: 0. seconds

gv1 : (list nat) = (merge [x] l)
gv3 : (list nat) = []
gv2 : (list nat) = [x]
gv0 : (list nat) = (a :: merge [x] l)


------------------------------ GENERALIZATIONS ------------------------------
  NOTE: The assumptions have been restricted to be only the necessary assumptions.
Time Elapsed From Start: 177.966 seconds

Label: Generalization #0
Assumptions: 
 -- (a :: merge [x] l = gv0)
 -- (sorted (a :: l))
 -- (x > a)

----------------------------------
Goal: (sorted gv0)
Case: 3

Label: Generalization #1
Assumptions: 
 -- ([x] = gv2)
 -- (sorted (a :: l))
 -- (x > a)

----------------------------------
Goal: (sorted (a :: merge gv2 l))
Case: 3

Label: Generalization #2
Assumptions: 
 -- (sorted (a :: l))
 -- (x > a)
 -- (sorted l -> sorted (merge (x :: gv3) l))

----------------------------------
Goal: (sorted (a :: merge (x :: gv3) l))
Case: 3

Label: Generalization #3
Assumptions: 
 -- (merge [x] l = gv1)
 -- (x > a)

----------------------------------
Goal: (sorted (a :: gv1))
Case: 2

Label: Generalization #4
Assumptions: 
 -- (sorted (a :: l))
 -- (x > a)

----------------------------------
Goal: (sorted (a :: merge [x] l))
Case: 3



------------------------------ SYNTHESIS PROBLEMS ------------------------------
Time Elapsed From Start: 180.099 seconds

 -- functions to consider -- 
@eq : (forall A : Type, A -> A -> Prop)
not : (Prop -> Prop)
length : (forall A : Type, list A -> nat)
app : (forall A : Type, list A -> list A -> list A)
le : (nat -> nat -> Prop)
lt : (nat -> nat -> Prop)
In : (forall A : Type, A -> list A -> Prop)
existsb : (forall A : Type, (A -> bool) -> list A -> bool)
forallb : (forall A : Type, (A -> bool) -> list A -> bool)
Forall : (forall A : Type, (A -> Prop) -> list A -> Prop)
nodup : (forall A : Type, (forall x y : A, {x = y} + {x <> y}) -> list A -> list A)
Permutation : (forall A : Type, list A -> list A -> Prop)
sorted : (list nat -> Prop)
is_a_sorting_algorithm : ((list nat -> list nat) -> Prop)
@split : (forall X : Type, list X -> list X * list X)
merge : (list nat -> list nat -> list nat)
le_all : (nat -> list nat -> Prop)
list_ind2 : (forall (A : Type) (P : list A -> Prop),
 P [] ->
 (forall a : A, P [a]) ->
 (forall (a b : A) (l : list A), P l -> P (a :: b :: l)) ->
 forall l : list A, P l)
sorted_bool : (list nat -> bool)

Label: 0 (0)
Abducted Assumption: (a :: merge [x] l = gv0)
Positive Examples:
   [a := 1; gv0 := [1; 2]; l := []; x := 2]
   [a := 0; gv0 := [0; 1]; l := []; x := 1]
   [a := 0; gv0 := [0; 2]; l := []; x := 2]

Negative Examples:
   [a := 1; gv0 := [4; 2; 2]; l := [1; 1]; x := 2]
   [a := 1; gv0 := [4; 0; 3; 2; 3]; l := []; x := 4]
   [a := 1; gv0 := [2; 0; 2]; l := [1]; x := 3]
   [a := 0; gv0 := [5; 2]; l := [4; 4]; x := 4]
   [a := 0; gv0 := [4; 3; 0]; l := [1]; x := 1]
   [a := 0; gv0 := [4; 3]; l := []; x := 2]
   [a := 0; gv0 := [1; 2; 2; 1]; l := []; x := 4]
   [a := 0; gv0 := [2; 1]; l := [0; 1; 4; 4]; x := 4]
   [a := 2; gv0 := [0; 3; 2]; l := []; x := 6]
   [a := 0; gv0 := [4; 2; 0; 2]; l := [0; 2]; x := 1]
   etc ...


Label: 1 (1)
Abducted Assumption: ([x] = gv2)
Positive Examples:
   [a := 2; gv2 := [3]; l := []; x := 3]
   [a := 2; gv2 := [5]; l := []; x := 5]
   [a := 0; gv2 := [2]; l := [1; 2]; x := 2]
   [a := 0; gv2 := [2]; l := [1]; x := 2]
   [a := 0; gv2 := [1]; l := [2; 3]; x := 1]
   [a := 0; gv2 := [4]; l := []; x := 4]
   [a := 1; gv2 := [2]; l := [4]; x := 2]
   [a := 1; gv2 := [2]; l := [2]; x := 2]
   [a := 1; gv2 := [3]; l := [1]; x := 3]
   [a := 0; gv2 := [2]; l := [3]; x := 2]
   etc ...

Negative Examples:
   [a := 1; gv2 := [2; 1; 4; 5]; l := [5; 5; 5]; x := 5]
   [a := 1; gv2 := [4; 0; 5; 2; 5]; l := [5]; x := 4]
   [a := 2; gv2 := [3; 2]; l := []; x := 3]
   [a := 2; gv2 := [0]; l := []; x := 4]
   [a := 1; gv2 := [1; 0; 2; 5]; l := []; x := 2]
   [a := 2; gv2 := [3; 0]; l := [2]; x := 3]
   [a := 3; gv2 := [5; 0; 1]; l := [3]; x := 4]
   [a := 1; gv2 := [5; 3; 3]; l := [2; 2; 2; 4]; x := 2]
   [a := 2; gv2 := [1; 6; 5; 1; 4]; l := [4]; x := 3]
   [a := 3; gv2 := [1; 2]; l := []; x := 4]
   etc ...


Label: 1 (2)
Abducted Assumption: (sorted (a :: l))
Positive Examples:
   [a := 2; gv2 := [3]; l := []; x := 3]
   [a := 2; gv2 := [5]; l := []; x := 5]
   [a := 0; gv2 := [2]; l := [1; 2]; x := 2]
   [a := 0; gv2 := [2]; l := [1]; x := 2]
   [a := 0; gv2 := [1]; l := [2; 3]; x := 1]
   [a := 0; gv2 := [4]; l := []; x := 4]
   [a := 1; gv2 := [2]; l := [4]; x := 2]
   [a := 1; gv2 := [2]; l := [2]; x := 2]
   [a := 1; gv2 := [3]; l := [1]; x := 3]
   [a := 0; gv2 := [2]; l := [3]; x := 2]
   etc ...

Negative Examples:
   [a := 1; gv2 := [5]; l := [3; 1; 2; 0]; x := 5]
   [a := 2; gv2 := [3]; l := [1; 3; 1]; x := 3]
   [a := 2; gv2 := [3]; l := [1; 3; 1; 2]; x := 3]
   [a := 0; gv2 := [4]; l := [2; 0; 0; 3]; x := 4]
   [a := 0; gv2 := [4]; l := [3; 2; 4; 4]; x := 4]
   [a := 2; gv2 := [6]; l := [0; 2]; x := 6]
   [a := 2; gv2 := [3]; l := [0]; x := 3]
   [a := 0; gv2 := [4]; l := [6; 1; 6; 1]; x := 4]
   [a := 0; gv2 := [2]; l := [1; 3; 0]; x := 2]
   [a := 4; gv2 := [5]; l := [4; 4; 4; 3]; x := 5]
   etc ...


Label: 1 (3)
Abducted Assumption: (x > a)
Positive Examples:
   [a := 2; gv2 := [3]; l := []; x := 3]
   [a := 2; gv2 := [5]; l := []; x := 5]
   [a := 0; gv2 := [2]; l := [1; 2]; x := 2]
   [a := 0; gv2 := [2]; l := [1]; x := 2]
   [a := 0; gv2 := [1]; l := [2; 3]; x := 1]
   [a := 0; gv2 := [4]; l := []; x := 4]
   [a := 1; gv2 := [2]; l := [4]; x := 2]
   [a := 1; gv2 := [2]; l := [2]; x := 2]
   [a := 1; gv2 := [3]; l := [1]; x := 3]
   [a := 0; gv2 := [2]; l := [3]; x := 2]
   etc ...

Negative Examples:
   [a := 3; gv2 := [1]; l := [3; 5]; x := 1]
   [a := 1; gv2 := [0]; l := [1; 2]; x := 0]
   [a := 3; gv2 := [2]; l := []; x := 2]
   [a := 2; gv2 := [0]; l := [2; 2]; x := 0]
   [a := 5; gv2 := [0]; l := [5]; x := 0]
   [a := 3; gv2 := [0]; l := [5]; x := 0]
   [a := 2; gv2 := [1]; l := [2]; x := 1]
   [a := 2; gv2 := [1]; l := [3]; x := 1]
   [a := 3; gv2 := [2]; l := [3]; x := 2]
   [a := 4; gv2 := [0]; l := []; x := 0]
   etc ...


Label: 2 (4)
Abducted Assumption: (sorted (a :: l))
Positive Examples:
   [a := 1; gv3 := []; l := [4]; x := 6]
   [a := 1; gv3 := []; l := [1; 2; 3]; x := 3]
   [a := 1; gv3 := []; l := [4]; x := 2]
   [a := 0; gv3 := []; l := [1; 3; 3]; x := 1]
   [a := 1; gv3 := [3; 3]; l := [3; 4]; x := 2]
   [a := 2; gv3 := [4]; l := []; x := 4]
   [a := 0; gv3 := [4]; l := [4]; x := 4]
   [a := 0; gv3 := [3]; l := [0]; x := 3]
   [a := 1; gv3 := [6]; l := []; x := 2]
   [a := 2; gv3 := []; l := [4]; x := 3]
   etc ...

Negative Examples:
   [a := 2; gv3 := [1; 3; 2]; l := [0; 3; 0; 2]; x := 4]
   [a := 0; gv3 := [5; 2]; l := [5; 6; 0; 2; 3; 3]; x := 3]
   [a := 0; gv3 := [0; 3; 2]; l := [1; 3; 2]; x := 1]
   [a := 1; gv3 := [0; 0; 6]; l := [0; 1; 6; 3; 3; 2]; x := 4]
   [a := 2; gv3 := [0; 2; 4]; l := [3; 2; 0; 1]; x := 3]
   [a := 0; gv3 := [4; 5; 6]; l := [6; 1; 0; 5; 5]; x := 6]
   [a := 2; gv3 := [3; 4; 3; 0; 3]; l := [3; 3; 2; 1; 2]; x := 5]
   [a := 2; gv3 := [1]; l := [2; 3; 0]; x := 3]
   [a := 1; gv3 := [0; 0]; l := [2; 1]; x := 2]
   [a := 2; gv3 := [1; 2]; l := [4; 5; 6; 6; 1]; x := 5]
   etc ...


Label: 2 (5)
Abducted Assumption: (x > a)
Positive Examples:
   [a := 1; gv3 := []; l := [4]; x := 6]
   [a := 1; gv3 := []; l := [1; 2; 3]; x := 3]
   [a := 1; gv3 := []; l := [4]; x := 2]
   [a := 0; gv3 := []; l := [1; 3; 3]; x := 1]
   [a := 1; gv3 := [3; 3]; l := [3; 4]; x := 2]
   [a := 2; gv3 := [4]; l := []; x := 4]
   [a := 0; gv3 := [4]; l := [4]; x := 4]
   [a := 0; gv3 := [3]; l := [0]; x := 3]
   [a := 1; gv3 := [6]; l := []; x := 2]
   [a := 2; gv3 := []; l := [4]; x := 3]
   etc ...

Negative Examples:
   [a := 3; gv3 := [3]; l := [4]; x := 2]
   [a := 5; gv3 := [4]; l := []; x := 0]
   [a := 3; gv3 := [2]; l := []; x := 2]
   [a := 2; gv3 := [0; 2]; l := []; x := 0]
   [a := 1; gv3 := [2]; l := [1; 1]; x := 0]
   [a := 3; gv3 := [3]; l := []; x := 0]
   [a := 3; gv3 := [5]; l := [5]; x := 1]
   [a := 2; gv3 := []; l := [2; 3]; x := 1]
   [a := 1; gv3 := [0; 0; 3; 3]; l := []; x := 0]
   [a := 3; gv3 := []; l := [3]; x := 0]
   etc ...


Label: 2 (6)
Abducted Assumption: (sorted l -> sorted (merge (x :: gv3) l))
Positive Examples:
   [a := 1; gv3 := []; l := [4]; x := 6]
   [a := 1; gv3 := []; l := [1; 2; 3]; x := 3]
   [a := 1; gv3 := []; l := [4]; x := 2]
   [a := 0; gv3 := []; l := [1; 3; 3]; x := 1]
   [a := 1; gv3 := [3; 3]; l := [3; 4]; x := 2]
   [a := 2; gv3 := [4]; l := []; x := 4]
   [a := 0; gv3 := [4]; l := [4]; x := 4]
   [a := 0; gv3 := [3]; l := [0]; x := 3]
   [a := 1; gv3 := [6]; l := []; x := 2]
   [a := 2; gv3 := []; l := [4]; x := 3]
   etc ...

Negative Examples:
   [a := 1; gv3 := [4; 3; 3]; l := []; x := 3]
   [a := 1; gv3 := [3; 1; 0]; l := [3; 4]; x := 4]
   [a := 0; gv3 := [1]; l := [3]; x := 2]
   [a := 1; gv3 := [1; 6; 6; 4; 1; 6]; l := []; x := 6]
   [a := 1; gv3 := [0; 3; 3]; l := []; x := 3]
   [a := 1; gv3 := [2; 1]; l := [2]; x := 2]
   [a := 0; gv3 := [0; 0]; l := [0]; x := 1]
   [a := 2; gv3 := [1; 4]; l := []; x := 5]
   [a := 2; gv3 := [3; 1]; l := [6; 6]; x := 4]
   [a := 2; gv3 := [2]; l := []; x := 3]
   etc ...


Label: 3 (7)
Abducted Assumption: n/a
Positive Examples:
   [a := 1; gv1 := [3]; l := []; x := 3]
   [a := 1; gv1 := [3; 5]; l := [5]; x := 3]
   [a := 0; gv1 := [0; 1]; l := [0]; x := 1]
   [a := 0; gv1 := [2; 2]; l := [2]; x := 2]
   [a := 1; gv1 := [5]; l := []; x := 5]
   [a := 1; gv1 := [2; 2]; l := [2]; x := 2]
   [a := 1; gv1 := [1; 2]; l := [1]; x := 2]
   [a := 1; gv1 := [1; 3]; l := [1]; x := 3]
   [a := 0; gv1 := [4]; l := []; x := 4]
   [a := 0; gv1 := [3; 3]; l := [3]; x := 3]
   etc ...

Negative Examples:
   [a := 1; gv1 := [0; 2]; l := [0]; x := 2]
   [a := 1; gv1 := [0; 3]; l := [0]; x := 3]


Label: 4 (8)
Abducted Assumption: (sorted (a :: l))
Positive Examples:
   [a := 0; l := [0; 2; 4; 4]; x := 1]
   [a := 2; l := [4]; x := 4]
   [a := 2; l := [3; 3]; x := 3]
   [a := 2; l := [6]; x := 4]
   [a := 0; l := [0; 3]; x := 4]
   [a := 1; l := [2]; x := 5]
   [a := 1; l := [3; 3; 3]; x := 3]
   [a := 0; l := [2; 2; 2]; x := 3]
   [a := 1; l := [1; 2; 4; 4]; x := 2]
   [a := 3; l := [6]; x := 5]
   etc ...

Negative Examples:
   [a := 2; l := [4; 6; 0; 4; 5; 0]; x := 5]
   [a := 3; l := [6; 4; 4]; x := 5]
   [a := 2; l := [3; 5; 0; 0; 2; 2]; x := 3]
   [a := 0; l := [6; 0; 0; 1]; x := 1]
   [a := 2; l := [3; 1; 3; 4]; x := 5]
   [a := 2; l := [0]; x := 4]
   [a := 0; l := [1; 3; 0]; x := 2]
   [a := 2; l := [0; 3; 0]; x := 6]
   [a := 2; l := [0; 5; 1; 4; 1]; x := 3]
   [a := 5; l := [5; 3; 2; 4]; x := 6]
   etc ...


Label: 4 (9)
Abducted Assumption: (x > a)
Positive Examples:
   [a := 0; l := [0; 2; 4; 4]; x := 1]
   [a := 2; l := [4]; x := 4]
   [a := 2; l := [3; 3]; x := 3]
   [a := 2; l := [6]; x := 4]
   [a := 0; l := [0; 3]; x := 4]
   [a := 1; l := [2]; x := 5]
   [a := 1; l := [3; 3; 3]; x := 3]
   [a := 0; l := [2; 2; 2]; x := 3]
   [a := 1; l := [1; 2; 4; 4]; x := 2]
   [a := 3; l := [6]; x := 5]
   etc ...

Negative Examples:
   [a := 1; l := [1; 1; 1; 3]; x := 0]
   [a := 1; l := [1; 1; 2]; x := 0]
   [a := 4; l := [5]; x := 3]
   [a := 5; l := [5]; x := 4]
   [a := 2; l := [2; 3]; x := 0]
   [a := 2; l := [3; 3; 3]; x := 1]
   [a := 3; l := [3; 3; 3]; x := 2]
   [a := 2; l := [5]; x := 1]
   [a := 2; l := [2; 2; 2]; x := 1]
   [a := 2; l := [3; 3]; x := 1]
   etc ...



------------------------------ TERMS CONSIDERED IN SYNTHESIS ------------------------------
Time Elapsed From Start: 184.557 seconds


Label: 0 (0)
(a <=* l), (a <=* gv0), (x <=* l), (x <=* gv0), (sorted l), (sorted gv0), (Permutation l l), (Permutation l gv0), (Permutation gv0 l), (Permutation gv0 gv0)
(In a l), (In a gv0), (In x l), (In x gv0), (a < a), (a < x), (x < a), (x < x), (a <= a), (a <= x)
(x <= a), (x <= x), (a = a), (a = x), (x = a), (x = x), (l = l), (l = gv0), (gv0 = l), (gv0 = gv0)
(false = sorted_bool l), (false = sorted_bool gv0), (true = sorted_bool l), (true = sorted_bool gv0), (a <=* a :: l), (a <=* a :: gv0), (a <=* x :: l), (a <=* x :: gv0), (a <=* merge l l), (a <=* merge l gv0)
(a <=* merge gv0 l), (a <=* merge gv0 gv0), (a <=* l ++ l), (a <=* l ++ gv0), (a <=* gv0 ++ l), (a <=* gv0 ++ gv0), (a <=* []), (x <=* a :: l), (x <=* a :: gv0), (x <=* x :: l)
(x <=* x :: gv0), (x <=* merge l l), (x <=* merge l gv0), (x <=* merge gv0 l), (x <=* merge gv0 gv0), (x <=* l ++ l), (x <=* l ++ gv0), (x <=* gv0 ++ l), (x <=* gv0 ++ gv0), (x <=* [])
(length l <=* l), (length l <=* gv0), (length l <=* a :: l), (length l <=* a :: gv0), (length l <=* x :: l), (length l <=* x :: gv0), (length l <=* merge l l), (length l <=* merge l gv0), (length l <=* merge gv0 l), (length l <=* merge gv0 gv0)
(length l <=* l ++ l), (length l <=* l ++ gv0), (length l <=* gv0 ++ l), (length l <=* gv0 ++ gv0), (length l <=* []), (length gv0 <=* l), (length gv0 <=* gv0), (length gv0 <=* a :: l), (length gv0 <=* a :: gv0), (length gv0 <=* x :: l)
(length gv0 <=* x :: gv0), (length gv0 <=* merge l l), (length gv0 <=* merge l gv0), (length gv0 <=* merge gv0 l), (length gv0 <=* merge gv0 gv0), (length gv0 <=* l ++ l), (length gv0 <=* l ++ gv0), (length gv0 <=* gv0 ++ l), (length gv0 <=* gv0 ++ gv0), (length gv0 <=* [])
(sorted (a :: l)), (sorted (a :: gv0)), (sorted (x :: l)), (sorted (x :: gv0)), (sorted (merge l l)), (sorted (merge l gv0)), (sorted (merge gv0 l)), (sorted (merge gv0 gv0)), (sorted (l ++ l)), (sorted (l ++ gv0))
(sorted (gv0 ++ l)), (sorted (gv0 ++ gv0)), (sorted []), (Permutation l (a :: l)), (Permutation l (a :: gv0)), (Permutation l (x :: l)), (Permutation l (x :: gv0)), (Permutation l (merge l l)), (Permutation l (merge l gv0)), (Permutation l (merge gv0 l))
(Permutation l (merge gv0 gv0)), (Permutation l (l ++ l)), (Permutation l (l ++ gv0)), (Permutation l (gv0 ++ l)), (Permutation l (gv0 ++ gv0)), (Permutation l []), (Permutation gv0 (a :: l)), (Permutation gv0 (a :: gv0)), (Permutation gv0 (x :: l)), (Permutation gv0 (x :: gv0))
(Permutation gv0 (merge l l)), (Permutation gv0 (merge l gv0)), (Permutation gv0 (merge gv0 l)), (Permutation gv0 (merge gv0 gv0)), (Permutation gv0 (l ++ l)), (Permutation gv0 (l ++ gv0)), (Permutation gv0 (gv0 ++ l)), (Permutation gv0 (gv0 ++ gv0)), (Permutation gv0 []), (Permutation (a :: l) l)
(Permutation (a :: l) gv0), (Permutation (a :: l) (a :: gv0)), (Permutation (a :: l) (x :: l)), (Permutation (a :: l) (x :: gv0)), (Permutation (a :: l) (merge l l)), (Permutation (a :: l) (merge l gv0)), (Permutation (a :: l) (merge gv0 l)), (Permutation (a :: l) (merge gv0 gv0)), (Permutation (a :: l) (l ++ l)), (Permutation (a :: l) (l ++ gv0))
(Permutation (a :: l) (gv0 ++ l)), (Permutation (a :: l) (gv0 ++ gv0)), (Permutation (a :: l) []), (Permutation (a :: gv0) l), (Permutation (a :: gv0) gv0), (Permutation (a :: gv0) (a :: l)), (Permutation (a :: gv0) (x :: l)), (Permutation (a :: gv0) (x :: gv0)), (Permutation (a :: gv0) (merge l l)), (Permutation (a :: gv0) (merge l gv0))
(Permutation (a :: gv0) (merge gv0 l)), (Permutation (a :: gv0) (merge gv0 gv0)), (Permutation (a :: gv0) (l ++ l)), (Permutation (a :: gv0) (l ++ gv0)), (Permutation (a :: gv0) (gv0 ++ l)), (Permutation (a :: gv0) (gv0 ++ gv0)), (Permutation (a :: gv0) []), (Permutation (x :: l) l), (Permutation (x :: l) gv0), (Permutation (x :: l) (a :: l))
(Permutation (x :: l) (a :: gv0)), (Permutation (x :: l) (x :: gv0)), (Permutation (x :: l) (merge l l)), (Permutation (x :: l) (merge l gv0)), (Permutation (x :: l) (merge gv0 l)), (Permutation (x :: l) (merge gv0 gv0)), (Permutation (x :: l) (l ++ l)), (Permutation (x :: l) (l ++ gv0)), (Permutation (x :: l) (gv0 ++ l)), (Permutation (x :: l) (gv0 ++ gv0))
(Permutation (x :: l) []), (Permutation (x :: gv0) l), (Permutation (x :: gv0) gv0), (Permutation (x :: gv0) (a :: l)), (Permutation (x :: gv0) (a :: gv0)), (Permutation (x :: gv0) (x :: l)), (Permutation (x :: gv0) (merge l l)), (Permutation (x :: gv0) (merge l gv0)), (Permutation (x :: gv0) (merge gv0 l)), (Permutation (x :: gv0) (merge gv0 gv0))
(Permutation (x :: gv0) (l ++ l)), (Permutation (x :: gv0) (l ++ gv0)), (Permutation (x :: gv0) (gv0 ++ l)), (Permutation (x :: gv0) (gv0 ++ gv0)), (Permutation (x :: gv0) []), (Permutation (merge l l) l), (Permutation (merge l l) gv0), (Permutation (merge l l) (a :: l)), (Permutation (merge l l) (a :: gv0)), (Permutation (merge l l) (x :: l))
(Permutation (merge l l) (x :: gv0)), (Permutation (merge l l) (merge l gv0)), (Permutation (merge l l) (merge gv0 l)), (Permutation (merge l l) (merge gv0 gv0)), (Permutation (merge l l) (l ++ l)), (Permutation (merge l l) (l ++ gv0)), (Permutation (merge l l) (gv0 ++ l)), (Permutation (merge l l) (gv0 ++ gv0)), (Permutation (merge l l) []), (Permutation (merge l gv0) l)
(Permutation (merge l gv0) gv0), (Permutation (merge l gv0) (a :: l)), (Permutation (merge l gv0) (a :: gv0)), (Permutation (merge l gv0) (x :: l)), (Permutation (merge l gv0) (x :: gv0)), (Permutation (merge l gv0) (merge l l)), (Permutation (merge l gv0) (merge gv0 l)), (Permutation (merge l gv0) (merge gv0 gv0)), (Permutation (merge l gv0) (l ++ l)), (Permutation (merge l gv0) (l ++ gv0))
(Permutation (merge l gv0) (gv0 ++ l)), (Permutation (merge l gv0) (gv0 ++ gv0)), (Permutation (merge l gv0) []), (Permutation (merge gv0 l) l), (Permutation (merge gv0 l) gv0), (Permutation (merge gv0 l) (a :: l)), (Permutation (merge gv0 l) (a :: gv0)), (Permutation (merge gv0 l) (x :: l)), (Permutation (merge gv0 l) (x :: gv0)), (Permutation (merge gv0 l) (merge l l))
(Permutation (merge gv0 l) (merge l gv0)), (Permutation (merge gv0 l) (merge gv0 gv0)), (Permutation (merge gv0 l) (l ++ l)), (Permutation (merge gv0 l) (l ++ gv0)), (Permutation (merge gv0 l) (gv0 ++ l)), (Permutation (merge gv0 l) (gv0 ++ gv0)), (Permutation (merge gv0 l) []), (Permutation (merge gv0 gv0) l), (Permutation (merge gv0 gv0) gv0), (Permutation (merge gv0 gv0) (a :: l))
(Permutation (merge gv0 gv0) (a :: gv0)), (Permutation (merge gv0 gv0) (x :: l)), (Permutation (merge gv0 gv0) (x :: gv0)), (Permutation (merge gv0 gv0) (merge l l)), (Permutation (merge gv0 gv0) (merge l gv0)), (Permutation (merge gv0 gv0) (merge gv0 l)), (Permutation (merge gv0 gv0) (l ++ l)), (Permutation (merge gv0 gv0) (l ++ gv0)), (Permutation (merge gv0 gv0) (gv0 ++ l)), (Permutation (merge gv0 gv0) (gv0 ++ gv0))
(Permutation (merge gv0 gv0) []), (Permutation (l ++ l) l), (Permutation (l ++ l) gv0), (Permutation (l ++ l) (a :: l)), (Permutation (l ++ l) (a :: gv0)), (Permutation (l ++ l) (x :: l)), (Permutation (l ++ l) (x :: gv0)), (Permutation (l ++ l) (merge l l)), (Permutation (l ++ l) (merge l gv0)), (Permutation (l ++ l) (merge gv0 l))
(Permutation (l ++ l) (merge gv0 gv0)), (Permutation (l ++ l) (l ++ gv0)), (Permutation (l ++ l) (gv0 ++ l)), (Permutation (l ++ l) (gv0 ++ gv0)), (Permutation (l ++ l) []), (Permutation (l ++ gv0) l), (Permutation (l ++ gv0) gv0), (Permutation (l ++ gv0) (a :: l)), (Permutation (l ++ gv0) (a :: gv0)), (Permutation (l ++ gv0) (x :: l))
(Permutation (l ++ gv0) (x :: gv0)), (Permutation (l ++ gv0) (merge l l)), (Permutation (l ++ gv0) (merge l gv0)), (Permutation (l ++ gv0) (merge gv0 l)), (Permutation (l ++ gv0) (merge gv0 gv0)), (Permutation (l ++ gv0) (l ++ l)), (Permutation (l ++ gv0) (gv0 ++ l)), (Permutation (l ++ gv0) (gv0 ++ gv0)), (Permutation (l ++ gv0) []), (Permutation (gv0 ++ l) l)
(Permutation (gv0 ++ l) gv0), (Permutation (gv0 ++ l) (a :: l)), (Permutation (gv0 ++ l) (a :: gv0)), (Permutation (gv0 ++ l) (x :: l)), (Permutation (gv0 ++ l) (x :: gv0)), (Permutation (gv0 ++ l) (merge l l)), (Permutation (gv0 ++ l) (merge l gv0)), (Permutation (gv0 ++ l) (merge gv0 l)), (Permutation (gv0 ++ l) (merge gv0 gv0)), (Permutation (gv0 ++ l) (l ++ l))
(Permutation (gv0 ++ l) (l ++ gv0)), (Permutation (gv0 ++ l) (gv0 ++ gv0)), (Permutation (gv0 ++ l) []), (Permutation (gv0 ++ gv0) l), (Permutation (gv0 ++ gv0) gv0), (Permutation (gv0 ++ gv0) (a :: l)), (Permutation (gv0 ++ gv0) (a :: gv0)), (Permutation (gv0 ++ gv0) (x :: l)), (Permutation (gv0 ++ gv0) (x :: gv0)), (Permutation (gv0 ++ gv0) (merge l l))
(Permutation (gv0 ++ gv0) (merge l gv0)), (Permutation (gv0 ++ gv0) (merge gv0 l)), (Permutation (gv0 ++ gv0) (merge gv0 gv0)), (Permutation (gv0 ++ gv0) (l ++ l)), (Permutation (gv0 ++ gv0) (l ++ gv0)), (Permutation (gv0 ++ gv0) (gv0 ++ l)), (Permutation (gv0 ++ gv0) []), (Permutation [] l), (Permutation [] gv0), (Permutation [] (a :: l))
(Permutation [] (a :: gv0)), (Permutation [] (x :: l)), (Permutation [] (x :: gv0)), (Permutation [] (merge l l)), (Permutation [] (merge l gv0)), (Permutation [] (merge gv0 l)), (Permutation [] (merge gv0 gv0)), (Permutation [] (l ++ l)), (Permutation [] (l ++ gv0)), (Permutation [] (gv0 ++ l))
(Permutation [] (gv0 ++ gv0)), (In a (a :: l)), (In a (a :: gv0)), (In a (x :: l)), (In a (x :: gv0)), (In a (merge l l)), (In a (merge l gv0)), (In a (merge gv0 l)), (In a (merge gv0 gv0)), (In a (l ++ l))
(In a (l ++ gv0)), (In a (gv0 ++ l)), (In a (gv0 ++ gv0)), (In x (a :: l)), (In x (a :: gv0)), (In x (x :: l)), (In x (x :: gv0)), (In x (merge l l)), (In x (merge l gv0)), (In x (merge gv0 l))
(In x (merge gv0 gv0)), (In x (l ++ l)), (In x (l ++ gv0)), (In x (gv0 ++ l)), (In x (gv0 ++ gv0)), (In (length l) l), (In (length l) gv0), (In (length l) (a :: l)), (In (length l) (a :: gv0)), (In (length l) (x :: l))
(In (length l) (x :: gv0)), (In (length l) (merge l l)), (In (length l) (merge l gv0)), (In (length l) (merge gv0 l)), (In (length l) (merge gv0 gv0)), (In (length l) (l ++ l)), (In (length l) (l ++ gv0)), (In (length l) (gv0 ++ l)), (In (length l) (gv0 ++ gv0)), (In (length gv0) l)
(In (length gv0) gv0), (In (length gv0) (a :: l)), (In (length gv0) (a :: gv0)), (In (length gv0) (x :: l)), (In (length gv0) (x :: gv0)), (In (length gv0) (merge l l)), (In (length gv0) (merge l gv0)), (In (length gv0) (merge gv0 l)), (In (length gv0) (merge gv0 gv0)), (In (length gv0) (l ++ l))
(In (length gv0) (l ++ gv0)), (In (length gv0) (gv0 ++ l)), (In (length gv0) (gv0 ++ gv0)), (a < length l), (a < length gv0), (x < length l), (x < length gv0), (length l < a), (length l < x), (length l < length gv0)
(length gv0 < a), (length gv0 < x), (length gv0 < length l), (a <= length l), (a <= length gv0), (x <= length l), (x <= length gv0), (length l <= a), (length l <= x), (length l <= length gv0)
(length gv0 <= a), (length gv0 <= x), (length gv0 <= length l), (~ a <=* l), (~ a <=* gv0), (~ x <=* l), (~ x <=* gv0), (~ sorted l), (~ sorted gv0), (~ Permutation l l)
(~ Permutation l gv0), (~ Permutation gv0 l), (~ Permutation gv0 gv0), (~ In a l), (~ In a gv0), (~ In x l), (~ In x gv0), (~ a < a), (~ a < x), (~ x < a)
(~ x < x), (~ a <= a), (~ a <= x), (~ x <= a), (~ x <= x), (a <> a), (a <> x), (x <> a), (x <> x), (l <> l)
(l <> gv0), (gv0 <> l), (gv0 <> gv0), (None = Some l), (None = Some gv0), (a :: l = l), (a :: l = gv0), (a :: l = merge l l), (a :: l = merge l gv0), (a :: l = merge gv0 l)
(a :: l = merge gv0 gv0), (a :: l = l ++ l), (a :: l = l ++ gv0), (a :: l = gv0 ++ l), (a :: l = gv0 ++ gv0), (a :: l = []), (a :: gv0 = l), (a :: gv0 = gv0), (a :: gv0 = merge l l), (a :: gv0 = merge l gv0)
(a :: gv0 = merge gv0 l), (a :: gv0 = merge gv0 gv0), (a :: gv0 = l ++ l), (a :: gv0 = l ++ gv0), (a :: gv0 = gv0 ++ l), (a :: gv0 = gv0 ++ gv0), (a :: gv0 = []), (x :: l = l), (x :: l = gv0), (x :: l = merge l l)
(x :: l = merge l gv0), (x :: l = merge gv0 l), (x :: l = merge gv0 gv0), (x :: l = l ++ l), (x :: l = l ++ gv0), (x :: l = gv0 ++ l), (x :: l = gv0 ++ gv0), (x :: l = []), (x :: gv0 = l), (x :: gv0 = gv0)
(x :: gv0 = merge l l), (x :: gv0 = merge l gv0), (x :: gv0 = merge gv0 l), (x :: gv0 = merge gv0 gv0), (x :: gv0 = l ++ l), (x :: gv0 = l ++ gv0), (x :: gv0 = gv0 ++ l), (x :: gv0 = gv0 ++ gv0), (x :: gv0 = []), (merge l l = l)
(merge l l = gv0), (merge l l = l ++ l), (merge l l = l ++ gv0), (merge l l = gv0 ++ l), (merge l l = gv0 ++ gv0), (merge l gv0 = l), (merge l gv0 = gv0), (merge l gv0 = l ++ l), (merge l gv0 = l ++ gv0), (merge l gv0 = gv0 ++ l)
(merge l gv0 = gv0 ++ gv0), (merge gv0 l = l), (merge gv0 l = gv0), (merge gv0 l = l ++ l), (merge gv0 l = l ++ gv0), (merge gv0 l = gv0 ++ l), (merge gv0 l = gv0 ++ gv0), (merge gv0 gv0 = l), (merge gv0 gv0 = gv0), (merge gv0 gv0 = l ++ l)
(merge gv0 gv0 = l ++ gv0), (merge gv0 gv0 = gv0 ++ l), (merge gv0 gv0 = gv0 ++ gv0), (l ++ l = l), (l ++ l = gv0), (l ++ gv0 = l), (l ++ gv0 = gv0), (gv0 ++ l = l), (gv0 ++ l = gv0), (gv0 ++ gv0 = l)
(gv0 ++ gv0 = gv0), ([] = l), ([] = gv0), ([] = merge l l), ([] = merge l gv0), ([] = merge gv0 l), ([] = merge gv0 gv0), ([] = l ++ l), ([] = l ++ gv0), ([] = gv0 ++ l)
([] = gv0 ++ gv0), (None = Some a), (None = Some x), ((l, l) = split l), ((l, l) = split gv0), ((l, gv0) = split l), ((l, gv0) = split gv0), ((gv0, l) = split l), ((gv0, l) = split gv0), ((gv0, gv0) = split l)
((gv0, gv0) = split gv0), (length l = a), (length l = x), (length gv0 = a), (length gv0 = x)

Label: 1 (1)
(x <=* l), (x <=* gv2), (a <=* l), (a <=* gv2), (sorted l), (sorted gv2), (Permutation l l), (Permutation l gv2), (Permutation gv2 l), (Permutation gv2 gv2)
(In x l), (In x gv2), (In a l), (In a gv2), (x < x), (x < a), (a < x), (a < a), (x <= x), (x <= a)
(a <= x), (a <= a), (l = l), (l = gv2), (gv2 = l), (gv2 = gv2), (x = x), (x = a), (a = x), (a = a)
(false = sorted_bool l), (false = sorted_bool gv2), (true = sorted_bool l), (true = sorted_bool gv2), (x <=* x :: l), (x <=* x :: gv2), (x <=* a :: l), (x <=* a :: gv2), (x <=* merge l l), (x <=* merge l gv2)
(x <=* merge gv2 l), (x <=* merge gv2 gv2), (x <=* l ++ l), (x <=* l ++ gv2), (x <=* gv2 ++ l), (x <=* gv2 ++ gv2), (x <=* []), (a <=* x :: l), (a <=* x :: gv2), (a <=* a :: l)
(a <=* a :: gv2), (a <=* merge l l), (a <=* merge l gv2), (a <=* merge gv2 l), (a <=* merge gv2 gv2), (a <=* l ++ l), (a <=* l ++ gv2), (a <=* gv2 ++ l), (a <=* gv2 ++ gv2), (a <=* [])
(length l <=* l), (length l <=* gv2), (length l <=* x :: l), (length l <=* x :: gv2), (length l <=* a :: l), (length l <=* a :: gv2), (length l <=* merge l l), (length l <=* merge l gv2), (length l <=* merge gv2 l), (length l <=* merge gv2 gv2)
(length l <=* l ++ l), (length l <=* l ++ gv2), (length l <=* gv2 ++ l), (length l <=* gv2 ++ gv2), (length l <=* []), (length gv2 <=* l), (length gv2 <=* gv2), (length gv2 <=* x :: l), (length gv2 <=* x :: gv2), (length gv2 <=* a :: l)
(length gv2 <=* a :: gv2), (length gv2 <=* merge l l), (length gv2 <=* merge l gv2), (length gv2 <=* merge gv2 l), (length gv2 <=* merge gv2 gv2), (length gv2 <=* l ++ l), (length gv2 <=* l ++ gv2), (length gv2 <=* gv2 ++ l), (length gv2 <=* gv2 ++ gv2), (length gv2 <=* [])
(sorted (x :: l)), (sorted (x :: gv2)), (sorted (a :: l)), (sorted (a :: gv2)), (sorted (merge l l)), (sorted (merge l gv2)), (sorted (merge gv2 l)), (sorted (merge gv2 gv2)), (sorted (l ++ l)), (sorted (l ++ gv2))
(sorted (gv2 ++ l)), (sorted (gv2 ++ gv2)), (sorted []), (Permutation l (x :: l)), (Permutation l (x :: gv2)), (Permutation l (a :: l)), (Permutation l (a :: gv2)), (Permutation l (merge l l)), (Permutation l (merge l gv2)), (Permutation l (merge gv2 l))
(Permutation l (merge gv2 gv2)), (Permutation l (l ++ l)), (Permutation l (l ++ gv2)), (Permutation l (gv2 ++ l)), (Permutation l (gv2 ++ gv2)), (Permutation l []), (Permutation gv2 (x :: l)), (Permutation gv2 (x :: gv2)), (Permutation gv2 (a :: l)), (Permutation gv2 (a :: gv2))
(Permutation gv2 (merge l l)), (Permutation gv2 (merge l gv2)), (Permutation gv2 (merge gv2 l)), (Permutation gv2 (merge gv2 gv2)), (Permutation gv2 (l ++ l)), (Permutation gv2 (l ++ gv2)), (Permutation gv2 (gv2 ++ l)), (Permutation gv2 (gv2 ++ gv2)), (Permutation gv2 []), (Permutation (x :: l) l)
(Permutation (x :: l) gv2), (Permutation (x :: l) (x :: gv2)), (Permutation (x :: l) (a :: l)), (Permutation (x :: l) (a :: gv2)), (Permutation (x :: l) (merge l l)), (Permutation (x :: l) (merge l gv2)), (Permutation (x :: l) (merge gv2 l)), (Permutation (x :: l) (merge gv2 gv2)), (Permutation (x :: l) (l ++ l)), (Permutation (x :: l) (l ++ gv2))
(Permutation (x :: l) (gv2 ++ l)), (Permutation (x :: l) (gv2 ++ gv2)), (Permutation (x :: l) []), (Permutation (x :: gv2) l), (Permutation (x :: gv2) gv2), (Permutation (x :: gv2) (x :: l)), (Permutation (x :: gv2) (a :: l)), (Permutation (x :: gv2) (a :: gv2)), (Permutation (x :: gv2) (merge l l)), (Permutation (x :: gv2) (merge l gv2))
(Permutation (x :: gv2) (merge gv2 l)), (Permutation (x :: gv2) (merge gv2 gv2)), (Permutation (x :: gv2) (l ++ l)), (Permutation (x :: gv2) (l ++ gv2)), (Permutation (x :: gv2) (gv2 ++ l)), (Permutation (x :: gv2) (gv2 ++ gv2)), (Permutation (x :: gv2) []), (Permutation (a :: l) l), (Permutation (a :: l) gv2), (Permutation (a :: l) (x :: l))
(Permutation (a :: l) (x :: gv2)), (Permutation (a :: l) (a :: gv2)), (Permutation (a :: l) (merge l l)), (Permutation (a :: l) (merge l gv2)), (Permutation (a :: l) (merge gv2 l)), (Permutation (a :: l) (merge gv2 gv2)), (Permutation (a :: l) (l ++ l)), (Permutation (a :: l) (l ++ gv2)), (Permutation (a :: l) (gv2 ++ l)), (Permutation (a :: l) (gv2 ++ gv2))
(Permutation (a :: l) []), (Permutation (a :: gv2) l), (Permutation (a :: gv2) gv2), (Permutation (a :: gv2) (x :: l)), (Permutation (a :: gv2) (x :: gv2)), (Permutation (a :: gv2) (a :: l)), (Permutation (a :: gv2) (merge l l)), (Permutation (a :: gv2) (merge l gv2)), (Permutation (a :: gv2) (merge gv2 l)), (Permutation (a :: gv2) (merge gv2 gv2))
(Permutation (a :: gv2) (l ++ l)), (Permutation (a :: gv2) (l ++ gv2)), (Permutation (a :: gv2) (gv2 ++ l)), (Permutation (a :: gv2) (gv2 ++ gv2)), (Permutation (a :: gv2) []), (Permutation (merge l l) l), (Permutation (merge l l) gv2), (Permutation (merge l l) (x :: l)), (Permutation (merge l l) (x :: gv2)), (Permutation (merge l l) (a :: l))
(Permutation (merge l l) (a :: gv2)), (Permutation (merge l l) (merge l gv2)), (Permutation (merge l l) (merge gv2 l)), (Permutation (merge l l) (merge gv2 gv2)), (Permutation (merge l l) (l ++ l)), (Permutation (merge l l) (l ++ gv2)), (Permutation (merge l l) (gv2 ++ l)), (Permutation (merge l l) (gv2 ++ gv2)), (Permutation (merge l l) []), (Permutation (merge l gv2) l)
(Permutation (merge l gv2) gv2), (Permutation (merge l gv2) (x :: l)), (Permutation (merge l gv2) (x :: gv2)), (Permutation (merge l gv2) (a :: l)), (Permutation (merge l gv2) (a :: gv2)), (Permutation (merge l gv2) (merge l l)), (Permutation (merge l gv2) (merge gv2 l)), (Permutation (merge l gv2) (merge gv2 gv2)), (Permutation (merge l gv2) (l ++ l)), (Permutation (merge l gv2) (l ++ gv2))
(Permutation (merge l gv2) (gv2 ++ l)), (Permutation (merge l gv2) (gv2 ++ gv2)), (Permutation (merge l gv2) []), (Permutation (merge gv2 l) l), (Permutation (merge gv2 l) gv2), (Permutation (merge gv2 l) (x :: l)), (Permutation (merge gv2 l) (x :: gv2)), (Permutation (merge gv2 l) (a :: l)), (Permutation (merge gv2 l) (a :: gv2)), (Permutation (merge gv2 l) (merge l l))
(Permutation (merge gv2 l) (merge l gv2)), (Permutation (merge gv2 l) (merge gv2 gv2)), (Permutation (merge gv2 l) (l ++ l)), (Permutation (merge gv2 l) (l ++ gv2)), (Permutation (merge gv2 l) (gv2 ++ l)), (Permutation (merge gv2 l) (gv2 ++ gv2)), (Permutation (merge gv2 l) []), (Permutation (merge gv2 gv2) l), (Permutation (merge gv2 gv2) gv2), (Permutation (merge gv2 gv2) (x :: l))
(Permutation (merge gv2 gv2) (x :: gv2)), (Permutation (merge gv2 gv2) (a :: l)), (Permutation (merge gv2 gv2) (a :: gv2)), (Permutation (merge gv2 gv2) (merge l l)), (Permutation (merge gv2 gv2) (merge l gv2)), (Permutation (merge gv2 gv2) (merge gv2 l)), (Permutation (merge gv2 gv2) (l ++ l)), (Permutation (merge gv2 gv2) (l ++ gv2)), (Permutation (merge gv2 gv2) (gv2 ++ l)), (Permutation (merge gv2 gv2) (gv2 ++ gv2))
(Permutation (merge gv2 gv2) []), (Permutation (l ++ l) l), (Permutation (l ++ l) gv2), (Permutation (l ++ l) (x :: l)), (Permutation (l ++ l) (x :: gv2)), (Permutation (l ++ l) (a :: l)), (Permutation (l ++ l) (a :: gv2)), (Permutation (l ++ l) (merge l l)), (Permutation (l ++ l) (merge l gv2)), (Permutation (l ++ l) (merge gv2 l))
(Permutation (l ++ l) (merge gv2 gv2)), (Permutation (l ++ l) (l ++ gv2)), (Permutation (l ++ l) (gv2 ++ l)), (Permutation (l ++ l) (gv2 ++ gv2)), (Permutation (l ++ l) []), (Permutation (l ++ gv2) l), (Permutation (l ++ gv2) gv2), (Permutation (l ++ gv2) (x :: l)), (Permutation (l ++ gv2) (x :: gv2)), (Permutation (l ++ gv2) (a :: l))
(Permutation (l ++ gv2) (a :: gv2)), (Permutation (l ++ gv2) (merge l l)), (Permutation (l ++ gv2) (merge l gv2)), (Permutation (l ++ gv2) (merge gv2 l)), (Permutation (l ++ gv2) (merge gv2 gv2)), (Permutation (l ++ gv2) (l ++ l)), (Permutation (l ++ gv2) (gv2 ++ l)), (Permutation (l ++ gv2) (gv2 ++ gv2)), (Permutation (l ++ gv2) []), (Permutation (gv2 ++ l) l)
(Permutation (gv2 ++ l) gv2), (Permutation (gv2 ++ l) (x :: l)), (Permutation (gv2 ++ l) (x :: gv2)), (Permutation (gv2 ++ l) (a :: l)), (Permutation (gv2 ++ l) (a :: gv2)), (Permutation (gv2 ++ l) (merge l l)), (Permutation (gv2 ++ l) (merge l gv2)), (Permutation (gv2 ++ l) (merge gv2 l)), (Permutation (gv2 ++ l) (merge gv2 gv2)), (Permutation (gv2 ++ l) (l ++ l))
(Permutation (gv2 ++ l) (l ++ gv2)), (Permutation (gv2 ++ l) (gv2 ++ gv2)), (Permutation (gv2 ++ l) []), (Permutation (gv2 ++ gv2) l), (Permutation (gv2 ++ gv2) gv2), (Permutation (gv2 ++ gv2) (x :: l)), (Permutation (gv2 ++ gv2) (x :: gv2)), (Permutation (gv2 ++ gv2) (a :: l)), (Permutation (gv2 ++ gv2) (a :: gv2)), (Permutation (gv2 ++ gv2) (merge l l))
(Permutation (gv2 ++ gv2) (merge l gv2)), (Permutation (gv2 ++ gv2) (merge gv2 l)), (Permutation (gv2 ++ gv2) (merge gv2 gv2)), (Permutation (gv2 ++ gv2) (l ++ l)), (Permutation (gv2 ++ gv2) (l ++ gv2)), (Permutation (gv2 ++ gv2) (gv2 ++ l)), (Permutation (gv2 ++ gv2) []), (Permutation [] l), (Permutation [] gv2), (Permutation [] (x :: l))
(Permutation [] (x :: gv2)), (Permutation [] (a :: l)), (Permutation [] (a :: gv2)), (Permutation [] (merge l l)), (Permutation [] (merge l gv2)), (Permutation [] (merge gv2 l)), (Permutation [] (merge gv2 gv2)), (Permutation [] (l ++ l)), (Permutation [] (l ++ gv2)), (Permutation [] (gv2 ++ l))
(Permutation [] (gv2 ++ gv2)), (In x (x :: l)), (In x (x :: gv2)), (In x (a :: l)), (In x (a :: gv2)), (In x (merge l l)), (In x (merge l gv2)), (In x (merge gv2 l)), (In x (merge gv2 gv2)), (In x (l ++ l))
(In x (l ++ gv2)), (In x (gv2 ++ l)), (In x (gv2 ++ gv2)), (In a (x :: l)), (In a (x :: gv2)), (In a (a :: l)), (In a (a :: gv2)), (In a (merge l l)), (In a (merge l gv2)), (In a (merge gv2 l))
(In a (merge gv2 gv2)), (In a (l ++ l)), (In a (l ++ gv2)), (In a (gv2 ++ l)), (In a (gv2 ++ gv2)), (In (length l) l), (In (length l) gv2), (In (length l) (x :: l)), (In (length l) (x :: gv2)), (In (length l) (a :: l))
(In (length l) (a :: gv2)), (In (length l) (merge l l)), (In (length l) (merge l gv2)), (In (length l) (merge gv2 l)), (In (length l) (merge gv2 gv2)), (In (length l) (l ++ l)), (In (length l) (l ++ gv2)), (In (length l) (gv2 ++ l)), (In (length l) (gv2 ++ gv2)), (In (length gv2) l)
(In (length gv2) gv2), (In (length gv2) (x :: l)), (In (length gv2) (x :: gv2)), (In (length gv2) (a :: l)), (In (length gv2) (a :: gv2)), (In (length gv2) (merge l l)), (In (length gv2) (merge l gv2)), (In (length gv2) (merge gv2 l)), (In (length gv2) (merge gv2 gv2)), (In (length gv2) (l ++ l))
(In (length gv2) (l ++ gv2)), (In (length gv2) (gv2 ++ l)), (In (length gv2) (gv2 ++ gv2)), (x < length l), (x < length gv2), (a < length l), (a < length gv2), (length l < x), (length l < a), (length l < length gv2)
(length gv2 < x), (length gv2 < a), (length gv2 < length l), (x <= length l), (x <= length gv2), (a <= length l), (a <= length gv2), (length l <= x), (length l <= a), (length l <= length gv2)
(length gv2 <= x), (length gv2 <= a), (length gv2 <= length l), (~ x <=* l), (~ x <=* gv2), (~ a <=* l), (~ a <=* gv2), (~ sorted l), (~ sorted gv2), (~ Permutation l l)
(~ Permutation l gv2), (~ Permutation gv2 l), (~ Permutation gv2 gv2), (~ In x l), (~ In x gv2), (~ In a l), (~ In a gv2), (~ x < x), (~ x < a), (~ a < x)
(~ a < a), (~ x <= x), (~ x <= a), (~ a <= x), (~ a <= a), (l <> l), (l <> gv2), (gv2 <> l), (gv2 <> gv2), (x <> x)
(x <> a), (a <> x), (a <> a), (None = Some l), (None = Some gv2), (x :: l = l), (x :: l = gv2), (x :: l = merge l l), (x :: l = merge l gv2), (x :: l = merge gv2 l)
(x :: l = merge gv2 gv2), (x :: l = l ++ l), (x :: l = l ++ gv2), (x :: l = gv2 ++ l), (x :: l = gv2 ++ gv2), (x :: l = []), (x :: gv2 = l), (x :: gv2 = gv2), (x :: gv2 = merge l l), (x :: gv2 = merge l gv2)
(x :: gv2 = merge gv2 l), (x :: gv2 = merge gv2 gv2), (x :: gv2 = l ++ l), (x :: gv2 = l ++ gv2), (x :: gv2 = gv2 ++ l), (x :: gv2 = gv2 ++ gv2), (x :: gv2 = []), (a :: l = l), (a :: l = gv2), (a :: l = merge l l)
(a :: l = merge l gv2), (a :: l = merge gv2 l), (a :: l = merge gv2 gv2), (a :: l = l ++ l), (a :: l = l ++ gv2), (a :: l = gv2 ++ l), (a :: l = gv2 ++ gv2), (a :: l = []), (a :: gv2 = l), (a :: gv2 = gv2)
(a :: gv2 = merge l l), (a :: gv2 = merge l gv2), (a :: gv2 = merge gv2 l), (a :: gv2 = merge gv2 gv2), (a :: gv2 = l ++ l), (a :: gv2 = l ++ gv2), (a :: gv2 = gv2 ++ l), (a :: gv2 = gv2 ++ gv2), (a :: gv2 = []), (merge l l = l)
(merge l l = gv2), (merge l l = l ++ l), (merge l l = l ++ gv2), (merge l l = gv2 ++ l), (merge l l = gv2 ++ gv2), (merge l gv2 = l), (merge l gv2 = gv2), (merge l gv2 = l ++ l), (merge l gv2 = l ++ gv2), (merge l gv2 = gv2 ++ l)
(merge l gv2 = gv2 ++ gv2), (merge gv2 l = l), (merge gv2 l = gv2), (merge gv2 l = l ++ l), (merge gv2 l = l ++ gv2), (merge gv2 l = gv2 ++ l), (merge gv2 l = gv2 ++ gv2), (merge gv2 gv2 = l), (merge gv2 gv2 = gv2), (merge gv2 gv2 = l ++ l)
(merge gv2 gv2 = l ++ gv2), (merge gv2 gv2 = gv2 ++ l), (merge gv2 gv2 = gv2 ++ gv2), (l ++ l = l), (l ++ l = gv2), (l ++ gv2 = l), (l ++ gv2 = gv2), (gv2 ++ l = l), (gv2 ++ l = gv2), (gv2 ++ gv2 = l)
(gv2 ++ gv2 = gv2), ([] = l), ([] = gv2), ([] = merge l l), ([] = merge l gv2), ([] = merge gv2 l), ([] = merge gv2 gv2), ([] = l ++ l), ([] = l ++ gv2), ([] = gv2 ++ l)
([] = gv2 ++ gv2), (None = Some x), (None = Some a), ((l, l) = split l), ((l, l) = split gv2), ((l, gv2) = split l), ((l, gv2) = split gv2), ((gv2, l) = split l), ((gv2, l) = split gv2), ((gv2, gv2) = split l)
((gv2, gv2) = split gv2), (length l = x), (length l = a), (length gv2 = x), (length gv2 = a)

Label: 1 (2)
(x <=* l), (x <=* gv2), (a <=* l), (a <=* gv2), (sorted l), (sorted gv2), (Permutation l l), (Permutation l gv2), (Permutation gv2 l), (Permutation gv2 gv2)
(In x l), (In x gv2), (In a l), (In a gv2), (x < x), (x < a), (a < x), (a < a), (x <= x), (x <= a)
(a <= x), (a <= a), (l = l), (l = gv2), (gv2 = l), (gv2 = gv2), (x = x), (x = a), (a = x), (a = a)
(false = sorted_bool l), (false = sorted_bool gv2), (true = sorted_bool l), (true = sorted_bool gv2), (x <=* x :: l), (x <=* x :: gv2), (x <=* a :: l), (x <=* a :: gv2), (x <=* merge l l), (x <=* merge l gv2)
(x <=* merge gv2 l), (x <=* merge gv2 gv2), (x <=* l ++ l), (x <=* l ++ gv2), (x <=* gv2 ++ l), (x <=* gv2 ++ gv2), (x <=* []), (a <=* x :: l), (a <=* x :: gv2), (a <=* a :: l)
(a <=* a :: gv2), (a <=* merge l l), (a <=* merge l gv2), (a <=* merge gv2 l), (a <=* merge gv2 gv2), (a <=* l ++ l), (a <=* l ++ gv2), (a <=* gv2 ++ l), (a <=* gv2 ++ gv2), (a <=* [])
(length l <=* l), (length l <=* gv2), (length l <=* x :: l), (length l <=* x :: gv2), (length l <=* a :: l), (length l <=* a :: gv2), (length l <=* merge l l), (length l <=* merge l gv2), (length l <=* merge gv2 l), (length l <=* merge gv2 gv2)
(length l <=* l ++ l), (length l <=* l ++ gv2), (length l <=* gv2 ++ l), (length l <=* gv2 ++ gv2), (length l <=* []), (length gv2 <=* l), (length gv2 <=* gv2), (length gv2 <=* x :: l), (length gv2 <=* x :: gv2), (length gv2 <=* a :: l)
(length gv2 <=* a :: gv2), (length gv2 <=* merge l l), (length gv2 <=* merge l gv2), (length gv2 <=* merge gv2 l), (length gv2 <=* merge gv2 gv2), (length gv2 <=* l ++ l), (length gv2 <=* l ++ gv2), (length gv2 <=* gv2 ++ l), (length gv2 <=* gv2 ++ gv2), (length gv2 <=* [])
(sorted (x :: l)), (sorted (x :: gv2)), (sorted (a :: l)), (sorted (a :: gv2)), (sorted (merge l l)), (sorted (merge l gv2)), (sorted (merge gv2 l)), (sorted (merge gv2 gv2)), (sorted (l ++ l)), (sorted (l ++ gv2))
(sorted (gv2 ++ l)), (sorted (gv2 ++ gv2)), (sorted []), (Permutation l (x :: l)), (Permutation l (x :: gv2)), (Permutation l (a :: l)), (Permutation l (a :: gv2)), (Permutation l (merge l l)), (Permutation l (merge l gv2)), (Permutation l (merge gv2 l))
(Permutation l (merge gv2 gv2)), (Permutation l (l ++ l)), (Permutation l (l ++ gv2)), (Permutation l (gv2 ++ l)), (Permutation l (gv2 ++ gv2)), (Permutation l []), (Permutation gv2 (x :: l)), (Permutation gv2 (x :: gv2)), (Permutation gv2 (a :: l)), (Permutation gv2 (a :: gv2))
(Permutation gv2 (merge l l)), (Permutation gv2 (merge l gv2)), (Permutation gv2 (merge gv2 l)), (Permutation gv2 (merge gv2 gv2)), (Permutation gv2 (l ++ l)), (Permutation gv2 (l ++ gv2)), (Permutation gv2 (gv2 ++ l)), (Permutation gv2 (gv2 ++ gv2)), (Permutation gv2 []), (Permutation (x :: l) l)
(Permutation (x :: l) gv2), (Permutation (x :: l) (x :: gv2)), (Permutation (x :: l) (a :: l)), (Permutation (x :: l) (a :: gv2)), (Permutation (x :: l) (merge l l)), (Permutation (x :: l) (merge l gv2)), (Permutation (x :: l) (merge gv2 l)), (Permutation (x :: l) (merge gv2 gv2)), (Permutation (x :: l) (l ++ l)), (Permutation (x :: l) (l ++ gv2))
(Permutation (x :: l) (gv2 ++ l)), (Permutation (x :: l) (gv2 ++ gv2)), (Permutation (x :: l) []), (Permutation (x :: gv2) l), (Permutation (x :: gv2) gv2), (Permutation (x :: gv2) (x :: l)), (Permutation (x :: gv2) (a :: l)), (Permutation (x :: gv2) (a :: gv2)), (Permutation (x :: gv2) (merge l l)), (Permutation (x :: gv2) (merge l gv2))
(Permutation (x :: gv2) (merge gv2 l)), (Permutation (x :: gv2) (merge gv2 gv2)), (Permutation (x :: gv2) (l ++ l)), (Permutation (x :: gv2) (l ++ gv2)), (Permutation (x :: gv2) (gv2 ++ l)), (Permutation (x :: gv2) (gv2 ++ gv2)), (Permutation (x :: gv2) []), (Permutation (a :: l) l), (Permutation (a :: l) gv2), (Permutation (a :: l) (x :: l))
(Permutation (a :: l) (x :: gv2)), (Permutation (a :: l) (a :: gv2)), (Permutation (a :: l) (merge l l)), (Permutation (a :: l) (merge l gv2)), (Permutation (a :: l) (merge gv2 l)), (Permutation (a :: l) (merge gv2 gv2)), (Permutation (a :: l) (l ++ l)), (Permutation (a :: l) (l ++ gv2)), (Permutation (a :: l) (gv2 ++ l)), (Permutation (a :: l) (gv2 ++ gv2))
(Permutation (a :: l) []), (Permutation (a :: gv2) l), (Permutation (a :: gv2) gv2), (Permutation (a :: gv2) (x :: l)), (Permutation (a :: gv2) (x :: gv2)), (Permutation (a :: gv2) (a :: l)), (Permutation (a :: gv2) (merge l l)), (Permutation (a :: gv2) (merge l gv2)), (Permutation (a :: gv2) (merge gv2 l)), (Permutation (a :: gv2) (merge gv2 gv2))
(Permutation (a :: gv2) (l ++ l)), (Permutation (a :: gv2) (l ++ gv2)), (Permutation (a :: gv2) (gv2 ++ l)), (Permutation (a :: gv2) (gv2 ++ gv2)), (Permutation (a :: gv2) []), (Permutation (merge l l) l), (Permutation (merge l l) gv2), (Permutation (merge l l) (x :: l)), (Permutation (merge l l) (x :: gv2)), (Permutation (merge l l) (a :: l))
(Permutation (merge l l) (a :: gv2)), (Permutation (merge l l) (merge l gv2)), (Permutation (merge l l) (merge gv2 l)), (Permutation (merge l l) (merge gv2 gv2)), (Permutation (merge l l) (l ++ l)), (Permutation (merge l l) (l ++ gv2)), (Permutation (merge l l) (gv2 ++ l)), (Permutation (merge l l) (gv2 ++ gv2)), (Permutation (merge l l) []), (Permutation (merge l gv2) l)
(Permutation (merge l gv2) gv2), (Permutation (merge l gv2) (x :: l)), (Permutation (merge l gv2) (x :: gv2)), (Permutation (merge l gv2) (a :: l)), (Permutation (merge l gv2) (a :: gv2)), (Permutation (merge l gv2) (merge l l)), (Permutation (merge l gv2) (merge gv2 l)), (Permutation (merge l gv2) (merge gv2 gv2)), (Permutation (merge l gv2) (l ++ l)), (Permutation (merge l gv2) (l ++ gv2))
(Permutation (merge l gv2) (gv2 ++ l)), (Permutation (merge l gv2) (gv2 ++ gv2)), (Permutation (merge l gv2) []), (Permutation (merge gv2 l) l), (Permutation (merge gv2 l) gv2), (Permutation (merge gv2 l) (x :: l)), (Permutation (merge gv2 l) (x :: gv2)), (Permutation (merge gv2 l) (a :: l)), (Permutation (merge gv2 l) (a :: gv2)), (Permutation (merge gv2 l) (merge l l))
(Permutation (merge gv2 l) (merge l gv2)), (Permutation (merge gv2 l) (merge gv2 gv2)), (Permutation (merge gv2 l) (l ++ l)), (Permutation (merge gv2 l) (l ++ gv2)), (Permutation (merge gv2 l) (gv2 ++ l)), (Permutation (merge gv2 l) (gv2 ++ gv2)), (Permutation (merge gv2 l) []), (Permutation (merge gv2 gv2) l), (Permutation (merge gv2 gv2) gv2), (Permutation (merge gv2 gv2) (x :: l))
(Permutation (merge gv2 gv2) (x :: gv2)), (Permutation (merge gv2 gv2) (a :: l)), (Permutation (merge gv2 gv2) (a :: gv2)), (Permutation (merge gv2 gv2) (merge l l)), (Permutation (merge gv2 gv2) (merge l gv2)), (Permutation (merge gv2 gv2) (merge gv2 l)), (Permutation (merge gv2 gv2) (l ++ l)), (Permutation (merge gv2 gv2) (l ++ gv2)), (Permutation (merge gv2 gv2) (gv2 ++ l)), (Permutation (merge gv2 gv2) (gv2 ++ gv2))
(Permutation (merge gv2 gv2) []), (Permutation (l ++ l) l), (Permutation (l ++ l) gv2), (Permutation (l ++ l) (x :: l)), (Permutation (l ++ l) (x :: gv2)), (Permutation (l ++ l) (a :: l)), (Permutation (l ++ l) (a :: gv2)), (Permutation (l ++ l) (merge l l)), (Permutation (l ++ l) (merge l gv2)), (Permutation (l ++ l) (merge gv2 l))
(Permutation (l ++ l) (merge gv2 gv2)), (Permutation (l ++ l) (l ++ gv2)), (Permutation (l ++ l) (gv2 ++ l)), (Permutation (l ++ l) (gv2 ++ gv2)), (Permutation (l ++ l) []), (Permutation (l ++ gv2) l), (Permutation (l ++ gv2) gv2), (Permutation (l ++ gv2) (x :: l)), (Permutation (l ++ gv2) (x :: gv2)), (Permutation (l ++ gv2) (a :: l))
(Permutation (l ++ gv2) (a :: gv2)), (Permutation (l ++ gv2) (merge l l)), (Permutation (l ++ gv2) (merge l gv2)), (Permutation (l ++ gv2) (merge gv2 l)), (Permutation (l ++ gv2) (merge gv2 gv2)), (Permutation (l ++ gv2) (l ++ l)), (Permutation (l ++ gv2) (gv2 ++ l)), (Permutation (l ++ gv2) (gv2 ++ gv2)), (Permutation (l ++ gv2) []), (Permutation (gv2 ++ l) l)
(Permutation (gv2 ++ l) gv2), (Permutation (gv2 ++ l) (x :: l)), (Permutation (gv2 ++ l) (x :: gv2)), (Permutation (gv2 ++ l) (a :: l)), (Permutation (gv2 ++ l) (a :: gv2)), (Permutation (gv2 ++ l) (merge l l)), (Permutation (gv2 ++ l) (merge l gv2)), (Permutation (gv2 ++ l) (merge gv2 l)), (Permutation (gv2 ++ l) (merge gv2 gv2)), (Permutation (gv2 ++ l) (l ++ l))
(Permutation (gv2 ++ l) (l ++ gv2)), (Permutation (gv2 ++ l) (gv2 ++ gv2)), (Permutation (gv2 ++ l) []), (Permutation (gv2 ++ gv2) l), (Permutation (gv2 ++ gv2) gv2), (Permutation (gv2 ++ gv2) (x :: l)), (Permutation (gv2 ++ gv2) (x :: gv2)), (Permutation (gv2 ++ gv2) (a :: l)), (Permutation (gv2 ++ gv2) (a :: gv2)), (Permutation (gv2 ++ gv2) (merge l l))
(Permutation (gv2 ++ gv2) (merge l gv2)), (Permutation (gv2 ++ gv2) (merge gv2 l)), (Permutation (gv2 ++ gv2) (merge gv2 gv2)), (Permutation (gv2 ++ gv2) (l ++ l)), (Permutation (gv2 ++ gv2) (l ++ gv2)), (Permutation (gv2 ++ gv2) (gv2 ++ l)), (Permutation (gv2 ++ gv2) []), (Permutation [] l), (Permutation [] gv2), (Permutation [] (x :: l))
(Permutation [] (x :: gv2)), (Permutation [] (a :: l)), (Permutation [] (a :: gv2)), (Permutation [] (merge l l)), (Permutation [] (merge l gv2)), (Permutation [] (merge gv2 l)), (Permutation [] (merge gv2 gv2)), (Permutation [] (l ++ l)), (Permutation [] (l ++ gv2)), (Permutation [] (gv2 ++ l))
(Permutation [] (gv2 ++ gv2)), (In x (x :: l)), (In x (x :: gv2)), (In x (a :: l)), (In x (a :: gv2)), (In x (merge l l)), (In x (merge l gv2)), (In x (merge gv2 l)), (In x (merge gv2 gv2)), (In x (l ++ l))
(In x (l ++ gv2)), (In x (gv2 ++ l)), (In x (gv2 ++ gv2)), (In a (x :: l)), (In a (x :: gv2)), (In a (a :: l)), (In a (a :: gv2)), (In a (merge l l)), (In a (merge l gv2)), (In a (merge gv2 l))
(In a (merge gv2 gv2)), (In a (l ++ l)), (In a (l ++ gv2)), (In a (gv2 ++ l)), (In a (gv2 ++ gv2)), (In (length l) l), (In (length l) gv2), (In (length l) (x :: l)), (In (length l) (x :: gv2)), (In (length l) (a :: l))
(In (length l) (a :: gv2)), (In (length l) (merge l l)), (In (length l) (merge l gv2)), (In (length l) (merge gv2 l)), (In (length l) (merge gv2 gv2)), (In (length l) (l ++ l)), (In (length l) (l ++ gv2)), (In (length l) (gv2 ++ l)), (In (length l) (gv2 ++ gv2)), (In (length gv2) l)
(In (length gv2) gv2), (In (length gv2) (x :: l)), (In (length gv2) (x :: gv2)), (In (length gv2) (a :: l)), (In (length gv2) (a :: gv2)), (In (length gv2) (merge l l)), (In (length gv2) (merge l gv2)), (In (length gv2) (merge gv2 l)), (In (length gv2) (merge gv2 gv2)), (In (length gv2) (l ++ l))
(In (length gv2) (l ++ gv2)), (In (length gv2) (gv2 ++ l)), (In (length gv2) (gv2 ++ gv2)), (x < length l), (x < length gv2), (a < length l), (a < length gv2), (length l < x), (length l < a), (length l < length gv2)
(length gv2 < x), (length gv2 < a), (length gv2 < length l), (x <= length l), (x <= length gv2), (a <= length l), (a <= length gv2), (length l <= x), (length l <= a), (length l <= length gv2)
(length gv2 <= x), (length gv2 <= a), (length gv2 <= length l), (~ x <=* l), (~ x <=* gv2), (~ a <=* l), (~ a <=* gv2), (~ sorted l), (~ sorted gv2), (~ Permutation l l)
(~ Permutation l gv2), (~ Permutation gv2 l), (~ Permutation gv2 gv2), (~ In x l), (~ In x gv2), (~ In a l), (~ In a gv2), (~ x < x), (~ x < a), (~ a < x)
(~ a < a), (~ x <= x), (~ x <= a), (~ a <= x), (~ a <= a), (l <> l), (l <> gv2), (gv2 <> l), (gv2 <> gv2), (x <> x)
(x <> a), (a <> x), (a <> a), (None = Some l), (None = Some gv2), (x :: l = l), (x :: l = gv2), (x :: l = merge l l), (x :: l = merge l gv2), (x :: l = merge gv2 l)
(x :: l = merge gv2 gv2), (x :: l = l ++ l), (x :: l = l ++ gv2), (x :: l = gv2 ++ l), (x :: l = gv2 ++ gv2), (x :: l = []), (x :: gv2 = l), (x :: gv2 = gv2), (x :: gv2 = merge l l), (x :: gv2 = merge l gv2)
(x :: gv2 = merge gv2 l), (x :: gv2 = merge gv2 gv2), (x :: gv2 = l ++ l), (x :: gv2 = l ++ gv2), (x :: gv2 = gv2 ++ l), (x :: gv2 = gv2 ++ gv2), (x :: gv2 = []), (a :: l = l), (a :: l = gv2), (a :: l = merge l l)
(a :: l = merge l gv2), (a :: l = merge gv2 l), (a :: l = merge gv2 gv2), (a :: l = l ++ l), (a :: l = l ++ gv2), (a :: l = gv2 ++ l), (a :: l = gv2 ++ gv2), (a :: l = []), (a :: gv2 = l), (a :: gv2 = gv2)
(a :: gv2 = merge l l), (a :: gv2 = merge l gv2), (a :: gv2 = merge gv2 l), (a :: gv2 = merge gv2 gv2), (a :: gv2 = l ++ l), (a :: gv2 = l ++ gv2), (a :: gv2 = gv2 ++ l), (a :: gv2 = gv2 ++ gv2), (a :: gv2 = []), (merge l l = l)
(merge l l = gv2), (merge l l = l ++ l), (merge l l = l ++ gv2), (merge l l = gv2 ++ l), (merge l l = gv2 ++ gv2), (merge l gv2 = l), (merge l gv2 = gv2), (merge l gv2 = l ++ l), (merge l gv2 = l ++ gv2), (merge l gv2 = gv2 ++ l)
(merge l gv2 = gv2 ++ gv2), (merge gv2 l = l), (merge gv2 l = gv2), (merge gv2 l = l ++ l), (merge gv2 l = l ++ gv2), (merge gv2 l = gv2 ++ l), (merge gv2 l = gv2 ++ gv2), (merge gv2 gv2 = l), (merge gv2 gv2 = gv2), (merge gv2 gv2 = l ++ l)
(merge gv2 gv2 = l ++ gv2), (merge gv2 gv2 = gv2 ++ l), (merge gv2 gv2 = gv2 ++ gv2), (l ++ l = l), (l ++ l = gv2), (l ++ gv2 = l), (l ++ gv2 = gv2), (gv2 ++ l = l), (gv2 ++ l = gv2), (gv2 ++ gv2 = l)
(gv2 ++ gv2 = gv2), ([] = l), ([] = gv2), ([] = merge l l), ([] = merge l gv2), ([] = merge gv2 l), ([] = merge gv2 gv2), ([] = l ++ l), ([] = l ++ gv2), ([] = gv2 ++ l)
([] = gv2 ++ gv2), (None = Some x), (None = Some a), ((l, l) = split l), ((l, l) = split gv2), ((l, gv2) = split l), ((l, gv2) = split gv2), ((gv2, l) = split l), ((gv2, l) = split gv2), ((gv2, gv2) = split l)
((gv2, gv2) = split gv2), (length l = x), (length l = a), (length gv2 = x), (length gv2 = a)

Label: 1 (3)
(x <=* l), (x <=* gv2), (a <=* l), (a <=* gv2), (sorted l), (sorted gv2), (Permutation l l), (Permutation l gv2), (Permutation gv2 l), (Permutation gv2 gv2)
(In x l), (In x gv2), (In a l), (In a gv2), (x < x), (x < a), (a < x), (a < a), (x <= x), (x <= a)
(a <= x), (a <= a), (l = l), (l = gv2), (gv2 = l), (gv2 = gv2), (x = x), (x = a), (a = x), (a = a)
(false = sorted_bool l), (false = sorted_bool gv2), (true = sorted_bool l), (true = sorted_bool gv2), (x <=* x :: l), (x <=* x :: gv2), (x <=* a :: l), (x <=* a :: gv2), (x <=* merge l l), (x <=* merge l gv2)
(x <=* merge gv2 l), (x <=* merge gv2 gv2), (x <=* l ++ l), (x <=* l ++ gv2), (x <=* gv2 ++ l), (x <=* gv2 ++ gv2), (x <=* []), (a <=* x :: l), (a <=* x :: gv2), (a <=* a :: l)
(a <=* a :: gv2), (a <=* merge l l), (a <=* merge l gv2), (a <=* merge gv2 l), (a <=* merge gv2 gv2), (a <=* l ++ l), (a <=* l ++ gv2), (a <=* gv2 ++ l), (a <=* gv2 ++ gv2), (a <=* [])
(length l <=* l), (length l <=* gv2), (length l <=* x :: l), (length l <=* x :: gv2), (length l <=* a :: l), (length l <=* a :: gv2), (length l <=* merge l l), (length l <=* merge l gv2), (length l <=* merge gv2 l), (length l <=* merge gv2 gv2)
(length l <=* l ++ l), (length l <=* l ++ gv2), (length l <=* gv2 ++ l), (length l <=* gv2 ++ gv2), (length l <=* []), (length gv2 <=* l), (length gv2 <=* gv2), (length gv2 <=* x :: l), (length gv2 <=* x :: gv2), (length gv2 <=* a :: l)
(length gv2 <=* a :: gv2), (length gv2 <=* merge l l), (length gv2 <=* merge l gv2), (length gv2 <=* merge gv2 l), (length gv2 <=* merge gv2 gv2), (length gv2 <=* l ++ l), (length gv2 <=* l ++ gv2), (length gv2 <=* gv2 ++ l), (length gv2 <=* gv2 ++ gv2), (length gv2 <=* [])
(sorted (x :: l)), (sorted (x :: gv2)), (sorted (a :: l)), (sorted (a :: gv2)), (sorted (merge l l)), (sorted (merge l gv2)), (sorted (merge gv2 l)), (sorted (merge gv2 gv2)), (sorted (l ++ l)), (sorted (l ++ gv2))
(sorted (gv2 ++ l)), (sorted (gv2 ++ gv2)), (sorted []), (Permutation l (x :: l)), (Permutation l (x :: gv2)), (Permutation l (a :: l)), (Permutation l (a :: gv2)), (Permutation l (merge l l)), (Permutation l (merge l gv2)), (Permutation l (merge gv2 l))
(Permutation l (merge gv2 gv2)), (Permutation l (l ++ l)), (Permutation l (l ++ gv2)), (Permutation l (gv2 ++ l)), (Permutation l (gv2 ++ gv2)), (Permutation l []), (Permutation gv2 (x :: l)), (Permutation gv2 (x :: gv2)), (Permutation gv2 (a :: l)), (Permutation gv2 (a :: gv2))
(Permutation gv2 (merge l l)), (Permutation gv2 (merge l gv2)), (Permutation gv2 (merge gv2 l)), (Permutation gv2 (merge gv2 gv2)), (Permutation gv2 (l ++ l)), (Permutation gv2 (l ++ gv2)), (Permutation gv2 (gv2 ++ l)), (Permutation gv2 (gv2 ++ gv2)), (Permutation gv2 []), (Permutation (x :: l) l)
(Permutation (x :: l) gv2), (Permutation (x :: l) (x :: gv2)), (Permutation (x :: l) (a :: l)), (Permutation (x :: l) (a :: gv2)), (Permutation (x :: l) (merge l l)), (Permutation (x :: l) (merge l gv2)), (Permutation (x :: l) (merge gv2 l)), (Permutation (x :: l) (merge gv2 gv2)), (Permutation (x :: l) (l ++ l)), (Permutation (x :: l) (l ++ gv2))
(Permutation (x :: l) (gv2 ++ l)), (Permutation (x :: l) (gv2 ++ gv2)), (Permutation (x :: l) []), (Permutation (x :: gv2) l), (Permutation (x :: gv2) gv2), (Permutation (x :: gv2) (x :: l)), (Permutation (x :: gv2) (a :: l)), (Permutation (x :: gv2) (a :: gv2)), (Permutation (x :: gv2) (merge l l)), (Permutation (x :: gv2) (merge l gv2))
(Permutation (x :: gv2) (merge gv2 l)), (Permutation (x :: gv2) (merge gv2 gv2)), (Permutation (x :: gv2) (l ++ l)), (Permutation (x :: gv2) (l ++ gv2)), (Permutation (x :: gv2) (gv2 ++ l)), (Permutation (x :: gv2) (gv2 ++ gv2)), (Permutation (x :: gv2) []), (Permutation (a :: l) l), (Permutation (a :: l) gv2), (Permutation (a :: l) (x :: l))
(Permutation (a :: l) (x :: gv2)), (Permutation (a :: l) (a :: gv2)), (Permutation (a :: l) (merge l l)), (Permutation (a :: l) (merge l gv2)), (Permutation (a :: l) (merge gv2 l)), (Permutation (a :: l) (merge gv2 gv2)), (Permutation (a :: l) (l ++ l)), (Permutation (a :: l) (l ++ gv2)), (Permutation (a :: l) (gv2 ++ l)), (Permutation (a :: l) (gv2 ++ gv2))
(Permutation (a :: l) []), (Permutation (a :: gv2) l), (Permutation (a :: gv2) gv2), (Permutation (a :: gv2) (x :: l)), (Permutation (a :: gv2) (x :: gv2)), (Permutation (a :: gv2) (a :: l)), (Permutation (a :: gv2) (merge l l)), (Permutation (a :: gv2) (merge l gv2)), (Permutation (a :: gv2) (merge gv2 l)), (Permutation (a :: gv2) (merge gv2 gv2))
(Permutation (a :: gv2) (l ++ l)), (Permutation (a :: gv2) (l ++ gv2)), (Permutation (a :: gv2) (gv2 ++ l)), (Permutation (a :: gv2) (gv2 ++ gv2)), (Permutation (a :: gv2) []), (Permutation (merge l l) l), (Permutation (merge l l) gv2), (Permutation (merge l l) (x :: l)), (Permutation (merge l l) (x :: gv2)), (Permutation (merge l l) (a :: l))
(Permutation (merge l l) (a :: gv2)), (Permutation (merge l l) (merge l gv2)), (Permutation (merge l l) (merge gv2 l)), (Permutation (merge l l) (merge gv2 gv2)), (Permutation (merge l l) (l ++ l)), (Permutation (merge l l) (l ++ gv2)), (Permutation (merge l l) (gv2 ++ l)), (Permutation (merge l l) (gv2 ++ gv2)), (Permutation (merge l l) []), (Permutation (merge l gv2) l)
(Permutation (merge l gv2) gv2), (Permutation (merge l gv2) (x :: l)), (Permutation (merge l gv2) (x :: gv2)), (Permutation (merge l gv2) (a :: l)), (Permutation (merge l gv2) (a :: gv2)), (Permutation (merge l gv2) (merge l l)), (Permutation (merge l gv2) (merge gv2 l)), (Permutation (merge l gv2) (merge gv2 gv2)), (Permutation (merge l gv2) (l ++ l)), (Permutation (merge l gv2) (l ++ gv2))
(Permutation (merge l gv2) (gv2 ++ l)), (Permutation (merge l gv2) (gv2 ++ gv2)), (Permutation (merge l gv2) []), (Permutation (merge gv2 l) l), (Permutation (merge gv2 l) gv2), (Permutation (merge gv2 l) (x :: l)), (Permutation (merge gv2 l) (x :: gv2)), (Permutation (merge gv2 l) (a :: l)), (Permutation (merge gv2 l) (a :: gv2)), (Permutation (merge gv2 l) (merge l l))
(Permutation (merge gv2 l) (merge l gv2)), (Permutation (merge gv2 l) (merge gv2 gv2)), (Permutation (merge gv2 l) (l ++ l)), (Permutation (merge gv2 l) (l ++ gv2)), (Permutation (merge gv2 l) (gv2 ++ l)), (Permutation (merge gv2 l) (gv2 ++ gv2)), (Permutation (merge gv2 l) []), (Permutation (merge gv2 gv2) l), (Permutation (merge gv2 gv2) gv2), (Permutation (merge gv2 gv2) (x :: l))
(Permutation (merge gv2 gv2) (x :: gv2)), (Permutation (merge gv2 gv2) (a :: l)), (Permutation (merge gv2 gv2) (a :: gv2)), (Permutation (merge gv2 gv2) (merge l l)), (Permutation (merge gv2 gv2) (merge l gv2)), (Permutation (merge gv2 gv2) (merge gv2 l)), (Permutation (merge gv2 gv2) (l ++ l)), (Permutation (merge gv2 gv2) (l ++ gv2)), (Permutation (merge gv2 gv2) (gv2 ++ l)), (Permutation (merge gv2 gv2) (gv2 ++ gv2))
(Permutation (merge gv2 gv2) []), (Permutation (l ++ l) l), (Permutation (l ++ l) gv2), (Permutation (l ++ l) (x :: l)), (Permutation (l ++ l) (x :: gv2)), (Permutation (l ++ l) (a :: l)), (Permutation (l ++ l) (a :: gv2)), (Permutation (l ++ l) (merge l l)), (Permutation (l ++ l) (merge l gv2)), (Permutation (l ++ l) (merge gv2 l))
(Permutation (l ++ l) (merge gv2 gv2)), (Permutation (l ++ l) (l ++ gv2)), (Permutation (l ++ l) (gv2 ++ l)), (Permutation (l ++ l) (gv2 ++ gv2)), (Permutation (l ++ l) []), (Permutation (l ++ gv2) l), (Permutation (l ++ gv2) gv2), (Permutation (l ++ gv2) (x :: l)), (Permutation (l ++ gv2) (x :: gv2)), (Permutation (l ++ gv2) (a :: l))
(Permutation (l ++ gv2) (a :: gv2)), (Permutation (l ++ gv2) (merge l l)), (Permutation (l ++ gv2) (merge l gv2)), (Permutation (l ++ gv2) (merge gv2 l)), (Permutation (l ++ gv2) (merge gv2 gv2)), (Permutation (l ++ gv2) (l ++ l)), (Permutation (l ++ gv2) (gv2 ++ l)), (Permutation (l ++ gv2) (gv2 ++ gv2)), (Permutation (l ++ gv2) []), (Permutation (gv2 ++ l) l)
(Permutation (gv2 ++ l) gv2), (Permutation (gv2 ++ l) (x :: l)), (Permutation (gv2 ++ l) (x :: gv2)), (Permutation (gv2 ++ l) (a :: l)), (Permutation (gv2 ++ l) (a :: gv2)), (Permutation (gv2 ++ l) (merge l l)), (Permutation (gv2 ++ l) (merge l gv2)), (Permutation (gv2 ++ l) (merge gv2 l)), (Permutation (gv2 ++ l) (merge gv2 gv2)), (Permutation (gv2 ++ l) (l ++ l))
(Permutation (gv2 ++ l) (l ++ gv2)), (Permutation (gv2 ++ l) (gv2 ++ gv2)), (Permutation (gv2 ++ l) []), (Permutation (gv2 ++ gv2) l), (Permutation (gv2 ++ gv2) gv2), (Permutation (gv2 ++ gv2) (x :: l)), (Permutation (gv2 ++ gv2) (x :: gv2)), (Permutation (gv2 ++ gv2) (a :: l)), (Permutation (gv2 ++ gv2) (a :: gv2)), (Permutation (gv2 ++ gv2) (merge l l))
(Permutation (gv2 ++ gv2) (merge l gv2)), (Permutation (gv2 ++ gv2) (merge gv2 l)), (Permutation (gv2 ++ gv2) (merge gv2 gv2)), (Permutation (gv2 ++ gv2) (l ++ l)), (Permutation (gv2 ++ gv2) (l ++ gv2)), (Permutation (gv2 ++ gv2) (gv2 ++ l)), (Permutation (gv2 ++ gv2) []), (Permutation [] l), (Permutation [] gv2), (Permutation [] (x :: l))
(Permutation [] (x :: gv2)), (Permutation [] (a :: l)), (Permutation [] (a :: gv2)), (Permutation [] (merge l l)), (Permutation [] (merge l gv2)), (Permutation [] (merge gv2 l)), (Permutation [] (merge gv2 gv2)), (Permutation [] (l ++ l)), (Permutation [] (l ++ gv2)), (Permutation [] (gv2 ++ l))
(Permutation [] (gv2 ++ gv2)), (In x (x :: l)), (In x (x :: gv2)), (In x (a :: l)), (In x (a :: gv2)), (In x (merge l l)), (In x (merge l gv2)), (In x (merge gv2 l)), (In x (merge gv2 gv2)), (In x (l ++ l))
(In x (l ++ gv2)), (In x (gv2 ++ l)), (In x (gv2 ++ gv2)), (In a (x :: l)), (In a (x :: gv2)), (In a (a :: l)), (In a (a :: gv2)), (In a (merge l l)), (In a (merge l gv2)), (In a (merge gv2 l))
(In a (merge gv2 gv2)), (In a (l ++ l)), (In a (l ++ gv2)), (In a (gv2 ++ l)), (In a (gv2 ++ gv2)), (In (length l) l), (In (length l) gv2), (In (length l) (x :: l)), (In (length l) (x :: gv2)), (In (length l) (a :: l))
(In (length l) (a :: gv2)), (In (length l) (merge l l)), (In (length l) (merge l gv2)), (In (length l) (merge gv2 l)), (In (length l) (merge gv2 gv2)), (In (length l) (l ++ l)), (In (length l) (l ++ gv2)), (In (length l) (gv2 ++ l)), (In (length l) (gv2 ++ gv2)), (In (length gv2) l)
(In (length gv2) gv2), (In (length gv2) (x :: l)), (In (length gv2) (x :: gv2)), (In (length gv2) (a :: l)), (In (length gv2) (a :: gv2)), (In (length gv2) (merge l l)), (In (length gv2) (merge l gv2)), (In (length gv2) (merge gv2 l)), (In (length gv2) (merge gv2 gv2)), (In (length gv2) (l ++ l))
(In (length gv2) (l ++ gv2)), (In (length gv2) (gv2 ++ l)), (In (length gv2) (gv2 ++ gv2)), (x < length l), (x < length gv2), (a < length l), (a < length gv2), (length l < x), (length l < a), (length l < length gv2)
(length gv2 < x), (length gv2 < a), (length gv2 < length l), (x <= length l), (x <= length gv2), (a <= length l), (a <= length gv2), (length l <= x), (length l <= a), (length l <= length gv2)
(length gv2 <= x), (length gv2 <= a), (length gv2 <= length l), (~ x <=* l), (~ x <=* gv2), (~ a <=* l), (~ a <=* gv2), (~ sorted l), (~ sorted gv2), (~ Permutation l l)
(~ Permutation l gv2), (~ Permutation gv2 l), (~ Permutation gv2 gv2), (~ In x l), (~ In x gv2), (~ In a l), (~ In a gv2), (~ x < x), (~ x < a), (~ a < x)
(~ a < a), (~ x <= x), (~ x <= a), (~ a <= x), (~ a <= a), (l <> l), (l <> gv2), (gv2 <> l), (gv2 <> gv2), (x <> x)
(x <> a), (a <> x), (a <> a), (None = Some l), (None = Some gv2), (x :: l = l), (x :: l = gv2), (x :: l = merge l l), (x :: l = merge l gv2), (x :: l = merge gv2 l)
(x :: l = merge gv2 gv2), (x :: l = l ++ l), (x :: l = l ++ gv2), (x :: l = gv2 ++ l), (x :: l = gv2 ++ gv2), (x :: l = []), (x :: gv2 = l), (x :: gv2 = gv2), (x :: gv2 = merge l l), (x :: gv2 = merge l gv2)
(x :: gv2 = merge gv2 l), (x :: gv2 = merge gv2 gv2), (x :: gv2 = l ++ l), (x :: gv2 = l ++ gv2), (x :: gv2 = gv2 ++ l), (x :: gv2 = gv2 ++ gv2), (x :: gv2 = []), (a :: l = l), (a :: l = gv2), (a :: l = merge l l)
(a :: l = merge l gv2), (a :: l = merge gv2 l), (a :: l = merge gv2 gv2), (a :: l = l ++ l), (a :: l = l ++ gv2), (a :: l = gv2 ++ l), (a :: l = gv2 ++ gv2), (a :: l = []), (a :: gv2 = l), (a :: gv2 = gv2)
(a :: gv2 = merge l l), (a :: gv2 = merge l gv2), (a :: gv2 = merge gv2 l), (a :: gv2 = merge gv2 gv2), (a :: gv2 = l ++ l), (a :: gv2 = l ++ gv2), (a :: gv2 = gv2 ++ l), (a :: gv2 = gv2 ++ gv2), (a :: gv2 = []), (merge l l = l)
(merge l l = gv2), (merge l l = l ++ l), (merge l l = l ++ gv2), (merge l l = gv2 ++ l), (merge l l = gv2 ++ gv2), (merge l gv2 = l), (merge l gv2 = gv2), (merge l gv2 = l ++ l), (merge l gv2 = l ++ gv2), (merge l gv2 = gv2 ++ l)
(merge l gv2 = gv2 ++ gv2), (merge gv2 l = l), (merge gv2 l = gv2), (merge gv2 l = l ++ l), (merge gv2 l = l ++ gv2), (merge gv2 l = gv2 ++ l), (merge gv2 l = gv2 ++ gv2), (merge gv2 gv2 = l), (merge gv2 gv2 = gv2), (merge gv2 gv2 = l ++ l)
(merge gv2 gv2 = l ++ gv2), (merge gv2 gv2 = gv2 ++ l), (merge gv2 gv2 = gv2 ++ gv2), (l ++ l = l), (l ++ l = gv2), (l ++ gv2 = l), (l ++ gv2 = gv2), (gv2 ++ l = l), (gv2 ++ l = gv2), (gv2 ++ gv2 = l)
(gv2 ++ gv2 = gv2), ([] = l), ([] = gv2), ([] = merge l l), ([] = merge l gv2), ([] = merge gv2 l), ([] = merge gv2 gv2), ([] = l ++ l), ([] = l ++ gv2), ([] = gv2 ++ l)
([] = gv2 ++ gv2), (None = Some x), (None = Some a), ((l, l) = split l), ((l, l) = split gv2), ((l, gv2) = split l), ((l, gv2) = split gv2), ((gv2, l) = split l), ((gv2, l) = split gv2), ((gv2, gv2) = split l)
((gv2, gv2) = split gv2), (length l = x), (length l = a), (length gv2 = x), (length gv2 = a)

Label: 2 (4)
(x <=* l), (x <=* gv3), (a <=* l), (a <=* gv3), (sorted l), (sorted gv3), (Permutation l l), (Permutation l gv3), (Permutation gv3 l), (Permutation gv3 gv3)
(In x l), (In x gv3), (In a l), (In a gv3), (x < x), (x < a), (a < x), (a < a), (x <= x), (x <= a)
(a <= x), (a <= a), (l = l), (l = gv3), (gv3 = l), (gv3 = gv3), (x = x), (x = a), (a = x), (a = a)
(false = sorted_bool l), (false = sorted_bool gv3), (true = sorted_bool l), (true = sorted_bool gv3), (x <=* x :: l), (x <=* x :: gv3), (x <=* a :: l), (x <=* a :: gv3), (x <=* merge l l), (x <=* merge l gv3)
(x <=* merge gv3 l), (x <=* merge gv3 gv3), (x <=* l ++ l), (x <=* l ++ gv3), (x <=* gv3 ++ l), (x <=* gv3 ++ gv3), (x <=* []), (a <=* x :: l), (a <=* x :: gv3), (a <=* a :: l)
(a <=* a :: gv3), (a <=* merge l l), (a <=* merge l gv3), (a <=* merge gv3 l), (a <=* merge gv3 gv3), (a <=* l ++ l), (a <=* l ++ gv3), (a <=* gv3 ++ l), (a <=* gv3 ++ gv3), (a <=* [])
(length l <=* l), (length l <=* gv3), (length l <=* x :: l), (length l <=* x :: gv3), (length l <=* a :: l), (length l <=* a :: gv3), (length l <=* merge l l), (length l <=* merge l gv3), (length l <=* merge gv3 l), (length l <=* merge gv3 gv3)
(length l <=* l ++ l), (length l <=* l ++ gv3), (length l <=* gv3 ++ l), (length l <=* gv3 ++ gv3), (length l <=* []), (length gv3 <=* l), (length gv3 <=* gv3), (length gv3 <=* x :: l), (length gv3 <=* x :: gv3), (length gv3 <=* a :: l)
(length gv3 <=* a :: gv3), (length gv3 <=* merge l l), (length gv3 <=* merge l gv3), (length gv3 <=* merge gv3 l), (length gv3 <=* merge gv3 gv3), (length gv3 <=* l ++ l), (length gv3 <=* l ++ gv3), (length gv3 <=* gv3 ++ l), (length gv3 <=* gv3 ++ gv3), (length gv3 <=* [])
(sorted (x :: l)), (sorted (x :: gv3)), (sorted (a :: l)), (sorted (a :: gv3)), (sorted (merge l l)), (sorted (merge l gv3)), (sorted (merge gv3 l)), (sorted (merge gv3 gv3)), (sorted (l ++ l)), (sorted (l ++ gv3))
(sorted (gv3 ++ l)), (sorted (gv3 ++ gv3)), (sorted []), (Permutation l (x :: l)), (Permutation l (x :: gv3)), (Permutation l (a :: l)), (Permutation l (a :: gv3)), (Permutation l (merge l l)), (Permutation l (merge l gv3)), (Permutation l (merge gv3 l))
(Permutation l (merge gv3 gv3)), (Permutation l (l ++ l)), (Permutation l (l ++ gv3)), (Permutation l (gv3 ++ l)), (Permutation l (gv3 ++ gv3)), (Permutation l []), (Permutation gv3 (x :: l)), (Permutation gv3 (x :: gv3)), (Permutation gv3 (a :: l)), (Permutation gv3 (a :: gv3))
(Permutation gv3 (merge l l)), (Permutation gv3 (merge l gv3)), (Permutation gv3 (merge gv3 l)), (Permutation gv3 (merge gv3 gv3)), (Permutation gv3 (l ++ l)), (Permutation gv3 (l ++ gv3)), (Permutation gv3 (gv3 ++ l)), (Permutation gv3 (gv3 ++ gv3)), (Permutation gv3 []), (Permutation (x :: l) l)
(Permutation (x :: l) gv3), (Permutation (x :: l) (x :: gv3)), (Permutation (x :: l) (a :: l)), (Permutation (x :: l) (a :: gv3)), (Permutation (x :: l) (merge l l)), (Permutation (x :: l) (merge l gv3)), (Permutation (x :: l) (merge gv3 l)), (Permutation (x :: l) (merge gv3 gv3)), (Permutation (x :: l) (l ++ l)), (Permutation (x :: l) (l ++ gv3))
(Permutation (x :: l) (gv3 ++ l)), (Permutation (x :: l) (gv3 ++ gv3)), (Permutation (x :: l) []), (Permutation (x :: gv3) l), (Permutation (x :: gv3) gv3), (Permutation (x :: gv3) (x :: l)), (Permutation (x :: gv3) (a :: l)), (Permutation (x :: gv3) (a :: gv3)), (Permutation (x :: gv3) (merge l l)), (Permutation (x :: gv3) (merge l gv3))
(Permutation (x :: gv3) (merge gv3 l)), (Permutation (x :: gv3) (merge gv3 gv3)), (Permutation (x :: gv3) (l ++ l)), (Permutation (x :: gv3) (l ++ gv3)), (Permutation (x :: gv3) (gv3 ++ l)), (Permutation (x :: gv3) (gv3 ++ gv3)), (Permutation (x :: gv3) []), (Permutation (a :: l) l), (Permutation (a :: l) gv3), (Permutation (a :: l) (x :: l))
(Permutation (a :: l) (x :: gv3)), (Permutation (a :: l) (a :: gv3)), (Permutation (a :: l) (merge l l)), (Permutation (a :: l) (merge l gv3)), (Permutation (a :: l) (merge gv3 l)), (Permutation (a :: l) (merge gv3 gv3)), (Permutation (a :: l) (l ++ l)), (Permutation (a :: l) (l ++ gv3)), (Permutation (a :: l) (gv3 ++ l)), (Permutation (a :: l) (gv3 ++ gv3))
(Permutation (a :: l) []), (Permutation (a :: gv3) l), (Permutation (a :: gv3) gv3), (Permutation (a :: gv3) (x :: l)), (Permutation (a :: gv3) (x :: gv3)), (Permutation (a :: gv3) (a :: l)), (Permutation (a :: gv3) (merge l l)), (Permutation (a :: gv3) (merge l gv3)), (Permutation (a :: gv3) (merge gv3 l)), (Permutation (a :: gv3) (merge gv3 gv3))
(Permutation (a :: gv3) (l ++ l)), (Permutation (a :: gv3) (l ++ gv3)), (Permutation (a :: gv3) (gv3 ++ l)), (Permutation (a :: gv3) (gv3 ++ gv3)), (Permutation (a :: gv3) []), (Permutation (merge l l) l), (Permutation (merge l l) gv3), (Permutation (merge l l) (x :: l)), (Permutation (merge l l) (x :: gv3)), (Permutation (merge l l) (a :: l))
(Permutation (merge l l) (a :: gv3)), (Permutation (merge l l) (merge l gv3)), (Permutation (merge l l) (merge gv3 l)), (Permutation (merge l l) (merge gv3 gv3)), (Permutation (merge l l) (l ++ l)), (Permutation (merge l l) (l ++ gv3)), (Permutation (merge l l) (gv3 ++ l)), (Permutation (merge l l) (gv3 ++ gv3)), (Permutation (merge l l) []), (Permutation (merge l gv3) l)
(Permutation (merge l gv3) gv3), (Permutation (merge l gv3) (x :: l)), (Permutation (merge l gv3) (x :: gv3)), (Permutation (merge l gv3) (a :: l)), (Permutation (merge l gv3) (a :: gv3)), (Permutation (merge l gv3) (merge l l)), (Permutation (merge l gv3) (merge gv3 l)), (Permutation (merge l gv3) (merge gv3 gv3)), (Permutation (merge l gv3) (l ++ l)), (Permutation (merge l gv3) (l ++ gv3))
(Permutation (merge l gv3) (gv3 ++ l)), (Permutation (merge l gv3) (gv3 ++ gv3)), (Permutation (merge l gv3) []), (Permutation (merge gv3 l) l), (Permutation (merge gv3 l) gv3), (Permutation (merge gv3 l) (x :: l)), (Permutation (merge gv3 l) (x :: gv3)), (Permutation (merge gv3 l) (a :: l)), (Permutation (merge gv3 l) (a :: gv3)), (Permutation (merge gv3 l) (merge l l))
(Permutation (merge gv3 l) (merge l gv3)), (Permutation (merge gv3 l) (merge gv3 gv3)), (Permutation (merge gv3 l) (l ++ l)), (Permutation (merge gv3 l) (l ++ gv3)), (Permutation (merge gv3 l) (gv3 ++ l)), (Permutation (merge gv3 l) (gv3 ++ gv3)), (Permutation (merge gv3 l) []), (Permutation (merge gv3 gv3) l), (Permutation (merge gv3 gv3) gv3), (Permutation (merge gv3 gv3) (x :: l))
(Permutation (merge gv3 gv3) (x :: gv3)), (Permutation (merge gv3 gv3) (a :: l)), (Permutation (merge gv3 gv3) (a :: gv3)), (Permutation (merge gv3 gv3) (merge l l)), (Permutation (merge gv3 gv3) (merge l gv3)), (Permutation (merge gv3 gv3) (merge gv3 l)), (Permutation (merge gv3 gv3) (l ++ l)), (Permutation (merge gv3 gv3) (l ++ gv3)), (Permutation (merge gv3 gv3) (gv3 ++ l)), (Permutation (merge gv3 gv3) (gv3 ++ gv3))
(Permutation (merge gv3 gv3) []), (Permutation (l ++ l) l), (Permutation (l ++ l) gv3), (Permutation (l ++ l) (x :: l)), (Permutation (l ++ l) (x :: gv3)), (Permutation (l ++ l) (a :: l)), (Permutation (l ++ l) (a :: gv3)), (Permutation (l ++ l) (merge l l)), (Permutation (l ++ l) (merge l gv3)), (Permutation (l ++ l) (merge gv3 l))
(Permutation (l ++ l) (merge gv3 gv3)), (Permutation (l ++ l) (l ++ gv3)), (Permutation (l ++ l) (gv3 ++ l)), (Permutation (l ++ l) (gv3 ++ gv3)), (Permutation (l ++ l) []), (Permutation (l ++ gv3) l), (Permutation (l ++ gv3) gv3), (Permutation (l ++ gv3) (x :: l)), (Permutation (l ++ gv3) (x :: gv3)), (Permutation (l ++ gv3) (a :: l))
(Permutation (l ++ gv3) (a :: gv3)), (Permutation (l ++ gv3) (merge l l)), (Permutation (l ++ gv3) (merge l gv3)), (Permutation (l ++ gv3) (merge gv3 l)), (Permutation (l ++ gv3) (merge gv3 gv3)), (Permutation (l ++ gv3) (l ++ l)), (Permutation (l ++ gv3) (gv3 ++ l)), (Permutation (l ++ gv3) (gv3 ++ gv3)), (Permutation (l ++ gv3) []), (Permutation (gv3 ++ l) l)
(Permutation (gv3 ++ l) gv3), (Permutation (gv3 ++ l) (x :: l)), (Permutation (gv3 ++ l) (x :: gv3)), (Permutation (gv3 ++ l) (a :: l)), (Permutation (gv3 ++ l) (a :: gv3)), (Permutation (gv3 ++ l) (merge l l)), (Permutation (gv3 ++ l) (merge l gv3)), (Permutation (gv3 ++ l) (merge gv3 l)), (Permutation (gv3 ++ l) (merge gv3 gv3)), (Permutation (gv3 ++ l) (l ++ l))
(Permutation (gv3 ++ l) (l ++ gv3)), (Permutation (gv3 ++ l) (gv3 ++ gv3)), (Permutation (gv3 ++ l) []), (Permutation (gv3 ++ gv3) l), (Permutation (gv3 ++ gv3) gv3), (Permutation (gv3 ++ gv3) (x :: l)), (Permutation (gv3 ++ gv3) (x :: gv3)), (Permutation (gv3 ++ gv3) (a :: l)), (Permutation (gv3 ++ gv3) (a :: gv3)), (Permutation (gv3 ++ gv3) (merge l l))
(Permutation (gv3 ++ gv3) (merge l gv3)), (Permutation (gv3 ++ gv3) (merge gv3 l)), (Permutation (gv3 ++ gv3) (merge gv3 gv3)), (Permutation (gv3 ++ gv3) (l ++ l)), (Permutation (gv3 ++ gv3) (l ++ gv3)), (Permutation (gv3 ++ gv3) (gv3 ++ l)), (Permutation (gv3 ++ gv3) []), (Permutation [] l), (Permutation [] gv3), (Permutation [] (x :: l))
(Permutation [] (x :: gv3)), (Permutation [] (a :: l)), (Permutation [] (a :: gv3)), (Permutation [] (merge l l)), (Permutation [] (merge l gv3)), (Permutation [] (merge gv3 l)), (Permutation [] (merge gv3 gv3)), (Permutation [] (l ++ l)), (Permutation [] (l ++ gv3)), (Permutation [] (gv3 ++ l))
(Permutation [] (gv3 ++ gv3)), (In x (x :: l)), (In x (x :: gv3)), (In x (a :: l)), (In x (a :: gv3)), (In x (merge l l)), (In x (merge l gv3)), (In x (merge gv3 l)), (In x (merge gv3 gv3)), (In x (l ++ l))
(In x (l ++ gv3)), (In x (gv3 ++ l)), (In x (gv3 ++ gv3)), (In a (x :: l)), (In a (x :: gv3)), (In a (a :: l)), (In a (a :: gv3)), (In a (merge l l)), (In a (merge l gv3)), (In a (merge gv3 l))
(In a (merge gv3 gv3)), (In a (l ++ l)), (In a (l ++ gv3)), (In a (gv3 ++ l)), (In a (gv3 ++ gv3)), (In (length l) l), (In (length l) gv3), (In (length l) (x :: l)), (In (length l) (x :: gv3)), (In (length l) (a :: l))
(In (length l) (a :: gv3)), (In (length l) (merge l l)), (In (length l) (merge l gv3)), (In (length l) (merge gv3 l)), (In (length l) (merge gv3 gv3)), (In (length l) (l ++ l)), (In (length l) (l ++ gv3)), (In (length l) (gv3 ++ l)), (In (length l) (gv3 ++ gv3)), (In (length gv3) l)
(In (length gv3) gv3), (In (length gv3) (x :: l)), (In (length gv3) (x :: gv3)), (In (length gv3) (a :: l)), (In (length gv3) (a :: gv3)), (In (length gv3) (merge l l)), (In (length gv3) (merge l gv3)), (In (length gv3) (merge gv3 l)), (In (length gv3) (merge gv3 gv3)), (In (length gv3) (l ++ l))
(In (length gv3) (l ++ gv3)), (In (length gv3) (gv3 ++ l)), (In (length gv3) (gv3 ++ gv3)), (x < length l), (x < length gv3), (a < length l), (a < length gv3), (length l < x), (length l < a), (length l < length gv3)
(length gv3 < x), (length gv3 < a), (length gv3 < length l), (x <= length l), (x <= length gv3), (a <= length l), (a <= length gv3), (length l <= x), (length l <= a), (length l <= length gv3)
(length gv3 <= x), (length gv3 <= a), (length gv3 <= length l), (~ x <=* l), (~ x <=* gv3), (~ a <=* l), (~ a <=* gv3), (~ sorted l), (~ sorted gv3), (~ Permutation l l)
(~ Permutation l gv3), (~ Permutation gv3 l), (~ Permutation gv3 gv3), (~ In x l), (~ In x gv3), (~ In a l), (~ In a gv3), (~ x < x), (~ x < a), (~ a < x)
(~ a < a), (~ x <= x), (~ x <= a), (~ a <= x), (~ a <= a), (l <> l), (l <> gv3), (gv3 <> l), (gv3 <> gv3), (x <> x)
(x <> a), (a <> x), (a <> a), (None = Some l), (None = Some gv3), (x :: l = l), (x :: l = gv3), (x :: l = merge l l), (x :: l = merge l gv3), (x :: l = merge gv3 l)
(x :: l = merge gv3 gv3), (x :: l = l ++ l), (x :: l = l ++ gv3), (x :: l = gv3 ++ l), (x :: l = gv3 ++ gv3), (x :: l = []), (x :: gv3 = l), (x :: gv3 = gv3), (x :: gv3 = merge l l), (x :: gv3 = merge l gv3)
(x :: gv3 = merge gv3 l), (x :: gv3 = merge gv3 gv3), (x :: gv3 = l ++ l), (x :: gv3 = l ++ gv3), (x :: gv3 = gv3 ++ l), (x :: gv3 = gv3 ++ gv3), (x :: gv3 = []), (a :: l = l), (a :: l = gv3), (a :: l = merge l l)
(a :: l = merge l gv3), (a :: l = merge gv3 l), (a :: l = merge gv3 gv3), (a :: l = l ++ l), (a :: l = l ++ gv3), (a :: l = gv3 ++ l), (a :: l = gv3 ++ gv3), (a :: l = []), (a :: gv3 = l), (a :: gv3 = gv3)
(a :: gv3 = merge l l), (a :: gv3 = merge l gv3), (a :: gv3 = merge gv3 l), (a :: gv3 = merge gv3 gv3), (a :: gv3 = l ++ l), (a :: gv3 = l ++ gv3), (a :: gv3 = gv3 ++ l), (a :: gv3 = gv3 ++ gv3), (a :: gv3 = []), (merge l l = l)
(merge l l = gv3), (merge l l = l ++ l), (merge l l = l ++ gv3), (merge l l = gv3 ++ l), (merge l l = gv3 ++ gv3), (merge l gv3 = l), (merge l gv3 = gv3), (merge l gv3 = l ++ l), (merge l gv3 = l ++ gv3), (merge l gv3 = gv3 ++ l)
(merge l gv3 = gv3 ++ gv3), (merge gv3 l = l), (merge gv3 l = gv3), (merge gv3 l = l ++ l), (merge gv3 l = l ++ gv3), (merge gv3 l = gv3 ++ l), (merge gv3 l = gv3 ++ gv3), (merge gv3 gv3 = l), (merge gv3 gv3 = gv3), (merge gv3 gv3 = l ++ l)
(merge gv3 gv3 = l ++ gv3), (merge gv3 gv3 = gv3 ++ l), (merge gv3 gv3 = gv3 ++ gv3), (l ++ l = l), (l ++ l = gv3), (l ++ gv3 = l), (l ++ gv3 = gv3), (gv3 ++ l = l), (gv3 ++ l = gv3), (gv3 ++ gv3 = l)
(gv3 ++ gv3 = gv3), ([] = l), ([] = gv3), ([] = merge l l), ([] = merge l gv3), ([] = merge gv3 l), ([] = merge gv3 gv3), ([] = l ++ l), ([] = l ++ gv3), ([] = gv3 ++ l)
([] = gv3 ++ gv3), (None = Some x), (None = Some a), ((l, l) = split l), ((l, l) = split gv3), ((l, gv3) = split l), ((l, gv3) = split gv3), ((gv3, l) = split l), ((gv3, l) = split gv3), ((gv3, gv3) = split l)
((gv3, gv3) = split gv3), (length l = x), (length l = a), (length gv3 = x), (length gv3 = a)

Label: 2 (5)
(x <=* l), (x <=* gv3), (a <=* l), (a <=* gv3), (sorted l), (sorted gv3), (Permutation l l), (Permutation l gv3), (Permutation gv3 l), (Permutation gv3 gv3)
(In x l), (In x gv3), (In a l), (In a gv3), (x < x), (x < a), (a < x), (a < a), (x <= x), (x <= a)
(a <= x), (a <= a), (l = l), (l = gv3), (gv3 = l), (gv3 = gv3), (x = x), (x = a), (a = x), (a = a)
(false = sorted_bool l), (false = sorted_bool gv3), (true = sorted_bool l), (true = sorted_bool gv3), (x <=* x :: l), (x <=* x :: gv3), (x <=* a :: l), (x <=* a :: gv3), (x <=* merge l l), (x <=* merge l gv3)
(x <=* merge gv3 l), (x <=* merge gv3 gv3), (x <=* l ++ l), (x <=* l ++ gv3), (x <=* gv3 ++ l), (x <=* gv3 ++ gv3), (x <=* []), (a <=* x :: l), (a <=* x :: gv3), (a <=* a :: l)
(a <=* a :: gv3), (a <=* merge l l), (a <=* merge l gv3), (a <=* merge gv3 l), (a <=* merge gv3 gv3), (a <=* l ++ l), (a <=* l ++ gv3), (a <=* gv3 ++ l), (a <=* gv3 ++ gv3), (a <=* [])
(length l <=* l), (length l <=* gv3), (length l <=* x :: l), (length l <=* x :: gv3), (length l <=* a :: l), (length l <=* a :: gv3), (length l <=* merge l l), (length l <=* merge l gv3), (length l <=* merge gv3 l), (length l <=* merge gv3 gv3)
(length l <=* l ++ l), (length l <=* l ++ gv3), (length l <=* gv3 ++ l), (length l <=* gv3 ++ gv3), (length l <=* []), (length gv3 <=* l), (length gv3 <=* gv3), (length gv3 <=* x :: l), (length gv3 <=* x :: gv3), (length gv3 <=* a :: l)
(length gv3 <=* a :: gv3), (length gv3 <=* merge l l), (length gv3 <=* merge l gv3), (length gv3 <=* merge gv3 l), (length gv3 <=* merge gv3 gv3), (length gv3 <=* l ++ l), (length gv3 <=* l ++ gv3), (length gv3 <=* gv3 ++ l), (length gv3 <=* gv3 ++ gv3), (length gv3 <=* [])
(sorted (x :: l)), (sorted (x :: gv3)), (sorted (a :: l)), (sorted (a :: gv3)), (sorted (merge l l)), (sorted (merge l gv3)), (sorted (merge gv3 l)), (sorted (merge gv3 gv3)), (sorted (l ++ l)), (sorted (l ++ gv3))
(sorted (gv3 ++ l)), (sorted (gv3 ++ gv3)), (sorted []), (Permutation l (x :: l)), (Permutation l (x :: gv3)), (Permutation l (a :: l)), (Permutation l (a :: gv3)), (Permutation l (merge l l)), (Permutation l (merge l gv3)), (Permutation l (merge gv3 l))
(Permutation l (merge gv3 gv3)), (Permutation l (l ++ l)), (Permutation l (l ++ gv3)), (Permutation l (gv3 ++ l)), (Permutation l (gv3 ++ gv3)), (Permutation l []), (Permutation gv3 (x :: l)), (Permutation gv3 (x :: gv3)), (Permutation gv3 (a :: l)), (Permutation gv3 (a :: gv3))
(Permutation gv3 (merge l l)), (Permutation gv3 (merge l gv3)), (Permutation gv3 (merge gv3 l)), (Permutation gv3 (merge gv3 gv3)), (Permutation gv3 (l ++ l)), (Permutation gv3 (l ++ gv3)), (Permutation gv3 (gv3 ++ l)), (Permutation gv3 (gv3 ++ gv3)), (Permutation gv3 []), (Permutation (x :: l) l)
(Permutation (x :: l) gv3), (Permutation (x :: l) (x :: gv3)), (Permutation (x :: l) (a :: l)), (Permutation (x :: l) (a :: gv3)), (Permutation (x :: l) (merge l l)), (Permutation (x :: l) (merge l gv3)), (Permutation (x :: l) (merge gv3 l)), (Permutation (x :: l) (merge gv3 gv3)), (Permutation (x :: l) (l ++ l)), (Permutation (x :: l) (l ++ gv3))
(Permutation (x :: l) (gv3 ++ l)), (Permutation (x :: l) (gv3 ++ gv3)), (Permutation (x :: l) []), (Permutation (x :: gv3) l), (Permutation (x :: gv3) gv3), (Permutation (x :: gv3) (x :: l)), (Permutation (x :: gv3) (a :: l)), (Permutation (x :: gv3) (a :: gv3)), (Permutation (x :: gv3) (merge l l)), (Permutation (x :: gv3) (merge l gv3))
(Permutation (x :: gv3) (merge gv3 l)), (Permutation (x :: gv3) (merge gv3 gv3)), (Permutation (x :: gv3) (l ++ l)), (Permutation (x :: gv3) (l ++ gv3)), (Permutation (x :: gv3) (gv3 ++ l)), (Permutation (x :: gv3) (gv3 ++ gv3)), (Permutation (x :: gv3) []), (Permutation (a :: l) l), (Permutation (a :: l) gv3), (Permutation (a :: l) (x :: l))
(Permutation (a :: l) (x :: gv3)), (Permutation (a :: l) (a :: gv3)), (Permutation (a :: l) (merge l l)), (Permutation (a :: l) (merge l gv3)), (Permutation (a :: l) (merge gv3 l)), (Permutation (a :: l) (merge gv3 gv3)), (Permutation (a :: l) (l ++ l)), (Permutation (a :: l) (l ++ gv3)), (Permutation (a :: l) (gv3 ++ l)), (Permutation (a :: l) (gv3 ++ gv3))
(Permutation (a :: l) []), (Permutation (a :: gv3) l), (Permutation (a :: gv3) gv3), (Permutation (a :: gv3) (x :: l)), (Permutation (a :: gv3) (x :: gv3)), (Permutation (a :: gv3) (a :: l)), (Permutation (a :: gv3) (merge l l)), (Permutation (a :: gv3) (merge l gv3)), (Permutation (a :: gv3) (merge gv3 l)), (Permutation (a :: gv3) (merge gv3 gv3))
(Permutation (a :: gv3) (l ++ l)), (Permutation (a :: gv3) (l ++ gv3)), (Permutation (a :: gv3) (gv3 ++ l)), (Permutation (a :: gv3) (gv3 ++ gv3)), (Permutation (a :: gv3) []), (Permutation (merge l l) l), (Permutation (merge l l) gv3), (Permutation (merge l l) (x :: l)), (Permutation (merge l l) (x :: gv3)), (Permutation (merge l l) (a :: l))
(Permutation (merge l l) (a :: gv3)), (Permutation (merge l l) (merge l gv3)), (Permutation (merge l l) (merge gv3 l)), (Permutation (merge l l) (merge gv3 gv3)), (Permutation (merge l l) (l ++ l)), (Permutation (merge l l) (l ++ gv3)), (Permutation (merge l l) (gv3 ++ l)), (Permutation (merge l l) (gv3 ++ gv3)), (Permutation (merge l l) []), (Permutation (merge l gv3) l)
(Permutation (merge l gv3) gv3), (Permutation (merge l gv3) (x :: l)), (Permutation (merge l gv3) (x :: gv3)), (Permutation (merge l gv3) (a :: l)), (Permutation (merge l gv3) (a :: gv3)), (Permutation (merge l gv3) (merge l l)), (Permutation (merge l gv3) (merge gv3 l)), (Permutation (merge l gv3) (merge gv3 gv3)), (Permutation (merge l gv3) (l ++ l)), (Permutation (merge l gv3) (l ++ gv3))
(Permutation (merge l gv3) (gv3 ++ l)), (Permutation (merge l gv3) (gv3 ++ gv3)), (Permutation (merge l gv3) []), (Permutation (merge gv3 l) l), (Permutation (merge gv3 l) gv3), (Permutation (merge gv3 l) (x :: l)), (Permutation (merge gv3 l) (x :: gv3)), (Permutation (merge gv3 l) (a :: l)), (Permutation (merge gv3 l) (a :: gv3)), (Permutation (merge gv3 l) (merge l l))
(Permutation (merge gv3 l) (merge l gv3)), (Permutation (merge gv3 l) (merge gv3 gv3)), (Permutation (merge gv3 l) (l ++ l)), (Permutation (merge gv3 l) (l ++ gv3)), (Permutation (merge gv3 l) (gv3 ++ l)), (Permutation (merge gv3 l) (gv3 ++ gv3)), (Permutation (merge gv3 l) []), (Permutation (merge gv3 gv3) l), (Permutation (merge gv3 gv3) gv3), (Permutation (merge gv3 gv3) (x :: l))
(Permutation (merge gv3 gv3) (x :: gv3)), (Permutation (merge gv3 gv3) (a :: l)), (Permutation (merge gv3 gv3) (a :: gv3)), (Permutation (merge gv3 gv3) (merge l l)), (Permutation (merge gv3 gv3) (merge l gv3)), (Permutation (merge gv3 gv3) (merge gv3 l)), (Permutation (merge gv3 gv3) (l ++ l)), (Permutation (merge gv3 gv3) (l ++ gv3)), (Permutation (merge gv3 gv3) (gv3 ++ l)), (Permutation (merge gv3 gv3) (gv3 ++ gv3))
(Permutation (merge gv3 gv3) []), (Permutation (l ++ l) l), (Permutation (l ++ l) gv3), (Permutation (l ++ l) (x :: l)), (Permutation (l ++ l) (x :: gv3)), (Permutation (l ++ l) (a :: l)), (Permutation (l ++ l) (a :: gv3)), (Permutation (l ++ l) (merge l l)), (Permutation (l ++ l) (merge l gv3)), (Permutation (l ++ l) (merge gv3 l))
(Permutation (l ++ l) (merge gv3 gv3)), (Permutation (l ++ l) (l ++ gv3)), (Permutation (l ++ l) (gv3 ++ l)), (Permutation (l ++ l) (gv3 ++ gv3)), (Permutation (l ++ l) []), (Permutation (l ++ gv3) l), (Permutation (l ++ gv3) gv3), (Permutation (l ++ gv3) (x :: l)), (Permutation (l ++ gv3) (x :: gv3)), (Permutation (l ++ gv3) (a :: l))
(Permutation (l ++ gv3) (a :: gv3)), (Permutation (l ++ gv3) (merge l l)), (Permutation (l ++ gv3) (merge l gv3)), (Permutation (l ++ gv3) (merge gv3 l)), (Permutation (l ++ gv3) (merge gv3 gv3)), (Permutation (l ++ gv3) (l ++ l)), (Permutation (l ++ gv3) (gv3 ++ l)), (Permutation (l ++ gv3) (gv3 ++ gv3)), (Permutation (l ++ gv3) []), (Permutation (gv3 ++ l) l)
(Permutation (gv3 ++ l) gv3), (Permutation (gv3 ++ l) (x :: l)), (Permutation (gv3 ++ l) (x :: gv3)), (Permutation (gv3 ++ l) (a :: l)), (Permutation (gv3 ++ l) (a :: gv3)), (Permutation (gv3 ++ l) (merge l l)), (Permutation (gv3 ++ l) (merge l gv3)), (Permutation (gv3 ++ l) (merge gv3 l)), (Permutation (gv3 ++ l) (merge gv3 gv3)), (Permutation (gv3 ++ l) (l ++ l))
(Permutation (gv3 ++ l) (l ++ gv3)), (Permutation (gv3 ++ l) (gv3 ++ gv3)), (Permutation (gv3 ++ l) []), (Permutation (gv3 ++ gv3) l), (Permutation (gv3 ++ gv3) gv3), (Permutation (gv3 ++ gv3) (x :: l)), (Permutation (gv3 ++ gv3) (x :: gv3)), (Permutation (gv3 ++ gv3) (a :: l)), (Permutation (gv3 ++ gv3) (a :: gv3)), (Permutation (gv3 ++ gv3) (merge l l))
(Permutation (gv3 ++ gv3) (merge l gv3)), (Permutation (gv3 ++ gv3) (merge gv3 l)), (Permutation (gv3 ++ gv3) (merge gv3 gv3)), (Permutation (gv3 ++ gv3) (l ++ l)), (Permutation (gv3 ++ gv3) (l ++ gv3)), (Permutation (gv3 ++ gv3) (gv3 ++ l)), (Permutation (gv3 ++ gv3) []), (Permutation [] l), (Permutation [] gv3), (Permutation [] (x :: l))
(Permutation [] (x :: gv3)), (Permutation [] (a :: l)), (Permutation [] (a :: gv3)), (Permutation [] (merge l l)), (Permutation [] (merge l gv3)), (Permutation [] (merge gv3 l)), (Permutation [] (merge gv3 gv3)), (Permutation [] (l ++ l)), (Permutation [] (l ++ gv3)), (Permutation [] (gv3 ++ l))
(Permutation [] (gv3 ++ gv3)), (In x (x :: l)), (In x (x :: gv3)), (In x (a :: l)), (In x (a :: gv3)), (In x (merge l l)), (In x (merge l gv3)), (In x (merge gv3 l)), (In x (merge gv3 gv3)), (In x (l ++ l))
(In x (l ++ gv3)), (In x (gv3 ++ l)), (In x (gv3 ++ gv3)), (In a (x :: l)), (In a (x :: gv3)), (In a (a :: l)), (In a (a :: gv3)), (In a (merge l l)), (In a (merge l gv3)), (In a (merge gv3 l))
(In a (merge gv3 gv3)), (In a (l ++ l)), (In a (l ++ gv3)), (In a (gv3 ++ l)), (In a (gv3 ++ gv3)), (In (length l) l), (In (length l) gv3), (In (length l) (x :: l)), (In (length l) (x :: gv3)), (In (length l) (a :: l))
(In (length l) (a :: gv3)), (In (length l) (merge l l)), (In (length l) (merge l gv3)), (In (length l) (merge gv3 l)), (In (length l) (merge gv3 gv3)), (In (length l) (l ++ l)), (In (length l) (l ++ gv3)), (In (length l) (gv3 ++ l)), (In (length l) (gv3 ++ gv3)), (In (length gv3) l)
(In (length gv3) gv3), (In (length gv3) (x :: l)), (In (length gv3) (x :: gv3)), (In (length gv3) (a :: l)), (In (length gv3) (a :: gv3)), (In (length gv3) (merge l l)), (In (length gv3) (merge l gv3)), (In (length gv3) (merge gv3 l)), (In (length gv3) (merge gv3 gv3)), (In (length gv3) (l ++ l))
(In (length gv3) (l ++ gv3)), (In (length gv3) (gv3 ++ l)), (In (length gv3) (gv3 ++ gv3)), (x < length l), (x < length gv3), (a < length l), (a < length gv3), (length l < x), (length l < a), (length l < length gv3)
(length gv3 < x), (length gv3 < a), (length gv3 < length l), (x <= length l), (x <= length gv3), (a <= length l), (a <= length gv3), (length l <= x), (length l <= a), (length l <= length gv3)
(length gv3 <= x), (length gv3 <= a), (length gv3 <= length l), (~ x <=* l), (~ x <=* gv3), (~ a <=* l), (~ a <=* gv3), (~ sorted l), (~ sorted gv3), (~ Permutation l l)
(~ Permutation l gv3), (~ Permutation gv3 l), (~ Permutation gv3 gv3), (~ In x l), (~ In x gv3), (~ In a l), (~ In a gv3), (~ x < x), (~ x < a), (~ a < x)
(~ a < a), (~ x <= x), (~ x <= a), (~ a <= x), (~ a <= a), (l <> l), (l <> gv3), (gv3 <> l), (gv3 <> gv3), (x <> x)
(x <> a), (a <> x), (a <> a), (None = Some l), (None = Some gv3), (x :: l = l), (x :: l = gv3), (x :: l = merge l l), (x :: l = merge l gv3), (x :: l = merge gv3 l)
(x :: l = merge gv3 gv3), (x :: l = l ++ l), (x :: l = l ++ gv3), (x :: l = gv3 ++ l), (x :: l = gv3 ++ gv3), (x :: l = []), (x :: gv3 = l), (x :: gv3 = gv3), (x :: gv3 = merge l l), (x :: gv3 = merge l gv3)
(x :: gv3 = merge gv3 l), (x :: gv3 = merge gv3 gv3), (x :: gv3 = l ++ l), (x :: gv3 = l ++ gv3), (x :: gv3 = gv3 ++ l), (x :: gv3 = gv3 ++ gv3), (x :: gv3 = []), (a :: l = l), (a :: l = gv3), (a :: l = merge l l)
(a :: l = merge l gv3), (a :: l = merge gv3 l), (a :: l = merge gv3 gv3), (a :: l = l ++ l), (a :: l = l ++ gv3), (a :: l = gv3 ++ l), (a :: l = gv3 ++ gv3), (a :: l = []), (a :: gv3 = l), (a :: gv3 = gv3)
(a :: gv3 = merge l l), (a :: gv3 = merge l gv3), (a :: gv3 = merge gv3 l), (a :: gv3 = merge gv3 gv3), (a :: gv3 = l ++ l), (a :: gv3 = l ++ gv3), (a :: gv3 = gv3 ++ l), (a :: gv3 = gv3 ++ gv3), (a :: gv3 = []), (merge l l = l)
(merge l l = gv3), (merge l l = l ++ l), (merge l l = l ++ gv3), (merge l l = gv3 ++ l), (merge l l = gv3 ++ gv3), (merge l gv3 = l), (merge l gv3 = gv3), (merge l gv3 = l ++ l), (merge l gv3 = l ++ gv3), (merge l gv3 = gv3 ++ l)
(merge l gv3 = gv3 ++ gv3), (merge gv3 l = l), (merge gv3 l = gv3), (merge gv3 l = l ++ l), (merge gv3 l = l ++ gv3), (merge gv3 l = gv3 ++ l), (merge gv3 l = gv3 ++ gv3), (merge gv3 gv3 = l), (merge gv3 gv3 = gv3), (merge gv3 gv3 = l ++ l)
(merge gv3 gv3 = l ++ gv3), (merge gv3 gv3 = gv3 ++ l), (merge gv3 gv3 = gv3 ++ gv3), (l ++ l = l), (l ++ l = gv3), (l ++ gv3 = l), (l ++ gv3 = gv3), (gv3 ++ l = l), (gv3 ++ l = gv3), (gv3 ++ gv3 = l)
(gv3 ++ gv3 = gv3), ([] = l), ([] = gv3), ([] = merge l l), ([] = merge l gv3), ([] = merge gv3 l), ([] = merge gv3 gv3), ([] = l ++ l), ([] = l ++ gv3), ([] = gv3 ++ l)
([] = gv3 ++ gv3), (None = Some x), (None = Some a), ((l, l) = split l), ((l, l) = split gv3), ((l, gv3) = split l), ((l, gv3) = split gv3), ((gv3, l) = split l), ((gv3, l) = split gv3), ((gv3, gv3) = split l)
((gv3, gv3) = split gv3), (length l = x), (length l = a), (length gv3 = x), (length gv3 = a)

Label: 2 (6)
(x <=* l), (x <=* gv3), (a <=* l), (a <=* gv3), (sorted l), (sorted gv3), (Permutation l l), (Permutation l gv3), (Permutation gv3 l), (Permutation gv3 gv3)
(In x l), (In x gv3), (In a l), (In a gv3), (x < x), (x < a), (a < x), (a < a), (x <= x), (x <= a)
(a <= x), (a <= a), (l = l), (l = gv3), (gv3 = l), (gv3 = gv3), (x = x), (x = a), (a = x), (a = a)
(false = sorted_bool l), (false = sorted_bool gv3), (true = sorted_bool l), (true = sorted_bool gv3), (x <=* x :: l), (x <=* x :: gv3), (x <=* a :: l), (x <=* a :: gv3), (x <=* merge l l), (x <=* merge l gv3)
(x <=* merge gv3 l), (x <=* merge gv3 gv3), (x <=* l ++ l), (x <=* l ++ gv3), (x <=* gv3 ++ l), (x <=* gv3 ++ gv3), (x <=* []), (a <=* x :: l), (a <=* x :: gv3), (a <=* a :: l)
(a <=* a :: gv3), (a <=* merge l l), (a <=* merge l gv3), (a <=* merge gv3 l), (a <=* merge gv3 gv3), (a <=* l ++ l), (a <=* l ++ gv3), (a <=* gv3 ++ l), (a <=* gv3 ++ gv3), (a <=* [])
(length l <=* l), (length l <=* gv3), (length l <=* x :: l), (length l <=* x :: gv3), (length l <=* a :: l), (length l <=* a :: gv3), (length l <=* merge l l), (length l <=* merge l gv3), (length l <=* merge gv3 l), (length l <=* merge gv3 gv3)
(length l <=* l ++ l), (length l <=* l ++ gv3), (length l <=* gv3 ++ l), (length l <=* gv3 ++ gv3), (length l <=* []), (length gv3 <=* l), (length gv3 <=* gv3), (length gv3 <=* x :: l), (length gv3 <=* x :: gv3), (length gv3 <=* a :: l)
(length gv3 <=* a :: gv3), (length gv3 <=* merge l l), (length gv3 <=* merge l gv3), (length gv3 <=* merge gv3 l), (length gv3 <=* merge gv3 gv3), (length gv3 <=* l ++ l), (length gv3 <=* l ++ gv3), (length gv3 <=* gv3 ++ l), (length gv3 <=* gv3 ++ gv3), (length gv3 <=* [])
(sorted (x :: l)), (sorted (x :: gv3)), (sorted (a :: l)), (sorted (a :: gv3)), (sorted (merge l l)), (sorted (merge l gv3)), (sorted (merge gv3 l)), (sorted (merge gv3 gv3)), (sorted (l ++ l)), (sorted (l ++ gv3))
(sorted (gv3 ++ l)), (sorted (gv3 ++ gv3)), (sorted []), (Permutation l (x :: l)), (Permutation l (x :: gv3)), (Permutation l (a :: l)), (Permutation l (a :: gv3)), (Permutation l (merge l l)), (Permutation l (merge l gv3)), (Permutation l (merge gv3 l))
(Permutation l (merge gv3 gv3)), (Permutation l (l ++ l)), (Permutation l (l ++ gv3)), (Permutation l (gv3 ++ l)), (Permutation l (gv3 ++ gv3)), (Permutation l []), (Permutation gv3 (x :: l)), (Permutation gv3 (x :: gv3)), (Permutation gv3 (a :: l)), (Permutation gv3 (a :: gv3))
(Permutation gv3 (merge l l)), (Permutation gv3 (merge l gv3)), (Permutation gv3 (merge gv3 l)), (Permutation gv3 (merge gv3 gv3)), (Permutation gv3 (l ++ l)), (Permutation gv3 (l ++ gv3)), (Permutation gv3 (gv3 ++ l)), (Permutation gv3 (gv3 ++ gv3)), (Permutation gv3 []), (Permutation (x :: l) l)
(Permutation (x :: l) gv3), (Permutation (x :: l) (x :: gv3)), (Permutation (x :: l) (a :: l)), (Permutation (x :: l) (a :: gv3)), (Permutation (x :: l) (merge l l)), (Permutation (x :: l) (merge l gv3)), (Permutation (x :: l) (merge gv3 l)), (Permutation (x :: l) (merge gv3 gv3)), (Permutation (x :: l) (l ++ l)), (Permutation (x :: l) (l ++ gv3))
(Permutation (x :: l) (gv3 ++ l)), (Permutation (x :: l) (gv3 ++ gv3)), (Permutation (x :: l) []), (Permutation (x :: gv3) l), (Permutation (x :: gv3) gv3), (Permutation (x :: gv3) (x :: l)), (Permutation (x :: gv3) (a :: l)), (Permutation (x :: gv3) (a :: gv3)), (Permutation (x :: gv3) (merge l l)), (Permutation (x :: gv3) (merge l gv3))
(Permutation (x :: gv3) (merge gv3 l)), (Permutation (x :: gv3) (merge gv3 gv3)), (Permutation (x :: gv3) (l ++ l)), (Permutation (x :: gv3) (l ++ gv3)), (Permutation (x :: gv3) (gv3 ++ l)), (Permutation (x :: gv3) (gv3 ++ gv3)), (Permutation (x :: gv3) []), (Permutation (a :: l) l), (Permutation (a :: l) gv3), (Permutation (a :: l) (x :: l))
(Permutation (a :: l) (x :: gv3)), (Permutation (a :: l) (a :: gv3)), (Permutation (a :: l) (merge l l)), (Permutation (a :: l) (merge l gv3)), (Permutation (a :: l) (merge gv3 l)), (Permutation (a :: l) (merge gv3 gv3)), (Permutation (a :: l) (l ++ l)), (Permutation (a :: l) (l ++ gv3)), (Permutation (a :: l) (gv3 ++ l)), (Permutation (a :: l) (gv3 ++ gv3))
(Permutation (a :: l) []), (Permutation (a :: gv3) l), (Permutation (a :: gv3) gv3), (Permutation (a :: gv3) (x :: l)), (Permutation (a :: gv3) (x :: gv3)), (Permutation (a :: gv3) (a :: l)), (Permutation (a :: gv3) (merge l l)), (Permutation (a :: gv3) (merge l gv3)), (Permutation (a :: gv3) (merge gv3 l)), (Permutation (a :: gv3) (merge gv3 gv3))
(Permutation (a :: gv3) (l ++ l)), (Permutation (a :: gv3) (l ++ gv3)), (Permutation (a :: gv3) (gv3 ++ l)), (Permutation (a :: gv3) (gv3 ++ gv3)), (Permutation (a :: gv3) []), (Permutation (merge l l) l), (Permutation (merge l l) gv3), (Permutation (merge l l) (x :: l)), (Permutation (merge l l) (x :: gv3)), (Permutation (merge l l) (a :: l))
(Permutation (merge l l) (a :: gv3)), (Permutation (merge l l) (merge l gv3)), (Permutation (merge l l) (merge gv3 l)), (Permutation (merge l l) (merge gv3 gv3)), (Permutation (merge l l) (l ++ l)), (Permutation (merge l l) (l ++ gv3)), (Permutation (merge l l) (gv3 ++ l)), (Permutation (merge l l) (gv3 ++ gv3)), (Permutation (merge l l) []), (Permutation (merge l gv3) l)
(Permutation (merge l gv3) gv3), (Permutation (merge l gv3) (x :: l)), (Permutation (merge l gv3) (x :: gv3)), (Permutation (merge l gv3) (a :: l)), (Permutation (merge l gv3) (a :: gv3)), (Permutation (merge l gv3) (merge l l)), (Permutation (merge l gv3) (merge gv3 l)), (Permutation (merge l gv3) (merge gv3 gv3)), (Permutation (merge l gv3) (l ++ l)), (Permutation (merge l gv3) (l ++ gv3))
(Permutation (merge l gv3) (gv3 ++ l)), (Permutation (merge l gv3) (gv3 ++ gv3)), (Permutation (merge l gv3) []), (Permutation (merge gv3 l) l), (Permutation (merge gv3 l) gv3), (Permutation (merge gv3 l) (x :: l)), (Permutation (merge gv3 l) (x :: gv3)), (Permutation (merge gv3 l) (a :: l)), (Permutation (merge gv3 l) (a :: gv3)), (Permutation (merge gv3 l) (merge l l))
(Permutation (merge gv3 l) (merge l gv3)), (Permutation (merge gv3 l) (merge gv3 gv3)), (Permutation (merge gv3 l) (l ++ l)), (Permutation (merge gv3 l) (l ++ gv3)), (Permutation (merge gv3 l) (gv3 ++ l)), (Permutation (merge gv3 l) (gv3 ++ gv3)), (Permutation (merge gv3 l) []), (Permutation (merge gv3 gv3) l), (Permutation (merge gv3 gv3) gv3), (Permutation (merge gv3 gv3) (x :: l))
(Permutation (merge gv3 gv3) (x :: gv3)), (Permutation (merge gv3 gv3) (a :: l)), (Permutation (merge gv3 gv3) (a :: gv3)), (Permutation (merge gv3 gv3) (merge l l)), (Permutation (merge gv3 gv3) (merge l gv3)), (Permutation (merge gv3 gv3) (merge gv3 l)), (Permutation (merge gv3 gv3) (l ++ l)), (Permutation (merge gv3 gv3) (l ++ gv3)), (Permutation (merge gv3 gv3) (gv3 ++ l)), (Permutation (merge gv3 gv3) (gv3 ++ gv3))
(Permutation (merge gv3 gv3) []), (Permutation (l ++ l) l), (Permutation (l ++ l) gv3), (Permutation (l ++ l) (x :: l)), (Permutation (l ++ l) (x :: gv3)), (Permutation (l ++ l) (a :: l)), (Permutation (l ++ l) (a :: gv3)), (Permutation (l ++ l) (merge l l)), (Permutation (l ++ l) (merge l gv3)), (Permutation (l ++ l) (merge gv3 l))
(Permutation (l ++ l) (merge gv3 gv3)), (Permutation (l ++ l) (l ++ gv3)), (Permutation (l ++ l) (gv3 ++ l)), (Permutation (l ++ l) (gv3 ++ gv3)), (Permutation (l ++ l) []), (Permutation (l ++ gv3) l), (Permutation (l ++ gv3) gv3), (Permutation (l ++ gv3) (x :: l)), (Permutation (l ++ gv3) (x :: gv3)), (Permutation (l ++ gv3) (a :: l))
(Permutation (l ++ gv3) (a :: gv3)), (Permutation (l ++ gv3) (merge l l)), (Permutation (l ++ gv3) (merge l gv3)), (Permutation (l ++ gv3) (merge gv3 l)), (Permutation (l ++ gv3) (merge gv3 gv3)), (Permutation (l ++ gv3) (l ++ l)), (Permutation (l ++ gv3) (gv3 ++ l)), (Permutation (l ++ gv3) (gv3 ++ gv3)), (Permutation (l ++ gv3) []), (Permutation (gv3 ++ l) l)
(Permutation (gv3 ++ l) gv3), (Permutation (gv3 ++ l) (x :: l)), (Permutation (gv3 ++ l) (x :: gv3)), (Permutation (gv3 ++ l) (a :: l)), (Permutation (gv3 ++ l) (a :: gv3)), (Permutation (gv3 ++ l) (merge l l)), (Permutation (gv3 ++ l) (merge l gv3)), (Permutation (gv3 ++ l) (merge gv3 l)), (Permutation (gv3 ++ l) (merge gv3 gv3)), (Permutation (gv3 ++ l) (l ++ l))
(Permutation (gv3 ++ l) (l ++ gv3)), (Permutation (gv3 ++ l) (gv3 ++ gv3)), (Permutation (gv3 ++ l) []), (Permutation (gv3 ++ gv3) l), (Permutation (gv3 ++ gv3) gv3), (Permutation (gv3 ++ gv3) (x :: l)), (Permutation (gv3 ++ gv3) (x :: gv3)), (Permutation (gv3 ++ gv3) (a :: l)), (Permutation (gv3 ++ gv3) (a :: gv3)), (Permutation (gv3 ++ gv3) (merge l l))
(Permutation (gv3 ++ gv3) (merge l gv3)), (Permutation (gv3 ++ gv3) (merge gv3 l)), (Permutation (gv3 ++ gv3) (merge gv3 gv3)), (Permutation (gv3 ++ gv3) (l ++ l)), (Permutation (gv3 ++ gv3) (l ++ gv3)), (Permutation (gv3 ++ gv3) (gv3 ++ l)), (Permutation (gv3 ++ gv3) []), (Permutation [] l), (Permutation [] gv3), (Permutation [] (x :: l))
(Permutation [] (x :: gv3)), (Permutation [] (a :: l)), (Permutation [] (a :: gv3)), (Permutation [] (merge l l)), (Permutation [] (merge l gv3)), (Permutation [] (merge gv3 l)), (Permutation [] (merge gv3 gv3)), (Permutation [] (l ++ l)), (Permutation [] (l ++ gv3)), (Permutation [] (gv3 ++ l))
(Permutation [] (gv3 ++ gv3)), (In x (x :: l)), (In x (x :: gv3)), (In x (a :: l)), (In x (a :: gv3)), (In x (merge l l)), (In x (merge l gv3)), (In x (merge gv3 l)), (In x (merge gv3 gv3)), (In x (l ++ l))
(In x (l ++ gv3)), (In x (gv3 ++ l)), (In x (gv3 ++ gv3)), (In a (x :: l)), (In a (x :: gv3)), (In a (a :: l)), (In a (a :: gv3)), (In a (merge l l)), (In a (merge l gv3)), (In a (merge gv3 l))
(In a (merge gv3 gv3)), (In a (l ++ l)), (In a (l ++ gv3)), (In a (gv3 ++ l)), (In a (gv3 ++ gv3)), (In (length l) l), (In (length l) gv3), (In (length l) (x :: l)), (In (length l) (x :: gv3)), (In (length l) (a :: l))
(In (length l) (a :: gv3)), (In (length l) (merge l l)), (In (length l) (merge l gv3)), (In (length l) (merge gv3 l)), (In (length l) (merge gv3 gv3)), (In (length l) (l ++ l)), (In (length l) (l ++ gv3)), (In (length l) (gv3 ++ l)), (In (length l) (gv3 ++ gv3)), (In (length gv3) l)
(In (length gv3) gv3), (In (length gv3) (x :: l)), (In (length gv3) (x :: gv3)), (In (length gv3) (a :: l)), (In (length gv3) (a :: gv3)), (In (length gv3) (merge l l)), (In (length gv3) (merge l gv3)), (In (length gv3) (merge gv3 l)), (In (length gv3) (merge gv3 gv3)), (In (length gv3) (l ++ l))
(In (length gv3) (l ++ gv3)), (In (length gv3) (gv3 ++ l)), (In (length gv3) (gv3 ++ gv3)), (x < length l), (x < length gv3), (a < length l), (a < length gv3), (length l < x), (length l < a), (length l < length gv3)
(length gv3 < x), (length gv3 < a), (length gv3 < length l), (x <= length l), (x <= length gv3), (a <= length l), (a <= length gv3), (length l <= x), (length l <= a), (length l <= length gv3)
(length gv3 <= x), (length gv3 <= a), (length gv3 <= length l), (~ x <=* l), (~ x <=* gv3), (~ a <=* l), (~ a <=* gv3), (~ sorted l), (~ sorted gv3), (~ Permutation l l)
(~ Permutation l gv3), (~ Permutation gv3 l), (~ Permutation gv3 gv3), (~ In x l), (~ In x gv3), (~ In a l), (~ In a gv3), (~ x < x), (~ x < a), (~ a < x)
(~ a < a), (~ x <= x), (~ x <= a), (~ a <= x), (~ a <= a), (l <> l), (l <> gv3), (gv3 <> l), (gv3 <> gv3), (x <> x)
(x <> a), (a <> x), (a <> a), (None = Some l), (None = Some gv3), (x :: l = l), (x :: l = gv3), (x :: l = merge l l), (x :: l = merge l gv3), (x :: l = merge gv3 l)
(x :: l = merge gv3 gv3), (x :: l = l ++ l), (x :: l = l ++ gv3), (x :: l = gv3 ++ l), (x :: l = gv3 ++ gv3), (x :: l = []), (x :: gv3 = l), (x :: gv3 = gv3), (x :: gv3 = merge l l), (x :: gv3 = merge l gv3)
(x :: gv3 = merge gv3 l), (x :: gv3 = merge gv3 gv3), (x :: gv3 = l ++ l), (x :: gv3 = l ++ gv3), (x :: gv3 = gv3 ++ l), (x :: gv3 = gv3 ++ gv3), (x :: gv3 = []), (a :: l = l), (a :: l = gv3), (a :: l = merge l l)
(a :: l = merge l gv3), (a :: l = merge gv3 l), (a :: l = merge gv3 gv3), (a :: l = l ++ l), (a :: l = l ++ gv3), (a :: l = gv3 ++ l), (a :: l = gv3 ++ gv3), (a :: l = []), (a :: gv3 = l), (a :: gv3 = gv3)
(a :: gv3 = merge l l), (a :: gv3 = merge l gv3), (a :: gv3 = merge gv3 l), (a :: gv3 = merge gv3 gv3), (a :: gv3 = l ++ l), (a :: gv3 = l ++ gv3), (a :: gv3 = gv3 ++ l), (a :: gv3 = gv3 ++ gv3), (a :: gv3 = []), (merge l l = l)
(merge l l = gv3), (merge l l = l ++ l), (merge l l = l ++ gv3), (merge l l = gv3 ++ l), (merge l l = gv3 ++ gv3), (merge l gv3 = l), (merge l gv3 = gv3), (merge l gv3 = l ++ l), (merge l gv3 = l ++ gv3), (merge l gv3 = gv3 ++ l)
(merge l gv3 = gv3 ++ gv3), (merge gv3 l = l), (merge gv3 l = gv3), (merge gv3 l = l ++ l), (merge gv3 l = l ++ gv3), (merge gv3 l = gv3 ++ l), (merge gv3 l = gv3 ++ gv3), (merge gv3 gv3 = l), (merge gv3 gv3 = gv3), (merge gv3 gv3 = l ++ l)
(merge gv3 gv3 = l ++ gv3), (merge gv3 gv3 = gv3 ++ l), (merge gv3 gv3 = gv3 ++ gv3), (l ++ l = l), (l ++ l = gv3), (l ++ gv3 = l), (l ++ gv3 = gv3), (gv3 ++ l = l), (gv3 ++ l = gv3), (gv3 ++ gv3 = l)
(gv3 ++ gv3 = gv3), ([] = l), ([] = gv3), ([] = merge l l), ([] = merge l gv3), ([] = merge gv3 l), ([] = merge gv3 gv3), ([] = l ++ l), ([] = l ++ gv3), ([] = gv3 ++ l)
([] = gv3 ++ gv3), (None = Some x), (None = Some a), ((l, l) = split l), ((l, l) = split gv3), ((l, gv3) = split l), ((l, gv3) = split gv3), ((gv3, l) = split l), ((gv3, l) = split gv3), ((gv3, gv3) = split l)
((gv3, gv3) = split gv3), (length l = x), (length l = a), (length gv3 = x), (length gv3 = a)

Label: 3 (7)
(x <=* l), (x <=* gv1), (a <=* l), (a <=* gv1), (sorted l), (sorted gv1), (Permutation l l), (Permutation l gv1), (Permutation gv1 l), (Permutation gv1 gv1)
(In x l), (In x gv1), (In a l), (In a gv1), (x < x), (x < a), (a < x), (a < a), (x <= x), (x <= a)
(a <= x), (a <= a), (l = l), (l = gv1), (gv1 = l), (gv1 = gv1), (x = x), (x = a), (a = x), (a = a)
(false = sorted_bool l), (false = sorted_bool gv1), (true = sorted_bool l), (true = sorted_bool gv1), (x <=* x :: l), (x <=* x :: gv1), (x <=* a :: l), (x <=* a :: gv1), (x <=* merge l l), (x <=* merge l gv1)
(x <=* merge gv1 l), (x <=* merge gv1 gv1), (x <=* l ++ l), (x <=* l ++ gv1), (x <=* gv1 ++ l), (x <=* gv1 ++ gv1), (x <=* []), (a <=* x :: l), (a <=* x :: gv1), (a <=* a :: l)
(a <=* a :: gv1), (a <=* merge l l), (a <=* merge l gv1), (a <=* merge gv1 l), (a <=* merge gv1 gv1), (a <=* l ++ l), (a <=* l ++ gv1), (a <=* gv1 ++ l), (a <=* gv1 ++ gv1), (a <=* [])
(length l <=* l), (length l <=* gv1), (length l <=* x :: l), (length l <=* x :: gv1), (length l <=* a :: l), (length l <=* a :: gv1), (length l <=* merge l l), (length l <=* merge l gv1), (length l <=* merge gv1 l), (length l <=* merge gv1 gv1)
(length l <=* l ++ l), (length l <=* l ++ gv1), (length l <=* gv1 ++ l), (length l <=* gv1 ++ gv1), (length l <=* []), (length gv1 <=* l), (length gv1 <=* gv1), (length gv1 <=* x :: l), (length gv1 <=* x :: gv1), (length gv1 <=* a :: l)
(length gv1 <=* a :: gv1), (length gv1 <=* merge l l), (length gv1 <=* merge l gv1), (length gv1 <=* merge gv1 l), (length gv1 <=* merge gv1 gv1), (length gv1 <=* l ++ l), (length gv1 <=* l ++ gv1), (length gv1 <=* gv1 ++ l), (length gv1 <=* gv1 ++ gv1), (length gv1 <=* [])
(sorted (x :: l)), (sorted (x :: gv1)), (sorted (a :: l)), (sorted (a :: gv1)), (sorted (merge l l)), (sorted (merge l gv1)), (sorted (merge gv1 l)), (sorted (merge gv1 gv1)), (sorted (l ++ l)), (sorted (l ++ gv1))
(sorted (gv1 ++ l)), (sorted (gv1 ++ gv1)), (sorted []), (Permutation l (x :: l)), (Permutation l (x :: gv1)), (Permutation l (a :: l)), (Permutation l (a :: gv1)), (Permutation l (merge l l)), (Permutation l (merge l gv1)), (Permutation l (merge gv1 l))
(Permutation l (merge gv1 gv1)), (Permutation l (l ++ l)), (Permutation l (l ++ gv1)), (Permutation l (gv1 ++ l)), (Permutation l (gv1 ++ gv1)), (Permutation l []), (Permutation gv1 (x :: l)), (Permutation gv1 (x :: gv1)), (Permutation gv1 (a :: l)), (Permutation gv1 (a :: gv1))
(Permutation gv1 (merge l l)), (Permutation gv1 (merge l gv1)), (Permutation gv1 (merge gv1 l)), (Permutation gv1 (merge gv1 gv1)), (Permutation gv1 (l ++ l)), (Permutation gv1 (l ++ gv1)), (Permutation gv1 (gv1 ++ l)), (Permutation gv1 (gv1 ++ gv1)), (Permutation gv1 []), (Permutation (x :: l) l)
(Permutation (x :: l) gv1), (Permutation (x :: l) (x :: gv1)), (Permutation (x :: l) (a :: l)), (Permutation (x :: l) (a :: gv1)), (Permutation (x :: l) (merge l l)), (Permutation (x :: l) (merge l gv1)), (Permutation (x :: l) (merge gv1 l)), (Permutation (x :: l) (merge gv1 gv1)), (Permutation (x :: l) (l ++ l)), (Permutation (x :: l) (l ++ gv1))
(Permutation (x :: l) (gv1 ++ l)), (Permutation (x :: l) (gv1 ++ gv1)), (Permutation (x :: l) []), (Permutation (x :: gv1) l), (Permutation (x :: gv1) gv1), (Permutation (x :: gv1) (x :: l)), (Permutation (x :: gv1) (a :: l)), (Permutation (x :: gv1) (a :: gv1)), (Permutation (x :: gv1) (merge l l)), (Permutation (x :: gv1) (merge l gv1))
(Permutation (x :: gv1) (merge gv1 l)), (Permutation (x :: gv1) (merge gv1 gv1)), (Permutation (x :: gv1) (l ++ l)), (Permutation (x :: gv1) (l ++ gv1)), (Permutation (x :: gv1) (gv1 ++ l)), (Permutation (x :: gv1) (gv1 ++ gv1)), (Permutation (x :: gv1) []), (Permutation (a :: l) l), (Permutation (a :: l) gv1), (Permutation (a :: l) (x :: l))
(Permutation (a :: l) (x :: gv1)), (Permutation (a :: l) (a :: gv1)), (Permutation (a :: l) (merge l l)), (Permutation (a :: l) (merge l gv1)), (Permutation (a :: l) (merge gv1 l)), (Permutation (a :: l) (merge gv1 gv1)), (Permutation (a :: l) (l ++ l)), (Permutation (a :: l) (l ++ gv1)), (Permutation (a :: l) (gv1 ++ l)), (Permutation (a :: l) (gv1 ++ gv1))
(Permutation (a :: l) []), (Permutation (a :: gv1) l), (Permutation (a :: gv1) gv1), (Permutation (a :: gv1) (x :: l)), (Permutation (a :: gv1) (x :: gv1)), (Permutation (a :: gv1) (a :: l)), (Permutation (a :: gv1) (merge l l)), (Permutation (a :: gv1) (merge l gv1)), (Permutation (a :: gv1) (merge gv1 l)), (Permutation (a :: gv1) (merge gv1 gv1))
(Permutation (a :: gv1) (l ++ l)), (Permutation (a :: gv1) (l ++ gv1)), (Permutation (a :: gv1) (gv1 ++ l)), (Permutation (a :: gv1) (gv1 ++ gv1)), (Permutation (a :: gv1) []), (Permutation (merge l l) l), (Permutation (merge l l) gv1), (Permutation (merge l l) (x :: l)), (Permutation (merge l l) (x :: gv1)), (Permutation (merge l l) (a :: l))
(Permutation (merge l l) (a :: gv1)), (Permutation (merge l l) (merge l gv1)), (Permutation (merge l l) (merge gv1 l)), (Permutation (merge l l) (merge gv1 gv1)), (Permutation (merge l l) (l ++ l)), (Permutation (merge l l) (l ++ gv1)), (Permutation (merge l l) (gv1 ++ l)), (Permutation (merge l l) (gv1 ++ gv1)), (Permutation (merge l l) []), (Permutation (merge l gv1) l)
(Permutation (merge l gv1) gv1), (Permutation (merge l gv1) (x :: l)), (Permutation (merge l gv1) (x :: gv1)), (Permutation (merge l gv1) (a :: l)), (Permutation (merge l gv1) (a :: gv1)), (Permutation (merge l gv1) (merge l l)), (Permutation (merge l gv1) (merge gv1 l)), (Permutation (merge l gv1) (merge gv1 gv1)), (Permutation (merge l gv1) (l ++ l)), (Permutation (merge l gv1) (l ++ gv1))
(Permutation (merge l gv1) (gv1 ++ l)), (Permutation (merge l gv1) (gv1 ++ gv1)), (Permutation (merge l gv1) []), (Permutation (merge gv1 l) l), (Permutation (merge gv1 l) gv1), (Permutation (merge gv1 l) (x :: l)), (Permutation (merge gv1 l) (x :: gv1)), (Permutation (merge gv1 l) (a :: l)), (Permutation (merge gv1 l) (a :: gv1)), (Permutation (merge gv1 l) (merge l l))
(Permutation (merge gv1 l) (merge l gv1)), (Permutation (merge gv1 l) (merge gv1 gv1)), (Permutation (merge gv1 l) (l ++ l)), (Permutation (merge gv1 l) (l ++ gv1)), (Permutation (merge gv1 l) (gv1 ++ l)), (Permutation (merge gv1 l) (gv1 ++ gv1)), (Permutation (merge gv1 l) []), (Permutation (merge gv1 gv1) l), (Permutation (merge gv1 gv1) gv1), (Permutation (merge gv1 gv1) (x :: l))
(Permutation (merge gv1 gv1) (x :: gv1)), (Permutation (merge gv1 gv1) (a :: l)), (Permutation (merge gv1 gv1) (a :: gv1)), (Permutation (merge gv1 gv1) (merge l l)), (Permutation (merge gv1 gv1) (merge l gv1)), (Permutation (merge gv1 gv1) (merge gv1 l)), (Permutation (merge gv1 gv1) (l ++ l)), (Permutation (merge gv1 gv1) (l ++ gv1)), (Permutation (merge gv1 gv1) (gv1 ++ l)), (Permutation (merge gv1 gv1) (gv1 ++ gv1))
(Permutation (merge gv1 gv1) []), (Permutation (l ++ l) l), (Permutation (l ++ l) gv1), (Permutation (l ++ l) (x :: l)), (Permutation (l ++ l) (x :: gv1)), (Permutation (l ++ l) (a :: l)), (Permutation (l ++ l) (a :: gv1)), (Permutation (l ++ l) (merge l l)), (Permutation (l ++ l) (merge l gv1)), (Permutation (l ++ l) (merge gv1 l))
(Permutation (l ++ l) (merge gv1 gv1)), (Permutation (l ++ l) (l ++ gv1)), (Permutation (l ++ l) (gv1 ++ l)), (Permutation (l ++ l) (gv1 ++ gv1)), (Permutation (l ++ l) []), (Permutation (l ++ gv1) l), (Permutation (l ++ gv1) gv1), (Permutation (l ++ gv1) (x :: l)), (Permutation (l ++ gv1) (x :: gv1)), (Permutation (l ++ gv1) (a :: l))
(Permutation (l ++ gv1) (a :: gv1)), (Permutation (l ++ gv1) (merge l l)), (Permutation (l ++ gv1) (merge l gv1)), (Permutation (l ++ gv1) (merge gv1 l)), (Permutation (l ++ gv1) (merge gv1 gv1)), (Permutation (l ++ gv1) (l ++ l)), (Permutation (l ++ gv1) (gv1 ++ l)), (Permutation (l ++ gv1) (gv1 ++ gv1)), (Permutation (l ++ gv1) []), (Permutation (gv1 ++ l) l)
(Permutation (gv1 ++ l) gv1), (Permutation (gv1 ++ l) (x :: l)), (Permutation (gv1 ++ l) (x :: gv1)), (Permutation (gv1 ++ l) (a :: l)), (Permutation (gv1 ++ l) (a :: gv1)), (Permutation (gv1 ++ l) (merge l l)), (Permutation (gv1 ++ l) (merge l gv1)), (Permutation (gv1 ++ l) (merge gv1 l)), (Permutation (gv1 ++ l) (merge gv1 gv1)), (Permutation (gv1 ++ l) (l ++ l))
(Permutation (gv1 ++ l) (l ++ gv1)), (Permutation (gv1 ++ l) (gv1 ++ gv1)), (Permutation (gv1 ++ l) []), (Permutation (gv1 ++ gv1) l), (Permutation (gv1 ++ gv1) gv1), (Permutation (gv1 ++ gv1) (x :: l)), (Permutation (gv1 ++ gv1) (x :: gv1)), (Permutation (gv1 ++ gv1) (a :: l)), (Permutation (gv1 ++ gv1) (a :: gv1)), (Permutation (gv1 ++ gv1) (merge l l))
(Permutation (gv1 ++ gv1) (merge l gv1)), (Permutation (gv1 ++ gv1) (merge gv1 l)), (Permutation (gv1 ++ gv1) (merge gv1 gv1)), (Permutation (gv1 ++ gv1) (l ++ l)), (Permutation (gv1 ++ gv1) (l ++ gv1)), (Permutation (gv1 ++ gv1) (gv1 ++ l)), (Permutation (gv1 ++ gv1) []), (Permutation [] l), (Permutation [] gv1), (Permutation [] (x :: l))
(Permutation [] (x :: gv1)), (Permutation [] (a :: l)), (Permutation [] (a :: gv1)), (Permutation [] (merge l l)), (Permutation [] (merge l gv1)), (Permutation [] (merge gv1 l)), (Permutation [] (merge gv1 gv1)), (Permutation [] (l ++ l)), (Permutation [] (l ++ gv1)), (Permutation [] (gv1 ++ l))
(Permutation [] (gv1 ++ gv1)), (In x (x :: l)), (In x (x :: gv1)), (In x (a :: l)), (In x (a :: gv1)), (In x (merge l l)), (In x (merge l gv1)), (In x (merge gv1 l)), (In x (merge gv1 gv1)), (In x (l ++ l))
(In x (l ++ gv1)), (In x (gv1 ++ l)), (In x (gv1 ++ gv1)), (In a (x :: l)), (In a (x :: gv1)), (In a (a :: l)), (In a (a :: gv1)), (In a (merge l l)), (In a (merge l gv1)), (In a (merge gv1 l))
(In a (merge gv1 gv1)), (In a (l ++ l)), (In a (l ++ gv1)), (In a (gv1 ++ l)), (In a (gv1 ++ gv1)), (In (length l) l), (In (length l) gv1), (In (length l) (x :: l)), (In (length l) (x :: gv1)), (In (length l) (a :: l))
(In (length l) (a :: gv1)), (In (length l) (merge l l)), (In (length l) (merge l gv1)), (In (length l) (merge gv1 l)), (In (length l) (merge gv1 gv1)), (In (length l) (l ++ l)), (In (length l) (l ++ gv1)), (In (length l) (gv1 ++ l)), (In (length l) (gv1 ++ gv1)), (In (length gv1) l)
(In (length gv1) gv1), (In (length gv1) (x :: l)), (In (length gv1) (x :: gv1)), (In (length gv1) (a :: l)), (In (length gv1) (a :: gv1)), (In (length gv1) (merge l l)), (In (length gv1) (merge l gv1)), (In (length gv1) (merge gv1 l)), (In (length gv1) (merge gv1 gv1)), (In (length gv1) (l ++ l))
(In (length gv1) (l ++ gv1)), (In (length gv1) (gv1 ++ l)), (In (length gv1) (gv1 ++ gv1)), (x < length l), (x < length gv1), (a < length l), (a < length gv1), (length l < x), (length l < a), (length l < length gv1)
(length gv1 < x), (length gv1 < a), (length gv1 < length l), (x <= length l), (x <= length gv1), (a <= length l), (a <= length gv1), (length l <= x), (length l <= a), (length l <= length gv1)
(length gv1 <= x), (length gv1 <= a), (length gv1 <= length l), (~ x <=* l), (~ x <=* gv1), (~ a <=* l), (~ a <=* gv1), (~ sorted l), (~ sorted gv1), (~ Permutation l l)
(~ Permutation l gv1), (~ Permutation gv1 l), (~ Permutation gv1 gv1), (~ In x l), (~ In x gv1), (~ In a l), (~ In a gv1), (~ x < x), (~ x < a), (~ a < x)
(~ a < a), (~ x <= x), (~ x <= a), (~ a <= x), (~ a <= a), (l <> l), (l <> gv1), (gv1 <> l), (gv1 <> gv1), (x <> x)
(x <> a), (a <> x), (a <> a), (None = Some l), (None = Some gv1), (x :: l = l), (x :: l = gv1), (x :: l = merge l l), (x :: l = merge l gv1), (x :: l = merge gv1 l)
(x :: l = merge gv1 gv1), (x :: l = l ++ l), (x :: l = l ++ gv1), (x :: l = gv1 ++ l), (x :: l = gv1 ++ gv1), (x :: l = []), (x :: gv1 = l), (x :: gv1 = gv1), (x :: gv1 = merge l l), (x :: gv1 = merge l gv1)
(x :: gv1 = merge gv1 l), (x :: gv1 = merge gv1 gv1), (x :: gv1 = l ++ l), (x :: gv1 = l ++ gv1), (x :: gv1 = gv1 ++ l), (x :: gv1 = gv1 ++ gv1), (x :: gv1 = []), (a :: l = l), (a :: l = gv1), (a :: l = merge l l)
(a :: l = merge l gv1), (a :: l = merge gv1 l), (a :: l = merge gv1 gv1), (a :: l = l ++ l), (a :: l = l ++ gv1), (a :: l = gv1 ++ l), (a :: l = gv1 ++ gv1), (a :: l = []), (a :: gv1 = l), (a :: gv1 = gv1)
(a :: gv1 = merge l l), (a :: gv1 = merge l gv1), (a :: gv1 = merge gv1 l), (a :: gv1 = merge gv1 gv1), (a :: gv1 = l ++ l), (a :: gv1 = l ++ gv1), (a :: gv1 = gv1 ++ l), (a :: gv1 = gv1 ++ gv1), (a :: gv1 = []), (merge l l = l)
(merge l l = gv1), (merge l l = l ++ l), (merge l l = l ++ gv1), (merge l l = gv1 ++ l), (merge l l = gv1 ++ gv1), (merge l gv1 = l), (merge l gv1 = gv1), (merge l gv1 = l ++ l), (merge l gv1 = l ++ gv1), (merge l gv1 = gv1 ++ l)
(merge l gv1 = gv1 ++ gv1), (merge gv1 l = l), (merge gv1 l = gv1), (merge gv1 l = l ++ l), (merge gv1 l = l ++ gv1), (merge gv1 l = gv1 ++ l), (merge gv1 l = gv1 ++ gv1), (merge gv1 gv1 = l), (merge gv1 gv1 = gv1), (merge gv1 gv1 = l ++ l)
(merge gv1 gv1 = l ++ gv1), (merge gv1 gv1 = gv1 ++ l), (merge gv1 gv1 = gv1 ++ gv1), (l ++ l = l), (l ++ l = gv1), (l ++ gv1 = l), (l ++ gv1 = gv1), (gv1 ++ l = l), (gv1 ++ l = gv1), (gv1 ++ gv1 = l)
(gv1 ++ gv1 = gv1), ([] = l), ([] = gv1), ([] = merge l l), ([] = merge l gv1), ([] = merge gv1 l), ([] = merge gv1 gv1), ([] = l ++ l), ([] = l ++ gv1), ([] = gv1 ++ l)
([] = gv1 ++ gv1), (None = Some x), (None = Some a), ((l, l) = split l), ((l, l) = split gv1), ((l, gv1) = split l), ((l, gv1) = split gv1), ((gv1, l) = split l), ((gv1, l) = split gv1), ((gv1, gv1) = split l)
((gv1, gv1) = split gv1), (length l = x), (length l = a), (length gv1 = x), (length gv1 = a)

Label: 4 (8)
(x <=* l), (a <=* l), (sorted l), (Permutation l l), (In x l), (In a l), (x < x), (x < a), (a < x), (a < a)
(x <= x), (x <= a), (a <= x), (a <= a), (l = l), (x = x), (x = a), (a = x), (a = a), (false = sorted_bool l)
(true = sorted_bool l), (x <=* x :: l), (x <=* a :: l), (x <=* merge l l), (x <=* l ++ l), (x <=* []), (a <=* x :: l), (a <=* a :: l), (a <=* merge l l), (a <=* l ++ l)
(a <=* []), (length l <=* l), (length l <=* x :: l), (length l <=* a :: l), (length l <=* merge l l), (length l <=* l ++ l), (length l <=* []), (sorted (x :: l)), (sorted (a :: l)), (sorted (merge l l))
(sorted (l ++ l)), (sorted []), (Permutation l (x :: l)), (Permutation l (a :: l)), (Permutation l (merge l l)), (Permutation l (l ++ l)), (Permutation l []), (Permutation (x :: l) l), (Permutation (x :: l) (a :: l)), (Permutation (x :: l) (merge l l))
(Permutation (x :: l) (l ++ l)), (Permutation (x :: l) []), (Permutation (a :: l) l), (Permutation (a :: l) (x :: l)), (Permutation (a :: l) (merge l l)), (Permutation (a :: l) (l ++ l)), (Permutation (a :: l) []), (Permutation (merge l l) l), (Permutation (merge l l) (x :: l)), (Permutation (merge l l) (a :: l))
(Permutation (merge l l) (l ++ l)), (Permutation (merge l l) []), (Permutation (l ++ l) l), (Permutation (l ++ l) (x :: l)), (Permutation (l ++ l) (a :: l)), (Permutation (l ++ l) (merge l l)), (Permutation (l ++ l) []), (Permutation [] l), (Permutation [] (x :: l)), (Permutation [] (a :: l))
(Permutation [] (merge l l)), (Permutation [] (l ++ l)), (In x (x :: l)), (In x (a :: l)), (In x (merge l l)), (In x (l ++ l)), (In a (x :: l)), (In a (a :: l)), (In a (merge l l)), (In a (l ++ l))
(In (length l) l), (In (length l) (x :: l)), (In (length l) (a :: l)), (In (length l) (merge l l)), (In (length l) (l ++ l)), (x < length l), (a < length l), (length l < x), (length l < a), (x <= length l)
(a <= length l), (length l <= x), (length l <= a), (~ x <=* l), (~ a <=* l), (~ sorted l), (~ Permutation l l), (~ In x l), (~ In a l), (~ x < x)
(~ x < a), (~ a < x), (~ a < a), (~ x <= x), (~ x <= a), (~ a <= x), (~ a <= a), (l <> l), (x <> x), (x <> a)
(a <> x), (a <> a), (None = Some l), (x :: l = l), (x :: l = merge l l), (x :: l = l ++ l), (x :: l = []), (a :: l = l), (a :: l = merge l l), (a :: l = l ++ l)
(a :: l = []), (merge l l = l), (merge l l = l ++ l), (l ++ l = l), ([] = l), ([] = merge l l), ([] = l ++ l), (None = Some x), (None = Some a), ((l, l) = split l)
(length l = x), (length l = a)

Label: 4 (9)
(x <=* l), (a <=* l), (sorted l), (Permutation l l), (In x l), (In a l), (x < x), (x < a), (a < x), (a < a)
(x <= x), (x <= a), (a <= x), (a <= a), (l = l), (x = x), (x = a), (a = x), (a = a), (false = sorted_bool l)
(true = sorted_bool l), (x <=* x :: l), (x <=* a :: l), (x <=* merge l l), (x <=* l ++ l), (x <=* []), (a <=* x :: l), (a <=* a :: l), (a <=* merge l l), (a <=* l ++ l)
(a <=* []), (length l <=* l), (length l <=* x :: l), (length l <=* a :: l), (length l <=* merge l l), (length l <=* l ++ l), (length l <=* []), (sorted (x :: l)), (sorted (a :: l)), (sorted (merge l l))
(sorted (l ++ l)), (sorted []), (Permutation l (x :: l)), (Permutation l (a :: l)), (Permutation l (merge l l)), (Permutation l (l ++ l)), (Permutation l []), (Permutation (x :: l) l), (Permutation (x :: l) (a :: l)), (Permutation (x :: l) (merge l l))
(Permutation (x :: l) (l ++ l)), (Permutation (x :: l) []), (Permutation (a :: l) l), (Permutation (a :: l) (x :: l)), (Permutation (a :: l) (merge l l)), (Permutation (a :: l) (l ++ l)), (Permutation (a :: l) []), (Permutation (merge l l) l), (Permutation (merge l l) (x :: l)), (Permutation (merge l l) (a :: l))
(Permutation (merge l l) (l ++ l)), (Permutation (merge l l) []), (Permutation (l ++ l) l), (Permutation (l ++ l) (x :: l)), (Permutation (l ++ l) (a :: l)), (Permutation (l ++ l) (merge l l)), (Permutation (l ++ l) []), (Permutation [] l), (Permutation [] (x :: l)), (Permutation [] (a :: l))
(Permutation [] (merge l l)), (Permutation [] (l ++ l)), (In x (x :: l)), (In x (a :: l)), (In x (merge l l)), (In x (l ++ l)), (In a (x :: l)), (In a (a :: l)), (In a (merge l l)), (In a (l ++ l))
(In (length l) l), (In (length l) (x :: l)), (In (length l) (a :: l)), (In (length l) (merge l l)), (In (length l) (l ++ l)), (x < length l), (a < length l), (length l < x), (length l < a), (x <= length l)
(a <= length l), (length l <= x), (length l <= a), (~ x <=* l), (~ a <=* l), (~ sorted l), (~ Permutation l l), (~ In x l), (~ In a l), (~ x < x)
(~ x < a), (~ a < x), (~ a < a), (~ x <= x), (~ x <= a), (~ a <= x), (~ a <= a), (l <> l), (x <> x), (x <> a)
(a <> x), (a <> a), (None = Some l), (x :: l = l), (x :: l = merge l l), (x :: l = l ++ l), (x :: l = []), (a :: l = l), (a :: l = merge l l), (a :: l = l ++ l)
(a :: l = []), (merge l l = l), (merge l l = l ++ l), (l ++ l = l), ([] = l), ([] = merge l l), ([] = l ++ l), (None = Some x), (None = Some a), ((l, l) = split l)
(length l = x), (length l = a)


------------------------------ SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 1819.476 seconds


Label: 0 (0)
(sorted gv0), (true = sorted_bool gv0), (sorted (a :: gv0)), (sorted (merge l gv0)), (sorted (merge gv0 l)), (sorted (merge gv0 gv0)), (sorted (l ++ gv0)), (sorted (gv0 ++ l))

Label: 1 (1)
(sorted (x :: gv2)), (sorted (a :: gv2)), (Permutation (x :: l) (merge l gv2)), (Permutation (x :: l) (merge gv2 l)), (Permutation (x :: l) (l ++ gv2)), (Permutation (x :: l) (gv2 ++ l)), (Permutation (x :: gv2) (merge gv2 gv2)), (Permutation (x :: gv2) (gv2 ++ gv2)), (Permutation (merge l gv2) (x :: l)), (Permutation (merge gv2 l) (x :: l))
(Permutation (merge gv2 gv2) (x :: gv2)), (Permutation (l ++ gv2) (x :: l)), (Permutation (gv2 ++ l) (x :: l)), (Permutation (gv2 ++ gv2) (x :: gv2)), (x :: l = gv2 ++ l), (x :: gv2 = merge gv2 gv2), (x :: gv2 = gv2 ++ gv2)

Label: 1 (2)
(sorted (a :: l))

Label: 1 (3)
(a <=* gv2), (a < x), (a <= x), (a <=* x :: l), (a <=* x :: gv2), (a <=* a :: gv2), (a <=* merge l gv2), (a <=* merge gv2 l), (a <=* merge gv2 gv2), (a <=* l ++ gv2)
(a <=* gv2 ++ l), (a <=* gv2 ++ gv2), (sorted (a :: gv2)), (~ x < a), (~ x <= a)

Label: 2 (4)
(sorted (a :: l))

Label: 2 (5)
(a < x), (a <= x), (a <=* x :: l), (a <=* x :: gv3), (~ x < a), (~ x <= a)

Label: 2 (6)
(sorted (x :: gv3))

Label: 3 (7)
(a <=* l), (a <=* gv1), (a <=* x :: l), (a <=* x :: gv1), (a <=* a :: l), (a <=* a :: gv1), (a <=* merge l l), (a <=* merge l gv1), (a <=* merge gv1 l), (a <=* merge gv1 gv1)
(a <=* l ++ l), (a <=* l ++ gv1), (a <=* gv1 ++ l), (a <=* gv1 ++ gv1), (sorted (a :: l)), (sorted (a :: gv1))

Label: 4 (8)
(sorted (a :: l))

Label: 4 (9)
(a < x), (a <= x), (a <=* x :: l), (~ x < a), (~ x <= a)


------------------------------ PROCESSED SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 2100.674 seconds


(a :: merge [x] l = gv0)
 - (a :: merge [x] l = gv0)
 - (sorted gv0)
 - (true = sorted_bool gv0)
 - (sorted (a :: gv0))
 - (sorted (merge l gv0))
 - (sorted (merge gv0 l))
 - (sorted (merge gv0 gv0))
 - (sorted (l ++ gv0))
 - (sorted (gv0 ++ l))

(sorted (a :: l))
 - (sorted (a :: l))

([x] = gv2)
 - ([x] = gv2)
 - (sorted (x :: gv2))
 - (sorted (a :: gv2))
 - (Permutation (x :: l) (merge l gv2))
 - (Permutation (x :: l) (merge gv2 l))
 - (Permutation (x :: l) (l ++ gv2))
 - (Permutation (x :: l) (gv2 ++ l))
 - (Permutation (x :: gv2) (merge gv2 gv2))
 - (Permutation (x :: gv2) (gv2 ++ gv2))
 - (Permutation (merge l gv2) (x :: l))
 - (Permutation (merge gv2 l) (x :: l))
 - (Permutation (merge gv2 gv2) (x :: gv2))
 - (Permutation (l ++ gv2) (x :: l))
 - (Permutation (gv2 ++ l) (x :: l))
 - (Permutation (gv2 ++ gv2) (x :: gv2))
 - (x :: l = gv2 ++ l)
 - (x :: gv2 = merge gv2 gv2)
 - (x :: gv2 = gv2 ++ gv2)

(x > a)
 - (x > a)
 - (a <= x)
 - (a <=* x :: l)
 - (~ x < a)
 - (~ x <= a)

(sorted l -> sorted (merge (x :: gv3) l))
 - (sorted l -> sorted (merge (x :: gv3) l))
 - (sorted (x :: gv3))


------------------------------ FINAL RESULTS ------------------------------
Time Elapsed From Start: 2100.675 seconds

Number of Result Pairs Returned: 26

(a :: merge [x] l = gv0 -> sorted (a :: l) -> x > a -> sorted gv0)

([x] = gv2 -> sorted (a :: l) -> x > a -> sorted (a :: merge gv2 l))

([x] = gv2 -> sorted (x :: gv2))
(sorted (x :: gv2) -> sorted (a :: l) -> x > a -> sorted (a :: merge gv2 l))

([x] = gv2 -> Permutation (x :: l) (merge l gv2))
(Permutation (x :: l) (merge l gv2) ->  sorted (a :: l) -> x > a -> sorted (a :: merge gv2 l))

([x] = gv2 -> Permutation (x :: l) (merge gv2 l))
(Permutation (x :: l) (merge gv2 l) ->  sorted (a :: l) -> x > a -> sorted (a :: merge gv2 l))

([x] = gv2 -> Permutation (x :: l) (l ++ gv2))
(Permutation (x :: l) (l ++ gv2) ->  sorted (a :: l) -> x > a -> sorted (a :: merge gv2 l))

([x] = gv2 -> Permutation (x :: l) (gv2 ++ l))
(Permutation (x :: l) (gv2 ++ l) ->  sorted (a :: l) -> x > a -> sorted (a :: merge gv2 l))

([x] = gv2 -> Permutation (x :: gv2) (merge gv2 gv2))
(Permutation (x :: gv2) (merge gv2 gv2) ->  sorted (a :: l) -> x > a -> sorted (a :: merge gv2 l))

([x] = gv2 -> Permutation (x :: gv2) (gv2 ++ gv2))
(Permutation (x :: gv2) (gv2 ++ gv2) ->  sorted (a :: l) -> x > a -> sorted (a :: merge gv2 l))

([x] = gv2 -> Permutation (merge l gv2) (x :: l))
(Permutation (merge l gv2) (x :: l) ->  sorted (a :: l) -> x > a -> sorted (a :: merge gv2 l))

([x] = gv2 -> Permutation (merge gv2 l) (x :: l))
(Permutation (merge gv2 l) (x :: l) ->  sorted (a :: l) -> x > a -> sorted (a :: merge gv2 l))

([x] = gv2 -> Permutation (merge gv2 gv2) (x :: gv2))
(Permutation (merge gv2 gv2) (x :: gv2) ->  sorted (a :: l) -> x > a -> sorted (a :: merge gv2 l))

([x] = gv2 -> Permutation (l ++ gv2) (x :: l))
(Permutation (l ++ gv2) (x :: l) ->  sorted (a :: l) -> x > a -> sorted (a :: merge gv2 l))

([x] = gv2 -> Permutation (gv2 ++ l) (x :: l))
(Permutation (gv2 ++ l) (x :: l) ->  sorted (a :: l) -> x > a -> sorted (a :: merge gv2 l))

([x] = gv2 -> Permutation (gv2 ++ gv2) (x :: gv2))
(Permutation (gv2 ++ gv2) (x :: gv2) ->  sorted (a :: l) -> x > a -> sorted (a :: merge gv2 l))

([x] = gv2 -> x :: l = gv2 ++ l)
(x :: l = gv2 ++ l -> sorted (a :: l) -> x > a -> sorted (a :: merge gv2 l))

([x] = gv2 -> x :: gv2 = merge gv2 gv2)
(x :: gv2 = merge gv2 gv2 ->  sorted (a :: l) -> x > a -> sorted (a :: merge gv2 l))

([x] = gv2 -> x :: gv2 = gv2 ++ gv2)
(x :: gv2 = gv2 ++ gv2 ->  sorted (a :: l) -> x > a -> sorted (a :: merge gv2 l))

(sorted (a :: l) ->  x > a ->  (sorted l -> sorted (merge (x :: gv3) l)) ->  sorted (a :: merge (x :: gv3) l))

(x > a -> a <= x)
(a <= x ->  sorted (a :: l) ->  (sorted l -> sorted (merge (x :: gv3) l)) ->  sorted (a :: merge (x :: gv3) l))

(x > a -> ~ x < a)
(~ x < a ->  sorted (a :: l) ->  (sorted l -> sorted (merge (x :: gv3) l)) ->  sorted (a :: merge (x :: gv3) l))

(x > a -> ~ x <= a)
(~ x <= a ->  sorted (a :: l) ->  (sorted l -> sorted (merge (x :: gv3) l)) ->  sorted (a :: merge (x :: gv3) l))

(sorted (a :: l) -> x > a -> sorted (a :: merge [x] l))

(x > a -> a <= x)
(a <= x -> sorted (a :: l) -> sorted (a :: merge [x] l))

(x > a -> ~ x < a)
(~ x < a -> sorted (a :: l) -> sorted (a :: merge [x] l))

(x > a -> ~ x <= a)
(~ x <= a -> sorted (a :: l) -> sorted (a :: merge [x] l))
