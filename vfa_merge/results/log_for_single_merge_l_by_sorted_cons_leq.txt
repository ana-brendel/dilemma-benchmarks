Lemma Synthesis Execution Log and Results
--------------------------------------------------------------------
--------------------------------------------------------------------

Label: Initial State
Assumptions: 
 -- (sorted (a :: l))
 -- (x > a)
 -- (sorted l -> sorted (merge [x] l))

----------------------------------
Goal: (a <=* l)


------------------------------ GENERALIZED VARIABLES ------------------------------
Time Elapsed From Start: 0. seconds



------------------------------ GENERALIZATIONS ------------------------------
  NOTE: The assumptions have been restricted to be only the necessary assumptions.
Time Elapsed From Start: 87.419 seconds

Label: Generalization #0
Assumptions: 
 -- (sorted (a :: l))

----------------------------------
Goal: (a <=* l)
Case: 3



------------------------------ SYNTHESIS PROBLEMS ------------------------------
Time Elapsed From Start: 88.381 seconds

 -- functions to consider -- 
@eq : (forall A : Type, A -> A -> Prop)
not : (Prop -> Prop)
length : (forall A : Type, list A -> nat)
app : (forall A : Type, list A -> list A -> list A)
le : (nat -> nat -> Prop)
lt : (nat -> nat -> Prop)
In : (forall A : Type, A -> list A -> Prop)
existsb : (forall A : Type, (A -> bool) -> list A -> bool)
forallb : (forall A : Type, (A -> bool) -> list A -> bool)
Forall : (forall A : Type, (A -> Prop) -> list A -> Prop)
nodup : (forall A : Type, (forall x y : A, {x = y} + {x <> y}) -> list A -> list A)
Permutation : (forall A : Type, list A -> list A -> Prop)
sorted : (list nat -> Prop)
is_a_sorting_algorithm : ((list nat -> list nat) -> Prop)
@split : (forall X : Type, list X -> list X * list X)
merge : (list nat -> list nat -> list nat)
le_all : (nat -> list nat -> Prop)
list_ind2 : (forall (A : Type) (P : list A -> Prop),
 P [] ->
 (forall a : A, P [a]) ->
 (forall (a b : A) (l : list A), P l -> P (a :: b :: l)) ->
 forall l : list A, P l)
sorted_bool : (list nat -> bool)

Label: 0 (0)
Abducted Assumption: (sorted (a :: l))
Positive Examples:
   [a := 0; l := [0; 1; 2; 5]]
   [a := 1; l := [5; 5; 6]]
   [a := 0; l := [3; 4; 6; 6]]
   [a := 1; l := [2; 3; 5; 5]]
   [a := 0; l := [0; 3; 3]]
   [a := 0; l := [0; 0; 1; 1]]
   [a := 0; l := [1; 1; 2; 3]]
   [a := 2; l := [4; 5; 5]]
   [a := 1; l := [5; 6]]
   [a := 1; l := [5; 5]]
   etc ...

Negative Examples:
   [a := 4; l := [5; 2; 6; 5; 4; 6]]
   [a := 4; l := [6; 0; 3]]
   [a := 1; l := [1; 4; 0; 0]]
   [a := 1; l := [0; 4; 2; 1; 0]]
   [a := 3; l := [3; 0; 2; 3]]
   [a := 4; l := [0; 1; 3]]
   [a := 6; l := [3; 0; 1]]
   [a := 2; l := [6; 1]]
   [a := 5; l := [3; 5; 5; 5]]
   [a := 2; l := [1; 5; 5; 6]]
   etc ...



------------------------------ TERMS CONSIDERED IN SYNTHESIS ------------------------------
Time Elapsed From Start: 89.775 seconds


Label: 0 (0)
(a <=* l), (sorted l), (Permutation l l), (In a l), (a < a), (a <= a), (l = l), (a = a), (false = sorted_bool l), (true = sorted_bool l)
(a <=* a :: l), (a <=* merge l l), (a <=* l ++ l), (a <=* []), (length l <=* l), (length l <=* a :: l), (length l <=* merge l l), (length l <=* l ++ l), (length l <=* []), (sorted (a :: l))
(sorted (merge l l)), (sorted (l ++ l)), (sorted []), (Permutation l (a :: l)), (Permutation l (merge l l)), (Permutation l (l ++ l)), (Permutation l []), (Permutation (a :: l) l), (Permutation (a :: l) (merge l l)), (Permutation (a :: l) (l ++ l))
(Permutation (a :: l) []), (Permutation (merge l l) l), (Permutation (merge l l) (a :: l)), (Permutation (merge l l) (l ++ l)), (Permutation (merge l l) []), (Permutation (l ++ l) l), (Permutation (l ++ l) (a :: l)), (Permutation (l ++ l) (merge l l)), (Permutation (l ++ l) []), (Permutation [] l)
(Permutation [] (a :: l)), (Permutation [] (merge l l)), (Permutation [] (l ++ l)), (In a (a :: l)), (In a (merge l l)), (In a (l ++ l)), (In (length l) l), (In (length l) (a :: l)), (In (length l) (merge l l)), (In (length l) (l ++ l))
(a < length l), (length l < a), (a <= length l), (length l <= a), (~ a <=* l), (~ sorted l), (~ Permutation l l), (~ In a l), (~ a < a), (~ a <= a)
(l <> l), (a <> a), (None = Some l), (a :: l = l), (a :: l = merge l l), (a :: l = l ++ l), (a :: l = []), (merge l l = l), (merge l l = l ++ l), (l ++ l = l)
([] = l), ([] = merge l l), ([] = l ++ l), (None = Some a), ((l, l) = split l), (length l = a)


------------------------------ SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 154.654 seconds


Label: 0 (0)
(a <=* l), (a <=* a :: l), (a <=* merge l l), (a <=* l ++ l), (sorted (a :: l))


------------------------------ PROCESSED SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 237.633 seconds


(sorted (a :: l))
 - (sorted (a :: l))
 - (a <=* l)
 - (a <=* a :: l)
 - (a <=* merge l l)
 - (a <=* l ++ l)


------------------------------ FINAL RESULTS ------------------------------
Time Elapsed From Start: 237.634 seconds

Number of Result Pairs Returned: 4

(sorted (a :: l) -> a <=* l)

(sorted (a :: l) -> a <=* a :: l)
(a <=* a :: l -> a <=* l)

(sorted (a :: l) -> a <=* merge l l)
(a <=* merge l l -> a <=* l)

(sorted (a :: l) -> a <=* l ++ l)
(a <=* l ++ l -> a <=* l)
