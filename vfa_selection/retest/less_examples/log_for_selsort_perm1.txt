Lemma Synthesis Execution Log and Results
--------------------------------------------------------------------
--------------------------------------------------------------------

Label: Initial State
Assumptions: 

----------------------------------
Goal: (Permutation [] (selsort [] 0))


------------------------------ GENERALIZED VARIABLES ------------------------------
Time Elapsed From Start: 0. seconds

gv1 : (list nat) = (selsort [] 0)
gv2 : nat = 0
gv0 : (list nat) = []


------------------------------ GENERALIZATIONS ------------------------------
  NOTE: The assumptions have been restricted to be only the necessary assumptions.
Time Elapsed From Start: 14.642 seconds

Label: Generalization #0
Assumptions: 
 -- ([] = gv0)

----------------------------------
Goal: (Permutation gv0 (selsort gv0 0))
Case: 3

Label: Generalization #1
Assumptions: 
 -- (0 = gv2)

----------------------------------
Goal: (Permutation [] (selsort [] gv2))
Case: 1

Label: Generalization #2
Assumptions: 
 -- (selsort [] 0 = gv1)

----------------------------------
Goal: (Permutation [] gv1)
Case: 3



------------------------------ SYNTHESIS PROBLEMS ------------------------------
Time Elapsed From Start: 15.485 seconds

 -- functions to consider -- 
@eq : (forall A : Type, A -> A -> Prop)
not : (Prop -> Prop)
length : (forall A : Type, list A -> nat)
app : (forall A : Type, list A -> list A -> list A)
le : (nat -> nat -> Prop)
lt : (nat -> nat -> Prop)
In : (forall A : Type, A -> list A -> Prop)
existsb : (forall A : Type, (A -> bool) -> list A -> bool)
forallb : (forall A : Type, (A -> bool) -> list A -> bool)
Forall : (forall A : Type, (A -> Prop) -> list A -> Prop)
nodup : (forall A : Type, (forall x y : A, {x = y} + {x <> y}) -> list A -> list A)
Permutation : (forall A : Type, list A -> list A -> Prop)
sorted : (list nat -> Prop)
is_a_sorting_algorithm : ((list nat -> list nat) -> Prop)
select : (nat -> list nat -> nat * list nat)
selsort : (list nat -> nat -> list nat)
selection_sort : (list nat -> list nat)
le_all : (nat -> list nat -> Prop)
sorted_bool : (list nat -> bool)

Label: 0 (0)
Abducted Assumption: ([] = gv0)
Positive Examples:
   [gv0 := []]

Negative Examples:
   [gv0 := [5; 6; 3; 4]]
   [gv0 := [4; 3; 3; 0; 4]]
   [gv0 := [2; 0; 3; 1]]
   [gv0 := [5; 4; 4]]
   [gv0 := [2; 6; 4; 4; 3]]
   [gv0 := [3; 3; 3; 1; 6; 4]]
   [gv0 := [2; 5; 5; 3; 5]]
   [gv0 := [2; 0; 0; 4]]
   [gv0 := [3; 3; 0; 1]]
   [gv0 := [4; 5; 2; 0]]


Label: 1 (1)
Abducted Assumption: (0 = gv2)
Positive Examples:
   [gv2 := 0]

Negative Examples:
   [gv2 := 6]
   [gv2 := 5]
   [gv2 := 3]
   [gv2 := 2]
   [gv2 := 1]
   [gv2 := 4]


Label: 2 (2)
Abducted Assumption: (selsort [] 0 = gv1)
Positive Examples:
   [gv1 := []]

Negative Examples:
   [gv1 := [6; 0; 5]]
   [gv1 := [5; 0; 1; 5; 3]]
   [gv1 := [3; 6; 1; 4; 4; 2]]
   [gv1 := [5; 3; 5; 0; 0]]
   [gv1 := [0; 0; 0; 4]]
   [gv1 := [5; 1; 4; 0; 2]]
   [gv1 := [0; 4; 1; 3]]
   [gv1 := [1; 3; 0; 3; 5]]
   [gv1 := [2; 0; 3; 2]]
   [gv1 := [3; 1; 0; 2]]



------------------------------ TERMS CONSIDERED IN SYNTHESIS ------------------------------
Time Elapsed From Start: 16.286 seconds


Label: 0 (0)
(sorted gv0), (Permutation gv0 gv0), (gv0 = gv0), (false = sorted_bool gv0), (true = sorted_bool gv0), (length gv0 <=* gv0), (length gv0 <=* selection_sort gv0), (length gv0 <=* gv0 ++ gv0), (length gv0 <=* []), (sorted (selection_sort gv0))
(sorted (gv0 ++ gv0)), (sorted []), (Permutation gv0 (selection_sort gv0)), (Permutation gv0 (gv0 ++ gv0)), (Permutation gv0 []), (Permutation (selection_sort gv0) gv0), (Permutation (selection_sort gv0) (gv0 ++ gv0)), (Permutation (selection_sort gv0) []), (Permutation (gv0 ++ gv0) gv0), (Permutation (gv0 ++ gv0) (selection_sort gv0))
(Permutation (gv0 ++ gv0) []), (Permutation [] gv0), (Permutation [] (selection_sort gv0)), (Permutation [] (gv0 ++ gv0)), (In (length gv0) gv0), (In (length gv0) (selection_sort gv0)), (In (length gv0) (gv0 ++ gv0)), (~ sorted gv0), (~ Permutation gv0 gv0), (gv0 <> gv0)
(None = Some gv0), (selection_sort gv0 = gv0), (selection_sort gv0 = gv0 ++ gv0), (gv0 ++ gv0 = gv0), ([] = gv0), ([] = selection_sort gv0), ([] = gv0 ++ gv0)

Label: 1 (1)
(gv2 < gv2), (gv2 <= gv2), (gv2 = gv2), (gv2 <=* []), (sorted []), (~ gv2 < gv2), (~ gv2 <= gv2), (gv2 <> gv2), (None = Some gv2)

Label: 2 (2)
(sorted gv1), (Permutation gv1 gv1), (gv1 = gv1), (false = sorted_bool gv1), (true = sorted_bool gv1), (length gv1 <=* gv1), (length gv1 <=* selection_sort gv1), (length gv1 <=* gv1 ++ gv1), (length gv1 <=* []), (sorted (selection_sort gv1))
(sorted (gv1 ++ gv1)), (sorted []), (Permutation gv1 (selection_sort gv1)), (Permutation gv1 (gv1 ++ gv1)), (Permutation gv1 []), (Permutation (selection_sort gv1) gv1), (Permutation (selection_sort gv1) (gv1 ++ gv1)), (Permutation (selection_sort gv1) []), (Permutation (gv1 ++ gv1) gv1), (Permutation (gv1 ++ gv1) (selection_sort gv1))
(Permutation (gv1 ++ gv1) []), (Permutation [] gv1), (Permutation [] (selection_sort gv1)), (Permutation [] (gv1 ++ gv1)), (In (length gv1) gv1), (In (length gv1) (selection_sort gv1)), (In (length gv1) (gv1 ++ gv1)), (~ sorted gv1), (~ Permutation gv1 gv1), (gv1 <> gv1)
(None = Some gv1), (selection_sort gv1 = gv1), (selection_sort gv1 = gv1 ++ gv1), (gv1 ++ gv1 = gv1), ([] = gv1), ([] = selection_sort gv1), ([] = gv1 ++ gv1)


------------------------------ SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 65.773 seconds


Label: 0 (0)
(sorted gv0), (true = sorted_bool gv0), (sorted (gv0 ++ gv0)), (Permutation gv0 (gv0 ++ gv0)), (Permutation gv0 []), (Permutation (selection_sort gv0) (gv0 ++ gv0)), (Permutation (selection_sort gv0) []), (Permutation (gv0 ++ gv0) gv0), (Permutation (gv0 ++ gv0) (selection_sort gv0)), (Permutation (gv0 ++ gv0) [])
(Permutation [] gv0), (Permutation [] (selection_sort gv0)), (Permutation [] (gv0 ++ gv0)), (selection_sort gv0 = gv0), (selection_sort gv0 = gv0 ++ gv0), (gv0 ++ gv0 = gv0), ([] = gv0), ([] = selection_sort gv0), ([] = gv0 ++ gv0)

Label: 1 (1)

Label: 2 (2)
(length gv1 <=* gv1), (length gv1 <=* selection_sort gv1), (length gv1 <=* gv1 ++ gv1), (sorted (gv1 ++ gv1)), (Permutation gv1 (gv1 ++ gv1)), (Permutation gv1 []), (Permutation (selection_sort gv1) (gv1 ++ gv1)), (Permutation (selection_sort gv1) []), (Permutation (gv1 ++ gv1) gv1), (Permutation (gv1 ++ gv1) (selection_sort gv1))
(Permutation (gv1 ++ gv1) []), (Permutation [] gv1), (Permutation [] (selection_sort gv1)), (Permutation [] (gv1 ++ gv1)), (selection_sort gv1 = gv1 ++ gv1), (gv1 ++ gv1 = gv1), ([] = gv1), ([] = selection_sort gv1), ([] = gv1 ++ gv1)


------------------------------ PROCESSED SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 229.522 seconds


([] = gv0)
 - ([] = gv0)
 - (sorted gv0)
 - (true = sorted_bool gv0)
 - (sorted (gv0 ++ gv0))
 - (Permutation gv0 (gv0 ++ gv0))
 - (Permutation gv0 [])
 - (Permutation (selection_sort gv0) (gv0 ++ gv0))
 - (Permutation (selection_sort gv0) [])
 - (Permutation (gv0 ++ gv0) gv0)
 - (Permutation (gv0 ++ gv0) (selection_sort gv0))
 - (Permutation (gv0 ++ gv0) [])
 - (Permutation [] gv0)
 - (Permutation [] (selection_sort gv0))
 - (Permutation [] (gv0 ++ gv0))
 - (selection_sort gv0 = gv0)
 - (selection_sort gv0 = gv0 ++ gv0)
 - (gv0 ++ gv0 = gv0)
 - ([] = selection_sort gv0)
 - ([] = gv0 ++ gv0)

(selsort [] 0 = gv1)
 - (selsort [] 0 = gv1)
 - (length gv1 <=* gv1)
 - (length gv1 <=* selection_sort gv1)
 - (length gv1 <=* gv1 ++ gv1)
 - (sorted (gv1 ++ gv1))
 - (Permutation gv1 (gv1 ++ gv1))
 - (Permutation gv1 [])
 - (Permutation (selection_sort gv1) (gv1 ++ gv1))
 - (Permutation (selection_sort gv1) [])
 - (Permutation (gv1 ++ gv1) gv1)
 - (Permutation (gv1 ++ gv1) (selection_sort gv1))
 - (Permutation (gv1 ++ gv1) [])
 - (Permutation [] gv1)
 - (Permutation [] (selection_sort gv1))
 - (Permutation [] (gv1 ++ gv1))
 - (selection_sort gv1 = gv1 ++ gv1)
 - (gv1 ++ gv1 = gv1)
 - ([] = selection_sort gv1)
 - ([] = gv1 ++ gv1)

(0 = gv2)
 - (0 = gv2)


------------------------------ FINAL RESULTS ------------------------------
Time Elapsed From Start: 229.523 seconds

Number of Result Pairs Returned: 29

([] = gv0 -> Permutation gv0 (selsort gv0 0))

([] = gv0 -> Permutation gv0 (gv0 ++ gv0))
(Permutation gv0 (gv0 ++ gv0) -> Permutation gv0 (selsort gv0 0))

([] = gv0 -> Permutation gv0 [])
(Permutation gv0 [] -> Permutation gv0 (selsort gv0 0))

([] = gv0 -> Permutation (selection_sort gv0) (gv0 ++ gv0))
(Permutation (selection_sort gv0) (gv0 ++ gv0) ->  Permutation gv0 (selsort gv0 0))

([] = gv0 -> Permutation (selection_sort gv0) [])
(Permutation (selection_sort gv0) [] -> Permutation gv0 (selsort gv0 0))

([] = gv0 -> Permutation (gv0 ++ gv0) gv0)
(Permutation (gv0 ++ gv0) gv0 -> Permutation gv0 (selsort gv0 0))

([] = gv0 -> Permutation (gv0 ++ gv0) (selection_sort gv0))
(Permutation (gv0 ++ gv0) (selection_sort gv0) ->  Permutation gv0 (selsort gv0 0))

([] = gv0 -> Permutation (gv0 ++ gv0) [])
(Permutation (gv0 ++ gv0) [] -> Permutation gv0 (selsort gv0 0))

([] = gv0 -> Permutation [] gv0)
(Permutation [] gv0 -> Permutation gv0 (selsort gv0 0))

([] = gv0 -> Permutation [] (selection_sort gv0))
(Permutation [] (selection_sort gv0) -> Permutation gv0 (selsort gv0 0))

([] = gv0 -> Permutation [] (gv0 ++ gv0))
(Permutation [] (gv0 ++ gv0) -> Permutation gv0 (selsort gv0 0))

([] = gv0 -> selection_sort gv0 = gv0 ++ gv0)
(selection_sort gv0 = gv0 ++ gv0 -> Permutation gv0 (selsort gv0 0))

([] = gv0 -> gv0 ++ gv0 = gv0)
(gv0 ++ gv0 = gv0 -> Permutation gv0 (selsort gv0 0))

([] = gv0 -> [] = selection_sort gv0)
([] = selection_sort gv0 -> Permutation gv0 (selsort gv0 0))

([] = gv0 -> [] = gv0 ++ gv0)
([] = gv0 ++ gv0 -> Permutation gv0 (selsort gv0 0))

(0 = gv2 -> Permutation [] (selsort [] gv2))

(selsort [] 0 = gv1 -> Permutation [] gv1)

(selsort [] 0 = gv1 -> Permutation gv1 (gv1 ++ gv1))
(Permutation gv1 (gv1 ++ gv1) -> Permutation [] gv1)

(selsort [] 0 = gv1 -> Permutation (selection_sort gv1) (gv1 ++ gv1))
(Permutation (selection_sort gv1) (gv1 ++ gv1) -> Permutation [] gv1)

(selsort [] 0 = gv1 -> Permutation (selection_sort gv1) [])
(Permutation (selection_sort gv1) [] -> Permutation [] gv1)

(selsort [] 0 = gv1 -> Permutation (gv1 ++ gv1) gv1)
(Permutation (gv1 ++ gv1) gv1 -> Permutation [] gv1)

(selsort [] 0 = gv1 -> Permutation (gv1 ++ gv1) (selection_sort gv1))
(Permutation (gv1 ++ gv1) (selection_sort gv1) -> Permutation [] gv1)

(selsort [] 0 = gv1 -> Permutation (gv1 ++ gv1) [])
(Permutation (gv1 ++ gv1) [] -> Permutation [] gv1)

(selsort [] 0 = gv1 -> Permutation [] (selection_sort gv1))
(Permutation [] (selection_sort gv1) -> Permutation [] gv1)

(selsort [] 0 = gv1 -> Permutation [] (gv1 ++ gv1))
(Permutation [] (gv1 ++ gv1) -> Permutation [] gv1)

(selsort [] 0 = gv1 -> selection_sort gv1 = gv1 ++ gv1)
(selection_sort gv1 = gv1 ++ gv1 -> Permutation [] gv1)

(selsort [] 0 = gv1 -> gv1 ++ gv1 = gv1)
(gv1 ++ gv1 = gv1 -> Permutation [] gv1)

(selsort [] 0 = gv1 -> [] = selection_sort gv1)
([] = selection_sort gv1 -> Permutation [] gv1)

(selsort [] 0 = gv1 -> [] = gv1 ++ gv1)
([] = gv1 ++ gv1 -> Permutation [] gv1)
