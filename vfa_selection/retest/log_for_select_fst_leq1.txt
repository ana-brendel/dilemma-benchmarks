Lemma Synthesis Execution Log and Results
--------------------------------------------------------------------
--------------------------------------------------------------------

Label: Initial State
Assumptions: 
 -- (x :: x1 = bl)
 -- ((x0, x :: x1) = (y, bl))
 -- (exists j : list nat, select a al = (x0, j))
 -- (a < x)
 -- (exists (i : nat) (j : list nat), select a al = (i, j))
 -- (forall (bl : list nat) (y x : nat), select x al = (y, bl) -> y <= x)
 -- (x0 = y)
 -- (x0 = a)
 -- (x0 <= a)

----------------------------------
Goal: (a < S x)


------------------------------ GENERALIZED VARIABLES ------------------------------
Time Elapsed From Start: 0. seconds

gv0 : nat = (S x)


------------------------------ GENERALIZATIONS ------------------------------
  NOTE: The assumptions have been restricted to be only the necessary assumptions.
Time Elapsed From Start: 124.74 seconds

Label: Generalization #0
Assumptions: 
 -- (S x = gv0)
 -- (a < x)

----------------------------------
Goal: (a < gv0)
Case: 3

Label: Generalization #1
Assumptions: 
 -- (a < x)

----------------------------------
Goal: (a < S x)
Case: 3



------------------------------ SYNTHESIS PROBLEMS ------------------------------
Time Elapsed From Start: 125.365 seconds

 -- functions to consider -- 
@eq : (forall A : Type, A -> A -> Prop)
not : (Prop -> Prop)
@fst : (forall A B : Type, A * B -> A)
@snd : (forall A B : Type, A * B -> B)
length : (forall A : Type, list A -> nat)
app : (forall A : Type, list A -> list A -> list A)
le : (nat -> nat -> Prop)
lt : (nat -> nat -> Prop)
In : (forall A : Type, A -> list A -> Prop)
existsb : (forall A : Type, (A -> bool) -> list A -> bool)
forallb : (forall A : Type, (A -> bool) -> list A -> bool)
Forall : (forall A : Type, (A -> Prop) -> list A -> Prop)
nodup : (forall A : Type, (forall x y : A, {x = y} + {x <> y}) -> list A -> list A)
Permutation : (forall A : Type, list A -> list A -> Prop)
sorted : (list nat -> Prop)
is_a_sorting_algorithm : ((list nat -> list nat) -> Prop)
select : (nat -> list nat -> nat * list nat)
selsort : (list nat -> nat -> list nat)
selection_sort : (list nat -> list nat)
le_all : (nat -> list nat -> Prop)
sorted_bool : (list nat -> bool)

Label: 0 (0)
Abducted Assumption: (S x = gv0)
Positive Examples:
   [a := 2; gv0 := 6; x := 5]
   [a := 0; gv0 := 6; x := 5]
   [a := 4; gv0 := 6; x := 5]
   [a := 1; gv0 := 4; x := 3]
   [a := 1; gv0 := 3; x := 2]
   [a := 3; gv0 := 6; x := 5]
   [a := 0; gv0 := 5; x := 4]
   [a := 2; gv0 := 5; x := 4]
   [a := 1; gv0 := 6; x := 5]
   [a := 0; gv0 := 4; x := 3]
   etc ...

Negative Examples:
   [a := 4; gv0 := 1; x := 6]
   [a := 3; gv0 := 2; x := 6]
   [a := 5; gv0 := 2; x := 6]
   [a := 3; gv0 := 1; x := 6]
   [a := 5; gv0 := 3; x := 6]
   [a := 4; gv0 := 4; x := 5]
   [a := 2; gv0 := 1; x := 6]
   [a := 2; gv0 := 2; x := 6]
   [a := 4; gv0 := 3; x := 6]
   [a := 3; gv0 := 2; x := 5]
   etc ...


Label: 0 (1)
Abducted Assumption: (a < x)
Positive Examples:
   [a := 2; gv0 := 6; x := 5]
   [a := 0; gv0 := 6; x := 5]
   [a := 4; gv0 := 6; x := 5]
   [a := 1; gv0 := 4; x := 3]
   [a := 1; gv0 := 3; x := 2]
   [a := 3; gv0 := 6; x := 5]
   [a := 0; gv0 := 5; x := 4]
   [a := 2; gv0 := 5; x := 4]
   [a := 1; gv0 := 6; x := 5]
   [a := 0; gv0 := 4; x := 3]
   etc ...

Negative Examples:
   [a := 6; gv0 := 1; x := 0]
   [a := 6; gv0 := 2; x := 1]
   [a := 6; gv0 := 3; x := 2]
   [a := 6; gv0 := 6; x := 5]
   [a := 6; gv0 := 5; x := 4]
   [a := 5; gv0 := 5; x := 4]
   [a := 5; gv0 := 2; x := 1]
   [a := 2; gv0 := 2; x := 1]
   [a := 5; gv0 := 4; x := 3]
   [a := 4; gv0 := 2; x := 1]
   etc ...


Label: 1 (2)
Abducted Assumption: (a < x)
Positive Examples:
   [a := 1; x := 6]
   [a := 3; x := 6]
   [a := 2; x := 6]
   [a := 1; x := 5]
   [a := 5; x := 6]
   [a := 0; x := 6]
   [a := 4; x := 5]
   [a := 4; x := 6]
   [a := 1; x := 4]
   [a := 0; x := 4]
   etc ...

Negative Examples:
   [a := 6; x := 3]
   [a := 6; x := 1]
   [a := 5; x := 3]
   [a := 5; x := 0]
   [a := 6; x := 4]
   [a := 6; x := 5]
   [a := 5; x := 4]
   [a := 4; x := 0]
   [a := 3; x := 0]
   [a := 6; x := 0]
   etc ...



------------------------------ TERMS CONSIDERED IN SYNTHESIS ------------------------------
Time Elapsed From Start: 126.08 seconds


Label: 0 (0)
(x < x), (x < gv0), (x < a), (gv0 < x), (gv0 < gv0), (gv0 < a), (a < x), (a < gv0), (a < a), (x <= x)
(x <= a), (gv0 <= x), (gv0 <= gv0), (gv0 <= a), (a <= x), (a <= gv0), (a <= a), (x = x), (x = gv0), (x = a)
(gv0 = gv0), (gv0 = a), (a = x), (a = gv0), (a = a), (x <=* []), (gv0 <=* []), (a <=* []), (sorted []), (~ x < x)
(~ x < a), (~ gv0 < x), (~ gv0 < gv0), (~ gv0 < a), (~ a < x), (~ a < gv0), (~ a < a), (~ x <= x), (~ x <= gv0), (~ x <= a)
(~ gv0 <= gv0), (~ gv0 <= a), (~ a <= x), (~ a <= gv0), (~ a <= a), (x <> x), (x <> gv0), (x <> a), (gv0 <> x), (gv0 <> gv0)
(a <> x), (a <> gv0), (a <> a), (None = Some x), (None = Some gv0), (None = Some a)

Label: 0 (1)
(x < x), (x < gv0), (x < a), (gv0 < x), (gv0 < gv0), (gv0 < a), (a < x), (a < gv0), (a < a), (x <= x)
(x <= a), (gv0 <= x), (gv0 <= gv0), (gv0 <= a), (a <= x), (a <= gv0), (a <= a), (x = x), (x = gv0), (x = a)
(gv0 = gv0), (gv0 = a), (a = x), (a = gv0), (a = a), (x <=* []), (gv0 <=* []), (a <=* []), (sorted []), (~ x < x)
(~ x < a), (~ gv0 < x), (~ gv0 < gv0), (~ gv0 < a), (~ a < x), (~ a < gv0), (~ a < a), (~ x <= x), (~ x <= gv0), (~ x <= a)
(~ gv0 <= gv0), (~ gv0 <= a), (~ a <= x), (~ a <= gv0), (~ a <= a), (x <> x), (x <> gv0), (x <> a), (gv0 <> x), (gv0 <> gv0)
(a <> x), (a <> gv0), (a <> a), (None = Some x), (None = Some gv0), (None = Some a)

Label: 1 (2)
(x < x), (x < a), (a < x), (a < a), (x <= x), (x <= a), (a <= x), (a <= a), (x = x), (x = a)
(a = a), (x <=* []), (a <=* []), (sorted []), (~ x < x), (~ x < a), (~ a < x), (~ a < a), (~ x <= x), (~ x <= a)
(~ a <= a), (x <> x), (x <> a), (a <> x), (a <> a), (None = Some x), (None = Some a)


------------------------------ COMBINED SYNTHESIS PROBLEMS ------------------------------
Time Elapsed From Start: 126.137 seconds


Label: 0 (0)
Abducted Assumption: (S x = gv0)
Positive Examples:
   [a := 2; gv0 := 6; x := 5]
   [a := 0; gv0 := 6; x := 5]
   [a := 4; gv0 := 6; x := 5]
   [a := 1; gv0 := 4; x := 3]
   [a := 1; gv0 := 3; x := 2]
   [a := 3; gv0 := 6; x := 5]
   [a := 0; gv0 := 5; x := 4]
   [a := 2; gv0 := 5; x := 4]
   [a := 1; gv0 := 6; x := 5]
   [a := 0; gv0 := 4; x := 3]
   etc ...

Negative Examples:
   [a := 4; gv0 := 1; x := 6]
   [a := 3; gv0 := 2; x := 6]
   [a := 5; gv0 := 2; x := 6]
   [a := 3; gv0 := 1; x := 6]
   [a := 5; gv0 := 3; x := 6]
   [a := 4; gv0 := 4; x := 5]
   [a := 2; gv0 := 1; x := 6]
   [a := 2; gv0 := 2; x := 6]
   [a := 4; gv0 := 3; x := 6]
   [a := 3; gv0 := 2; x := 5]
   etc ...

(x < x), (x < gv0), (x < a), (gv0 < x), (gv0 < gv0), (gv0 < a), (a < x), (a < gv0), (a < a), (x <= x)
(x <= a), (gv0 <= x), (gv0 <= gv0), (gv0 <= a), (a <= x), (a <= gv0), (a <= a), (x = x), (x = gv0), (x = a)
(gv0 = gv0), (gv0 = a), (a = x), (a = gv0), (a = a), (x <=* []), (gv0 <=* []), (a <=* []), (sorted []), (~ x < x)
(~ x < a), (~ gv0 < x), (~ gv0 < gv0), (~ gv0 < a), (~ a < x), (~ a < gv0), (~ a < a), (~ x <= x), (~ x <= gv0), (~ x <= a)
(~ gv0 <= gv0), (~ gv0 <= a), (~ a <= x), (~ a <= gv0), (~ a <= a), (x <> x), (x <> gv0), (x <> a), (gv0 <> x), (gv0 <> gv0)
(a <> x), (a <> gv0), (a <> a), (None = Some x), (None = Some gv0), (None = Some a)

Label: 1 (1)
Abducted Assumption: (a < x)
Positive Examples:
   [a := 3; x := 4; gv0 := 5]
   [a := 3; x := 5; gv0 := 6]
   [a := 0; x := 1; gv0 := 2]
   [a := 1; x := 2; gv0 := 3]
   [a := 0; x := 3; gv0 := 4]
   [a := 0; x := 5; gv0 := 6]
   [a := 0; x := 4; gv0 := 5]
   [a := 0; x := 6; gv0 := 7]
   [a := 3; x := 6; gv0 := 7]
   [a := 2; x := 3; gv0 := 4]
   etc ...

Negative Examples:
   [a := 4; x := 1; gv0 := 2]
   [a := 5; x := 1; gv0 := 2]
   [a := 6; x := 1; gv0 := 2]
   [a := 2; x := 0; gv0 := 1]
   [a := 4; x := 3; gv0 := 4]
   [a := 5; x := 4; gv0 := 5]
   [a := 6; x := 5; gv0 := 6]
   [a := 6; x := 4; gv0 := 5]
   [a := 5; x := 3; gv0 := 4]
   [a := 6; x := 3; gv0 := 4]
   etc ...

(x < x), (x < a), (a < x), (a < a), (x <= x), (x <= a), (a <= x), (a <= a), (x = x), (x = a)
(a = a), (x <=* []), (a <=* []), (sorted []), (~ x < x), (~ x < a), (~ a < x), (~ a < a), (~ x <= x), (~ x <= a)
(~ a <= a), (x <> x), (x <> a), (a <> x), (a <> a), (None = Some x), (None = Some a), (x < gv0), (gv0 < x), (gv0 < gv0)
(a < gv0), (x <= gv0), (gv0 <= x), (gv0 <= gv0), (gv0 <= a), (a <= gv0), (x = gv0), (gv0 = x), (gv0 = gv0), (gv0 = a)
(gv0 <=* []), (~ x < gv0), (~ gv0 < x), (~ gv0 < gv0), (~ gv0 < a), (~ a < gv0), (~ x <= gv0), (~ gv0 <= x), (~ gv0 <= gv0), (~ gv0 <= a)
(x <> gv0), (gv0 <> x), (gv0 <> gv0), (gv0 <> a), (a <> gv0), (None = Some gv0)


------------------------------ SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 166.847 seconds


Label: 0 (0)
(x < gv0), (a < gv0), (x <= gv0), (~ gv0 <= x)

Label: 1 (1)
(a < x), (a < gv0)

Label: 0 (2)
(a < x), (a < gv0)


------------------------------ PROCESSED SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 181.43 seconds


(a < x)
 - (a < x)
 - (a < gv0)

(S x = gv0)
 - (S x = gv0)
 - (x < gv0)
 - (a < gv0)
 - (x <= gv0)
 - (~ gv0 <= x)


------------------------------ FINAL RESULTS ------------------------------
Time Elapsed From Start: 181.431 seconds

Number of Result Pairs Returned: 3

(S x = gv0 -> x < gv0)
(x < gv0 -> a < x -> a < gv0)

(S x = gv0 -> x <= gv0)
(x <= gv0 -> a < x -> a < gv0)

(S x = gv0 -> ~ gv0 <= x)
(~ gv0 <= x -> a < x -> a < gv0)
