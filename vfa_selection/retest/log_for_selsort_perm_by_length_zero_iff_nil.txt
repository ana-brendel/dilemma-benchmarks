Lemma Synthesis Execution Log and Results
--------------------------------------------------------------------
--------------------------------------------------------------------

Label: Initial State
Assumptions: 
 -- (length l = 0)

----------------------------------
Goal: (Permutation l (selsort l 0))


------------------------------ GENERALIZED VARIABLES ------------------------------
Time Elapsed From Start: 0. seconds

gv1 : nat = 0
gv0 : (list nat) = (selsort l 0)


------------------------------ GENERALIZATIONS ------------------------------
  NOTE: The assumptions have been restricted to be only the necessary assumptions.
Time Elapsed From Start: 59.416 seconds

Label: Generalization #0
Assumptions: 
 -- (selsort l 0 = gv0)
 -- (length l = 0)

----------------------------------
Goal: (Permutation l gv0)
Case: 3

Label: Generalization #1
Assumptions: 
 -- (length l = gv1)

----------------------------------
Goal: (Permutation l (selsort l gv1))
Case: 3

Label: Generalization #2
Assumptions: 
 -- (length l = 0)

----------------------------------
Goal: (Permutation l (selsort l 0))
Case: 3



------------------------------ SYNTHESIS PROBLEMS ------------------------------
Time Elapsed From Start: 60.828 seconds

 -- functions to consider -- 
@eq : (forall A : Type, A -> A -> Prop)
not : (Prop -> Prop)
length : (forall A : Type, list A -> nat)
app : (forall A : Type, list A -> list A -> list A)
le : (nat -> nat -> Prop)
lt : (nat -> nat -> Prop)
In : (forall A : Type, A -> list A -> Prop)
existsb : (forall A : Type, (A -> bool) -> list A -> bool)
forallb : (forall A : Type, (A -> bool) -> list A -> bool)
Forall : (forall A : Type, (A -> Prop) -> list A -> Prop)
nodup : (forall A : Type, (forall x y : A, {x = y} + {x <> y}) -> list A -> list A)
Permutation : (forall A : Type, list A -> list A -> Prop)
sorted : (list nat -> Prop)
is_a_sorting_algorithm : ((list nat -> list nat) -> Prop)
select : (nat -> list nat -> nat * list nat)
selsort : (list nat -> nat -> list nat)
selection_sort : (list nat -> list nat)
le_all : (nat -> list nat -> Prop)
sorted_bool : (list nat -> bool)

Label: 0 (0)
Abducted Assumption: (selsort l 0 = gv0)
Positive Examples:
   [gv0 := []; l := []]

Negative Examples:
   [gv0 := [0; 1; 2; 3]; l := []]
   [gv0 := [0; 5; 3; 2; 5]; l := []]
   [gv0 := [5; 0; 5; 5; 0; 1]; l := []]
   [gv0 := [1; 6; 3; 2]; l := []]
   [gv0 := [0; 2; 3; 2; 4]; l := []]
   [gv0 := [3; 1; 1]; l := []]
   [gv0 := [4; 5; 4; 0]; l := []]
   [gv0 := [3; 3; 5; 0; 0]; l := []]
   [gv0 := [5; 6; 0; 6; 5; 2]; l := []]
   [gv0 := [5; 1; 1]; l := []]
   etc ...


Label: 0 (1)
Abducted Assumption: (length l = 0)
Positive Examples:
   [gv0 := []; l := []]

Negative Examples:
   [gv0 := []; l := [4; 3; 4; 5; 3; 2]]
   [gv0 := []; l := [6; 5]]
   [gv0 := []; l := [2; 1; 1; 1; 0]]
   [gv0 := []; l := [2; 4; 0]]
   [gv0 := []; l := [3; 0; 0; 5; 0]]
   [gv0 := []; l := [4; 0; 5; 6; 6]]
   [gv0 := []; l := [2; 4; 4; 2; 2]]
   [gv0 := []; l := [1; 4; 4]]
   [gv0 := []; l := [3; 0; 2]]
   [gv0 := []; l := [1; 2; 0; 4]]
   etc ...


Label: 1 (2)
Abducted Assumption: (length l = gv1)
Positive Examples:
   [gv1 := 3; l := [2; 3; 3]]
   [gv1 := 3; l := [4; 2; 0]]
   [gv1 := 4; l := [1; 3; 1; 2]]
   [gv1 := 4; l := [1; 2; 0; 0]]
   [gv1 := 3; l := [1; 0; 1]]
   [gv1 := 6; l := [4; 4; 3; 1; 5; 2]]
   [gv1 := 4; l := [3; 0; 1; 1]]
   [gv1 := 4; l := [0; 6; 6; 4]]
   [gv1 := 3; l := [1; 1; 2]]
   [gv1 := 2; l := [0; 6]]
   etc ...

Negative Examples:
   [gv1 := 3; l := [0; 4; 0; 1]]
   [gv1 := 5; l := [6; 0; 1; 1; 4; 0]]
   [gv1 := 2; l := [0; 1; 4; 4]]
   [gv1 := 1; l := [5; 1; 0; 5; 1]]
   [gv1 := 1; l := [5; 5; 0; 2]]
   [gv1 := 2; l := [2; 0; 1; 2]]
   [gv1 := 1; l := [0; 4; 3]]
   [gv1 := 3; l := [5; 2; 1; 3]]
   [gv1 := 0; l := [1; 3; 0; 3]]
   [gv1 := 5; l := [0; 4; 0; 2; 1; 3]]
   etc ...


Label: 2 (3)
Abducted Assumption: (length l = 0)
Positive Examples:
   [l := []]

Negative Examples:
   [l := [4; 3; 0; 5; 5; 5]]
   [l := [0; 0; 5; 5; 5; 1]]
   [l := [2; 5; 4; 5]]
   [l := [4; 4; 3; 1]]
   [l := [0; 4; 3; 3]]
   [l := [0; 1; 4; 4]]
   [l := [3; 1; 0; 4]]
   [l := [2; 1; 2; 5; 5; 1]]
   [l := [1; 2; 0; 3; 5]]
   [l := [4; 6; 1; 6; 1]]
   etc ...



------------------------------ TERMS CONSIDERED IN SYNTHESIS ------------------------------
Time Elapsed From Start: 62.247 seconds


Label: 0 (0)
(sorted gv0), (sorted l), (gv0 = gv0), (gv0 = l), (l = gv0), (l = l), (false = sorted_bool gv0), (false = sorted_bool l), (true = sorted_bool gv0), (true = sorted_bool l)
(sorted (selection_sort l)), (Permutation gv0 l), (Permutation gv0 (selection_sort gv0)), (Permutation gv0 (selection_sort l)), (Permutation l gv0), (Permutation l (selection_sort gv0)), (Permutation l (selection_sort l)), (Permutation (selection_sort gv0) gv0), (Permutation (selection_sort gv0) l), (Permutation (selection_sort gv0) (selection_sort l))
(Permutation (selection_sort l) l), (Permutation (selection_sort l) (selection_sort gv0)), (~ sorted gv0), (~ sorted l), (gv0 <> gv0), (gv0 <> l), (l <> gv0), (l <> l), (None = Some gv0), (None = Some l)
(selection_sort gv0 = l), (selection_sort l = gv0), (selection_sort l = l)

Label: 0 (1)
(sorted gv0), (sorted l), (gv0 = gv0), (gv0 = l), (l = gv0), (l = l), (false = sorted_bool gv0), (false = sorted_bool l), (true = sorted_bool gv0), (true = sorted_bool l)
(sorted (selection_sort l)), (Permutation gv0 l), (Permutation gv0 (selection_sort gv0)), (Permutation gv0 (selection_sort l)), (Permutation l gv0), (Permutation l (selection_sort gv0)), (Permutation l (selection_sort l)), (Permutation (selection_sort gv0) gv0), (Permutation (selection_sort gv0) l), (Permutation (selection_sort gv0) (selection_sort l))
(Permutation (selection_sort l) l), (Permutation (selection_sort l) (selection_sort gv0)), (~ sorted gv0), (~ sorted l), (gv0 <> gv0), (gv0 <> l), (l <> gv0), (l <> l), (None = Some gv0), (None = Some l)
(selection_sort gv0 = l), (selection_sort l = gv0), (selection_sort l = l)

Label: 1 (2)
(gv1 <=* l), (sorted l), (Permutation l l), (In gv1 l), (gv1 < gv1), (gv1 <= gv1), (gv1 = gv1), (l = l), (false = sorted_bool l), (true = sorted_bool l)
(gv1 <=* selection_sort l), (gv1 <=* selsort l gv1), (gv1 <=* l ++ l), (gv1 <=* []), (length l <=* l), (length l <=* gv1 :: l), (length l <=* selection_sort l), (length l <=* selsort l gv1), (length l <=* l ++ l), (length l <=* [])
(sorted (selection_sort l)), (sorted (selsort l gv1)), (sorted (l ++ l)), (sorted []), (Permutation l (gv1 :: l)), (Permutation l (selection_sort l)), (Permutation l (selsort l gv1)), (Permutation l (l ++ l)), (Permutation l []), (Permutation (gv1 :: l) l)
(Permutation (gv1 :: l) (selsort l gv1)), (Permutation (gv1 :: l) (l ++ l)), (Permutation (gv1 :: l) []), (Permutation (selection_sort l) l), (Permutation (selection_sort l) (gv1 :: l)), (Permutation (selection_sort l) (selsort l gv1)), (Permutation (selection_sort l) (l ++ l)), (Permutation (selection_sort l) []), (Permutation (selsort l gv1) l), (Permutation (selsort l gv1) (gv1 :: l))
(Permutation (selsort l gv1) (l ++ l)), (Permutation (selsort l gv1) []), (Permutation (l ++ l) l), (Permutation (l ++ l) (gv1 :: l)), (Permutation (l ++ l) (selection_sort l)), (Permutation (l ++ l) (selsort l gv1)), (Permutation (l ++ l) []), (Permutation [] l), (Permutation [] (gv1 :: l)), (Permutation [] (selection_sort l))
(Permutation [] (l ++ l)), (In gv1 (gv1 :: l)), (In gv1 (selection_sort l)), (In gv1 (selsort l gv1)), (In gv1 (l ++ l)), (In (length l) l), (In (length l) (gv1 :: l)), (In (length l) (selection_sort l)), (In (length l) (selsort l gv1)), (In (length l) (l ++ l))
(length l < gv1), (gv1 <= length l), (length l <= gv1), (~ gv1 <=* l), (~ sorted l), (~ Permutation l l), (~ In gv1 l), (~ gv1 < gv1), (~ gv1 <= gv1), (gv1 <> gv1)
(None = Some l), (gv1 :: l = l), (gv1 :: l = selection_sort l), (gv1 :: l = selsort l gv1), (gv1 :: l = l ++ l), (gv1 :: l = []), (selection_sort l = l), (selection_sort l = l ++ l), (selsort l gv1 = l), (selsort l gv1 = selection_sort l)
(l ++ l = l), ([] = l), ([] = selection_sort l), ([] = selsort l gv1), ([] = l ++ l), (None = Some gv1), ((gv1, l) = select gv1 l), (length l = gv1)

Label: 2 (3)
(sorted l), (l = l), (false = sorted_bool l), (true = sorted_bool l), (sorted (selection_sort l)), (Permutation l (selection_sort l)), (Permutation (selection_sort l) l), (~ sorted l), (l <> l), (None = Some l)


------------------------------ SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 140.197 seconds


Label: 0 (0)
(gv0 = l), (Permutation l gv0), (Permutation (selection_sort l) gv0), (selection_sort gv0 = l)

Label: 0 (1)
(gv0 = l), (Permutation l gv0), (Permutation (selection_sort l) gv0), (selection_sort gv0 = l)

Label: 1 (2)
(Permutation l (selsort l gv1)), (Permutation (selsort l gv1) (selection_sort l)), (length l <= gv1), (selsort l gv1 = selection_sort l), (length l = gv1)

Label: 2 (3)


------------------------------ PROCESSED SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 204.355 seconds


(length l = 0)
 - (length l = 0)

(length l = gv1)
 - (length l = gv1)
 - (Permutation (selsort l gv1) (selection_sort l))
 - (Permutation l (selsort l gv1))
 - (selsort l gv1 = selection_sort l)
 - (length l <= gv1)

(selsort l 0 = gv0)
 - (selsort l 0 = gv0)
 - (Permutation l gv0)
 - (Permutation (selection_sort l) gv0)
 - (gv0 = l)
 - (selection_sort gv0 = l)


------------------------------ FINAL RESULTS ------------------------------
Time Elapsed From Start: 204.355 seconds

Number of Result Pairs Returned: 5

(length l = gv1 -> Permutation l (selsort l gv1))

(length l = gv1 -> Permutation (selsort l gv1) (selection_sort l))
(Permutation (selsort l gv1) (selection_sort l) ->  Permutation l (selsort l gv1))

(length l = gv1 -> selsort l gv1 = selection_sort l)
(selsort l gv1 = selection_sort l -> Permutation l (selsort l gv1))

(length l = gv1 -> length l <= gv1)
(length l <= gv1 -> Permutation l (selsort l gv1))

(length l = 0 -> Permutation l (selsort l 0))
