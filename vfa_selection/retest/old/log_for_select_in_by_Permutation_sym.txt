Lemma Synthesis Execution Log and Results
--------------------------------------------------------------------
--------------------------------------------------------------------

Label: Initial State
Assumptions: 
 -- (forall (y x : nat) (bl : list nat), select x al = (y, bl) -> In y (x :: al))
 -- (x > a)
 -- ((let (j, l') := select a al in (j, x :: l')) = (y, bl))
 -- (select x (a :: al) = (y, bl))

----------------------------------
Goal: (Permutation (y :: bl) (x :: a :: al))


------------------------------ GENERALIZED VARIABLES ------------------------------
Time Elapsed From Start: 0. seconds

gv1 : (list nat) = (x :: a :: al)
gv2 : (list nat) = (a :: al)
gv0 : (list nat) = (y :: bl)


------------------------------ GENERALIZATIONS ------------------------------
  NOTE: The assumptions have been restricted to be only the necessary assumptions.
Time Elapsed From Start: 125.409 seconds

Label: Generalization #0
Assumptions: 
 -- (y :: bl = gv0)
 -- ((let (j, l') := select a al in (j, x :: l')) = (y, bl))

----------------------------------
Goal: (Permutation gv0 (x :: a :: al))
Case: 4

Label: Generalization #1
Assumptions: 
 -- (select x gv2 = (y, bl))

----------------------------------
Goal: (Permutation (y :: bl) (x :: gv2))
Case: 3

Label: Generalization #2
Assumptions: 
 -- (x :: a :: al = gv1)
 -- ((let (j, l') := select a al in (j, x :: l')) = (y, bl))

----------------------------------
Goal: (Permutation (y :: bl) gv1)
Case: 4

Label: Generalization #3
Assumptions: 
 -- ((let (j, l') := select a al in (j, x :: l')) = (y, bl))

----------------------------------
Goal: (Permutation (y :: bl) (x :: a :: al))
Case: 3



------------------------------ SYNTHESIS PROBLEMS ------------------------------
Time Elapsed From Start: 126.208 seconds

 -- functions to consider -- 
@eq : (forall A : Type, A -> A -> Prop)
not : (Prop -> Prop)
@fst : (forall A B : Type, A * B -> A)
@snd : (forall A B : Type, A * B -> B)
length : (forall A : Type, list A -> nat)
app : (forall A : Type, list A -> list A -> list A)
le : (nat -> nat -> Prop)
lt : (nat -> nat -> Prop)
In : (forall A : Type, A -> list A -> Prop)
existsb : (forall A : Type, (A -> bool) -> list A -> bool)
forallb : (forall A : Type, (A -> bool) -> list A -> bool)
Forall : (forall A : Type, (A -> Prop) -> list A -> Prop)
nodup : (forall A : Type, (forall x y : A, {x = y} + {x <> y}) -> list A -> list A)
Permutation : (forall A : Type, list A -> list A -> Prop)
sorted : (list nat -> Prop)
is_a_sorting_algorithm : ((list nat -> list nat) -> Prop)
select : (nat -> list nat -> nat * list nat)
selsort : (list nat -> nat -> list nat)
selection_sort : (list nat -> list nat)
le_all : (nat -> list nat -> Prop)
sorted_bool : (list nat -> bool)

Label: 1 (0)
Abducted Assumption: (select x gv2 = (y, bl))
Positive Examples:
   [a := 2; al := [2]; bl := [3]; gv2 := [3]; x := 3; y := 3]
   [a := 2; al := [0; 3]; bl := [0]; gv2 := [0]; x := 0; y := 0]
   [a := 0; al := [1]; bl := [1]; gv2 := [1]; x := 1; y := 1]
   [a := 0; al := [0; 0]; bl := []; gv2 := []; x := 0; y := 0]
   [a := 2; al := [2; 2]; bl := []; gv2 := []; x := 2; y := 2]
   [a := 2; al := [1; 2]; bl := []; gv2 := []; x := 2; y := 2]
   [a := 2; al := [2; 4; 3; 3]; bl := []; gv2 := []; x := 0; y := 0]
   [a := 0; al := [3; 0]; bl := []; gv2 := []; x := 2; y := 2]
   [a := 1; al := [0; 4; 2]; bl := []; gv2 := []; x := 3; y := 3]
   [a := 0; al := [0]; bl := [2; 2]; gv2 := [1; 2]; x := 2; y := 1]
   etc ...

Negative Examples:
   [a := 4; al := [1; 1; 0; 0]; bl := [3; 2; 1; 1]; gv2 := []; x := 2; y := 0]
   [a := 0; al := [0; 0]; bl := [2; 1]; gv2 := [2]; x := 1; y := 2]
   [a := 6; al := [6; 0; 3; 0; 0]; bl := [1]; gv2 := []; x := 3; y := 2]
   [a := 4; al := [4; 2]; bl := [4; 5; 1]; gv2 := [2; 2; 0; 0; 3]; x := 1; y := 3]
   [a := 0; al := [4; 0]; bl := [1; 3]; gv2 := [1; 2; 2]; x := 3; y := 2]
   [a := 1; al := [2]; bl := [0; 3; 0]; gv2 := [3; 0; 2]; x := 3; y := 2]
   [a := 1; al := [0]; bl := []; gv2 := [2]; x := 0; y := 1]
   [a := 2; al := [1; 4]; bl := [4; 1]; gv2 := [5; 5; 0; 6; 2; 3]; x := 6; y := 1]
   [a := 0; al := [3; 3]; bl := [5; 5; 3]; gv2 := [1; 0]; x := 4; y := 5]
   [a := 0; al := [3; 3; 2; 0]; bl := [2; 2; 3]; gv2 := [2; 2; 0]; x := 3; y := 2]
   etc ...


Label: 3 (1)
Abducted Assumption: ((let (j, l') := select a al in (j, x :: l')) = (y, bl))
Positive Examples:
   [a := 1; al := []; bl := [3]; x := 3; y := 1]
   [a := 1; al := [1]; bl := [2; 1]; x := 2; y := 1]
   [a := 0; al := []; bl := [3]; x := 3; y := 0]
   [a := 0; al := []; bl := [2]; x := 2; y := 0]
   [a := 2; al := []; bl := [2]; x := 2; y := 2]
   [a := 2; al := [0]; bl := [1; 2]; x := 1; y := 0]
   [a := 2; al := []; bl := [0]; x := 0; y := 2]
   [a := 1; al := [2]; bl := [2; 2]; x := 2; y := 1]
   [a := 2; al := []; bl := [1]; x := 1; y := 2]
   [a := 1; al := [1]; bl := [0; 1]; x := 0; y := 1]
   etc ...

Negative Examples:
   [a := 0; al := [1; 1]; bl := [2; 2; 0; 4]; x := 1; y := 3]
   [a := 0; al := [3; 5; 5]; bl := [6; 0; 4; 5]; x := 1; y := 4]
   [a := 2; al := [2; 0; 5; 4]; bl := [5; 3]; x := 0; y := 5]
   [a := 3; al := [3; 3; 2; 1]; bl := [3]; x := 0; y := 4]
   [a := 0; al := []; bl := [3; 2]; x := 2; y := 3]
   [a := 2; al := []; bl := [1]; x := 0; y := 2]
   [a := 6; al := [6; 0; 6; 1]; bl := [0]; x := 2; y := 4]
   [a := 4; al := [4]; bl := [5; 0; 4; 1; 4]; x := 4; y := 3]
   [a := 1; al := [2; 1; 2; 2]; bl := [0; 3]; x := 4; y := 1]
   [a := 2; al := [1]; bl := [1; 1]; x := 2; y := 1]
   etc ...



------------------------------ TERMS CONSIDERED IN SYNTHESIS ------------------------------
Time Elapsed From Start: 127.149 seconds


Label: 1 (0)
(x <=* gv2), (x <=* bl), (y <=* gv2), (y <=* bl), (sorted gv2), (sorted bl), (Permutation gv2 gv2), (Permutation gv2 bl), (Permutation bl gv2), (Permutation bl bl)
(In x bl), (In y gv2), (In y bl), (x < x), (x < y), (y < x), (y < y), (x <= x), (x <= y), (y <= x)
(gv2 = gv2), (gv2 = bl), (bl = gv2), (bl = bl), (x = x), (x = y), (y = x), (y = y), (false = sorted_bool gv2), (false = sorted_bool bl)
(true = sorted_bool bl), (x <=* x :: gv2), (x <=* x :: bl), (x <=* y :: gv2), (x <=* y :: bl), (x <=* selection_sort gv2), (x <=* selection_sort bl), (x <=* selsort gv2 x), (x <=* selsort gv2 y), (x <=* selsort bl x)
(x <=* gv2 ++ gv2), (x <=* gv2 ++ bl), (x <=* bl ++ gv2), (x <=* bl ++ bl), (x <=* []), (y <=* x :: gv2), (y <=* x :: bl), (y <=* y :: gv2), (y <=* y :: bl), (y <=* selection_sort gv2)
(y <=* selsort gv2 x), (y <=* selsort gv2 y), (y <=* selsort bl x), (y <=* selsort bl y), (y <=* gv2 ++ gv2), (y <=* gv2 ++ bl), (y <=* bl ++ gv2), (y <=* bl ++ bl), (y <=* []), (length gv2 <=* gv2)
(length gv2 <=* x :: gv2), (length gv2 <=* x :: bl), (length gv2 <=* y :: gv2), (length gv2 <=* y :: bl), (length gv2 <=* selection_sort gv2), (length gv2 <=* selection_sort bl), (length gv2 <=* selsort gv2 x), (length gv2 <=* selsort gv2 y), (length gv2 <=* selsort bl x), (length gv2 <=* selsort bl y)
(length gv2 <=* gv2 ++ bl), (length gv2 <=* bl ++ gv2), (length gv2 <=* bl ++ bl), (length gv2 <=* []), (length bl <=* gv2), (length bl <=* bl), (length bl <=* x :: gv2), (length bl <=* x :: bl), (length bl <=* y :: gv2), (length bl <=* y :: bl)
(length bl <=* selection_sort bl), (length bl <=* selsort gv2 x), (length bl <=* selsort gv2 y), (length bl <=* selsort bl x), (length bl <=* selsort bl y), (length bl <=* gv2 ++ gv2), (length bl <=* gv2 ++ bl), (length bl <=* bl ++ gv2), (length bl <=* bl ++ bl), (length bl <=* [])
(sorted (x :: bl)), (sorted (y :: gv2)), (sorted (y :: bl)), (sorted (selection_sort gv2)), (sorted (selection_sort bl)), (sorted (selsort gv2 x)), (sorted (selsort gv2 y)), (sorted (selsort bl x)), (sorted (selsort bl y)), (sorted (gv2 ++ gv2))
(sorted (bl ++ gv2)), (sorted (bl ++ bl)), (sorted []), (Permutation gv2 (x :: gv2)), (Permutation gv2 (x :: bl)), (Permutation gv2 (y :: gv2)), (Permutation gv2 (y :: bl)), (Permutation gv2 (selection_sort gv2)), (Permutation gv2 (selection_sort bl)), (Permutation gv2 (selsort gv2 x))
(Permutation gv2 (selsort bl x)), (Permutation gv2 (selsort bl y)), (Permutation gv2 (gv2 ++ gv2)), (Permutation gv2 (gv2 ++ bl)), (Permutation gv2 (bl ++ gv2)), (Permutation gv2 (bl ++ bl)), (Permutation gv2 []), (Permutation bl (x :: gv2)), (Permutation bl (x :: bl)), (Permutation bl (y :: gv2))
(Permutation bl (selection_sort gv2)), (Permutation bl (selection_sort bl)), (Permutation bl (selsort gv2 x)), (Permutation bl (selsort gv2 y)), (Permutation bl (selsort bl x)), (Permutation bl (selsort bl y)), (Permutation bl (gv2 ++ gv2)), (Permutation bl (gv2 ++ bl)), (Permutation bl (bl ++ gv2)), (Permutation bl (bl ++ bl))
(Permutation (x :: gv2) gv2), (Permutation (x :: gv2) bl), (Permutation (x :: gv2) (x :: bl)), (Permutation (x :: gv2) (y :: gv2)), (Permutation (x :: gv2) (y :: bl)), (Permutation (x :: gv2) (selection_sort gv2)), (Permutation (x :: gv2) (selection_sort bl)), (Permutation (x :: gv2) (selsort gv2 x)), (Permutation (x :: gv2) (selsort gv2 y)), (Permutation (x :: gv2) (selsort bl x))
(Permutation (x :: gv2) (gv2 ++ gv2)), (Permutation (x :: gv2) (gv2 ++ bl)), (Permutation (x :: gv2) (bl ++ gv2)), (Permutation (x :: gv2) (bl ++ bl)), (Permutation (x :: gv2) []), (Permutation (x :: bl) gv2), (Permutation (x :: bl) bl), (Permutation (x :: bl) (x :: gv2)), (Permutation (x :: bl) (y :: gv2)), (Permutation (x :: bl) (y :: bl))
(Permutation (x :: bl) (selection_sort bl)), (Permutation (x :: bl) (selsort gv2 x)), (Permutation (x :: bl) (selsort gv2 y)), (Permutation (x :: bl) (selsort bl x)), (Permutation (x :: bl) (selsort bl y)), (Permutation (x :: bl) (gv2 ++ gv2)), (Permutation (x :: bl) (gv2 ++ bl)), (Permutation (x :: bl) (bl ++ gv2)), (Permutation (x :: bl) (bl ++ bl)), (Permutation (x :: bl) [])
(Permutation (y :: gv2) bl), (Permutation (y :: gv2) (x :: gv2)), (Permutation (y :: gv2) (x :: bl)), (Permutation (y :: gv2) (y :: bl)), (Permutation (y :: gv2) (selection_sort gv2)), (Permutation (y :: gv2) (selection_sort bl)), (Permutation (y :: gv2) (selsort gv2 x)), (Permutation (y :: gv2) (selsort gv2 y)), (Permutation (y :: gv2) (selsort bl x)), (Permutation (y :: gv2) (selsort bl y))
(Permutation (y :: gv2) (gv2 ++ bl)), (Permutation (y :: gv2) (bl ++ gv2)), (Permutation (y :: gv2) (bl ++ bl)), (Permutation (y :: gv2) []), (Permutation (y :: bl) gv2), (Permutation (y :: bl) bl), (Permutation (y :: bl) (x :: gv2)), (Permutation (y :: bl) (x :: bl)), (Permutation (y :: bl) (y :: gv2)), (Permutation (y :: bl) (selection_sort gv2))
(Permutation (y :: bl) (selsort gv2 x)), (Permutation (y :: bl) (selsort gv2 y)), (Permutation (y :: bl) (selsort bl x)), (Permutation (y :: bl) (selsort bl y)), (Permutation (y :: bl) (gv2 ++ gv2)), (Permutation (y :: bl) (gv2 ++ bl)), (Permutation (y :: bl) (bl ++ gv2)), (Permutation (y :: bl) (bl ++ bl)), (Permutation (y :: bl) []), (Permutation (selection_sort gv2) gv2)
(Permutation (selection_sort gv2) (x :: gv2)), (Permutation (selection_sort gv2) (x :: bl)), (Permutation (selection_sort gv2) (y :: gv2)), (Permutation (selection_sort gv2) (y :: bl)), (Permutation (selection_sort gv2) (selection_sort bl)), (Permutation (selection_sort gv2) (selsort gv2 x)), (Permutation (selection_sort gv2) (selsort gv2 y)), (Permutation (selection_sort gv2) (selsort bl x)), (Permutation (selection_sort gv2) (selsort bl y)), (Permutation (selection_sort gv2) (gv2 ++ gv2))
(Permutation (selection_sort gv2) (bl ++ gv2)), (Permutation (selection_sort gv2) (bl ++ bl)), (Permutation (selection_sort gv2) []), (Permutation (selection_sort bl) gv2), (Permutation (selection_sort bl) bl), (Permutation (selection_sort bl) (x :: gv2)), (Permutation (selection_sort bl) (x :: bl)), (Permutation (selection_sort bl) (y :: gv2)), (Permutation (selection_sort bl) (y :: bl)), (Permutation (selection_sort bl) (selection_sort gv2))
(Permutation (selection_sort bl) (selsort gv2 y)), (Permutation (selection_sort bl) (selsort bl x)), (Permutation (selection_sort bl) (selsort bl y)), (Permutation (selection_sort bl) (gv2 ++ gv2)), (Permutation (selection_sort bl) (gv2 ++ bl)), (Permutation (selection_sort bl) (bl ++ gv2)), (Permutation (selection_sort bl) (bl ++ bl)), (Permutation (selection_sort bl) []), (Permutation (selsort gv2 x) gv2), (Permutation (selsort gv2 x) bl)
(Permutation (selsort gv2 x) (x :: bl)), (Permutation (selsort gv2 x) (y :: gv2)), (Permutation (selsort gv2 x) (y :: bl)), (Permutation (selsort gv2 x) (selection_sort gv2)), (Permutation (selsort gv2 x) (selection_sort bl)), (Permutation (selsort gv2 x) (selsort gv2 y)), (Permutation (selsort gv2 x) (selsort bl x)), (Permutation (selsort gv2 x) (selsort bl y)), (Permutation (selsort gv2 x) (gv2 ++ gv2)), (Permutation (selsort gv2 x) (gv2 ++ bl))
(Permutation (selsort gv2 x) (bl ++ bl)), (Permutation (selsort gv2 x) []), (Permutation (selsort gv2 y) gv2), (Permutation (selsort gv2 y) bl), (Permutation (selsort gv2 y) (x :: gv2)), (Permutation (selsort gv2 y) (x :: bl)), (Permutation (selsort gv2 y) (y :: gv2)), (Permutation (selsort gv2 y) (y :: bl)), (Permutation (selsort gv2 y) (selection_sort gv2)), (Permutation (selsort gv2 y) (selection_sort bl))
(Permutation (selsort gv2 y) (selsort bl x)), (Permutation (selsort gv2 y) (selsort bl y)), (Permutation (selsort gv2 y) (gv2 ++ gv2)), (Permutation (selsort gv2 y) (gv2 ++ bl)), (Permutation (selsort gv2 y) (bl ++ gv2)), (Permutation (selsort gv2 y) (bl ++ bl)), (Permutation (selsort gv2 y) []), (Permutation (selsort bl x) gv2), (Permutation (selsort bl x) bl), (Permutation (selsort bl x) (x :: gv2))
(Permutation (selsort bl x) (y :: gv2)), (Permutation (selsort bl x) (y :: bl)), (Permutation (selsort bl x) (selection_sort gv2)), (Permutation (selsort bl x) (selection_sort bl)), (Permutation (selsort bl x) (selsort gv2 x)), (Permutation (selsort bl x) (selsort gv2 y)), (Permutation (selsort bl x) (selsort bl y)), (Permutation (selsort bl x) (gv2 ++ gv2)), (Permutation (selsort bl x) (gv2 ++ bl)), (Permutation (selsort bl x) (bl ++ gv2))
(Permutation (selsort bl x) []), (Permutation (selsort bl y) gv2), (Permutation (selsort bl y) bl), (Permutation (selsort bl y) (x :: gv2)), (Permutation (selsort bl y) (x :: bl)), (Permutation (selsort bl y) (y :: gv2)), (Permutation (selsort bl y) (y :: bl)), (Permutation (selsort bl y) (selection_sort gv2)), (Permutation (selsort bl y) (selection_sort bl)), (Permutation (selsort bl y) (selsort gv2 x))
(Permutation (selsort bl y) (selsort bl x)), (Permutation (selsort bl y) (gv2 ++ gv2)), (Permutation (selsort bl y) (gv2 ++ bl)), (Permutation (selsort bl y) (bl ++ gv2)), (Permutation (selsort bl y) (bl ++ bl)), (Permutation (selsort bl y) []), (Permutation (gv2 ++ gv2) gv2), (Permutation (gv2 ++ gv2) bl), (Permutation (gv2 ++ gv2) (x :: gv2)), (Permutation (gv2 ++ gv2) (x :: bl))
(Permutation (gv2 ++ gv2) (y :: bl)), (Permutation (gv2 ++ gv2) (selection_sort gv2)), (Permutation (gv2 ++ gv2) (selection_sort bl)), (Permutation (gv2 ++ gv2) (selsort gv2 x)), (Permutation (gv2 ++ gv2) (selsort gv2 y)), (Permutation (gv2 ++ gv2) (selsort bl x)), (Permutation (gv2 ++ gv2) (selsort bl y)), (Permutation (gv2 ++ gv2) (gv2 ++ bl)), (Permutation (gv2 ++ gv2) (bl ++ gv2)), (Permutation (gv2 ++ gv2) (bl ++ bl))
(Permutation (gv2 ++ bl) gv2), (Permutation (gv2 ++ bl) bl), (Permutation (gv2 ++ bl) (x :: gv2)), (Permutation (gv2 ++ bl) (x :: bl)), (Permutation (gv2 ++ bl) (y :: gv2)), (Permutation (gv2 ++ bl) (y :: bl)), (Permutation (gv2 ++ bl) (selection_sort gv2)), (Permutation (gv2 ++ bl) (selection_sort bl)), (Permutation (gv2 ++ bl) (selsort gv2 x)), (Permutation (gv2 ++ bl) (selsort gv2 y))
(Permutation (gv2 ++ bl) (selsort bl y)), (Permutation (gv2 ++ bl) (gv2 ++ gv2)), (Permutation (gv2 ++ bl) (bl ++ gv2)), (Permutation (gv2 ++ bl) (bl ++ bl)), (Permutation (gv2 ++ bl) []), (Permutation (bl ++ gv2) gv2), (Permutation (bl ++ gv2) bl), (Permutation (bl ++ gv2) (x :: gv2)), (Permutation (bl ++ gv2) (x :: bl)), (Permutation (bl ++ gv2) (y :: gv2))
(Permutation (bl ++ gv2) (selection_sort gv2)), (Permutation (bl ++ gv2) (selection_sort bl)), (Permutation (bl ++ gv2) (selsort gv2 x)), (Permutation (bl ++ gv2) (selsort gv2 y)), (Permutation (bl ++ gv2) (selsort bl x)), (Permutation (bl ++ gv2) (selsort bl y)), (Permutation (bl ++ gv2) (gv2 ++ gv2)), (Permutation (bl ++ gv2) (gv2 ++ bl)), (Permutation (bl ++ gv2) (bl ++ bl)), (Permutation (bl ++ gv2) [])
(Permutation (bl ++ bl) bl), (Permutation (bl ++ bl) (x :: gv2)), (Permutation (bl ++ bl) (x :: bl)), (Permutation (bl ++ bl) (y :: gv2)), (Permutation (bl ++ bl) (y :: bl)), (Permutation (bl ++ bl) (selection_sort gv2)), (Permutation (bl ++ bl) (selection_sort bl)), (Permutation (bl ++ bl) (selsort gv2 x)), (Permutation (bl ++ bl) (selsort gv2 y)), (Permutation (bl ++ bl) (selsort bl x))
(Permutation (bl ++ bl) (gv2 ++ gv2)), (Permutation (bl ++ bl) (gv2 ++ bl)), (Permutation (bl ++ bl) (bl ++ gv2)), (Permutation (bl ++ bl) []), (Permutation [] gv2), (Permutation [] bl), (Permutation [] (x :: gv2)), (Permutation [] (x :: bl)), (Permutation [] (y :: gv2)), (Permutation [] (y :: bl))
(Permutation [] (selection_sort bl)), (Permutation [] (selsort gv2 x)), (Permutation [] (selsort gv2 y)), (Permutation [] (selsort bl x)), (Permutation [] (selsort bl y)), (Permutation [] (gv2 ++ gv2)), (Permutation [] (gv2 ++ bl)), (Permutation [] (bl ++ gv2)), (Permutation [] (bl ++ bl)), (In x (x :: gv2))
(In x (y :: gv2)), (In x (y :: bl)), (In x (selection_sort gv2)), (In x (selection_sort bl)), (In x (selsort gv2 x)), (In x (selsort gv2 y)), (In x (selsort bl x)), (In x (selsort bl y)), (In x (gv2 ++ gv2)), (In x (gv2 ++ bl))
(In x (bl ++ bl)), (In y (x :: gv2)), (In y (x :: bl)), (In y (y :: gv2)), (In y (y :: bl)), (In y (selection_sort gv2)), (In y (selection_sort bl)), (In y (selsort gv2 x)), (In y (selsort gv2 y)), (In y (selsort bl x))
(In y (gv2 ++ gv2)), (In y (gv2 ++ bl)), (In y (bl ++ gv2)), (In y (bl ++ bl)), (In (length gv2) gv2), (In (length gv2) bl), (In (length gv2) (x :: gv2)), (In (length gv2) (x :: bl)), (In (length gv2) (y :: gv2)), (In (length gv2) (y :: bl))
(In (length gv2) (selection_sort bl)), (In (length gv2) (selsort gv2 x)), (In (length gv2) (selsort gv2 y)), (In (length gv2) (selsort bl x)), (In (length gv2) (selsort bl y)), (In (length gv2) (gv2 ++ gv2)), (In (length gv2) (gv2 ++ bl)), (In (length gv2) (bl ++ gv2)), (In (length gv2) (bl ++ bl)), (In (length bl) gv2)
(In (length bl) (x :: gv2)), (In (length bl) (x :: bl)), (In (length bl) (y :: gv2)), (In (length bl) (y :: bl)), (In (length bl) (selection_sort gv2)), (In (length bl) (selection_sort bl)), (In (length bl) (selsort gv2 x)), (In (length bl) (selsort gv2 y)), (In (length bl) (selsort bl x)), (In (length bl) (selsort bl y))
(In (length bl) (gv2 ++ bl)), (In (length bl) (bl ++ gv2)), (In (length bl) (bl ++ bl)), (x < length gv2), (x < length bl), (y < length gv2), (y < length bl), (length gv2 < x), (length gv2 < y), (length gv2 < length bl)
(length bl < y), (length bl < length gv2), (x <= length gv2), (x <= length bl), (y <= length gv2), (y <= length bl), (length gv2 <= x), (length gv2 <= y), (length gv2 <= length bl), (length bl <= x)
(length bl <= length gv2), (~ x <=* gv2), (~ x <=* bl), (~ y <=* gv2), (~ y <=* bl), (~ sorted gv2), (~ sorted bl), (~ Permutation gv2 gv2), (~ Permutation gv2 bl), (~ Permutation bl gv2)
(~ In x gv2), (~ In x bl), (~ In y gv2), (~ In y bl), (~ x < x), (~ x < y), (~ y < x), (~ y < y), (~ x <= x), (~ x <= y)
(~ y <= y), (gv2 <> gv2), (gv2 <> bl), (bl <> gv2), (bl <> bl), (x <> x), (x <> y), (y <> x), (y <> y), (None = Some gv2)
(x :: gv2 = gv2), (x :: gv2 = bl), (x :: gv2 = selection_sort gv2), (x :: gv2 = selection_sort bl), (x :: gv2 = selsort gv2 x), (x :: gv2 = selsort gv2 y), (x :: gv2 = selsort bl x), (x :: gv2 = selsort bl y), (x :: gv2 = gv2 ++ gv2), (x :: gv2 = gv2 ++ bl)
(x :: gv2 = bl ++ bl), (x :: gv2 = []), (x :: bl = gv2), (x :: bl = bl), (x :: bl = selection_sort gv2), (x :: bl = selection_sort bl), (x :: bl = selsort gv2 x), (x :: bl = selsort gv2 y), (x :: bl = selsort bl x), (x :: bl = selsort bl y)
(x :: bl = gv2 ++ bl), (x :: bl = bl ++ gv2), (x :: bl = bl ++ bl), (x :: bl = []), (y :: gv2 = gv2), (y :: gv2 = bl), (y :: gv2 = selection_sort gv2), (y :: gv2 = selection_sort bl), (y :: gv2 = selsort gv2 x), (y :: gv2 = selsort gv2 y)
(y :: gv2 = selsort bl y), (y :: gv2 = gv2 ++ gv2), (y :: gv2 = gv2 ++ bl), (y :: gv2 = bl ++ gv2), (y :: gv2 = bl ++ bl), (y :: gv2 = []), (y :: bl = gv2), (y :: bl = bl), (y :: bl = selection_sort gv2), (y :: bl = selection_sort bl)
(y :: bl = selsort gv2 y), (y :: bl = selsort bl x), (y :: bl = selsort bl y), (y :: bl = gv2 ++ gv2), (y :: bl = gv2 ++ bl), (y :: bl = bl ++ gv2), (y :: bl = bl ++ bl), (y :: bl = []), (selection_sort gv2 = gv2), (selection_sort gv2 = bl)
(selection_sort gv2 = gv2 ++ bl), (selection_sort gv2 = bl ++ gv2), (selection_sort gv2 = bl ++ bl), (selection_sort bl = gv2), (selection_sort bl = bl), (selection_sort bl = gv2 ++ gv2), (selection_sort bl = gv2 ++ bl), (selection_sort bl = bl ++ gv2), (selection_sort bl = bl ++ bl), (selsort gv2 x = gv2)
(selsort gv2 x = selection_sort gv2), (selsort gv2 x = selection_sort bl), (selsort gv2 x = gv2 ++ gv2), (selsort gv2 x = gv2 ++ bl), (selsort gv2 x = bl ++ gv2), (selsort gv2 x = bl ++ bl), (selsort gv2 y = gv2), (selsort gv2 y = bl), (selsort gv2 y = selection_sort gv2), (selsort gv2 y = selection_sort bl)
(selsort gv2 y = gv2 ++ bl), (selsort gv2 y = bl ++ gv2), (selsort gv2 y = bl ++ bl), (selsort bl x = gv2), (selsort bl x = bl), (selsort bl x = selection_sort gv2), (selsort bl x = selection_sort bl), (selsort bl x = gv2 ++ gv2), (selsort bl x = gv2 ++ bl), (selsort bl x = bl ++ gv2)
(selsort bl y = gv2), (selsort bl y = bl), (selsort bl y = selection_sort gv2), (selsort bl y = selection_sort bl), (selsort bl y = gv2 ++ gv2), (selsort bl y = gv2 ++ bl), (selsort bl y = bl ++ gv2), (selsort bl y = bl ++ bl), (gv2 ++ gv2 = gv2), (gv2 ++ gv2 = bl)
(gv2 ++ bl = bl), (bl ++ gv2 = gv2), (bl ++ gv2 = bl), (bl ++ bl = gv2), (bl ++ bl = bl), ([] = gv2), ([] = bl), ([] = selection_sort gv2), ([] = selection_sort bl), ([] = selsort gv2 x)
([] = selsort bl x), ([] = selsort bl y), ([] = gv2 ++ gv2), ([] = gv2 ++ bl), ([] = bl ++ gv2), ([] = bl ++ bl), (None = Some x), (None = Some y), ((x, gv2) = select x gv2), ((x, gv2) = select x bl)
((x, gv2) = select y bl), ((x, bl) = select x gv2), ((x, bl) = select x bl), ((x, bl) = select y gv2), ((x, bl) = select y bl), ((y, gv2) = select x gv2), ((y, gv2) = select x bl), ((y, gv2) = select y gv2), ((y, gv2) = select y bl), ((y, bl) = select x gv2)
((y, bl) = select y gv2), ((y, bl) = select y bl), (length gv2 = x), (length gv2 = y), (length bl = x), (length bl = y)

Label: 3 (1)
(a <=* al), (a <=* bl), (x <=* al), (x <=* bl), (y <=* al), (y <=* bl), (sorted al), (sorted bl), (Permutation al al), (Permutation al bl)
(Permutation bl bl), (In a al), (In a bl), (In x al), (In x bl), (In y al), (In y bl), (a < a), (a < x), (a < y)
(x < x), (x < y), (y < a), (y < x), (y < y), (a <= a), (a <= x), (a <= y), (x <= a), (x <= x)
(y <= a), (y <= x), (y <= y), (al = al), (al = bl), (bl = al), (bl = bl), (a = a), (a = x), (a = y)
(x = x), (x = y), (y = a), (y = x), (y = y), (false = sorted_bool al), (false = sorted_bool bl), (true = sorted_bool al), (true = sorted_bool bl), (a <=* a :: al)
(a <=* x :: al), (a <=* x :: bl), (a <=* y :: al), (a <=* y :: bl), (a <=* selection_sort al), (a <=* selection_sort bl), (a <=* selsort al a), (a <=* selsort al x), (a <=* selsort al y), (a <=* selsort bl a)
(a <=* selsort bl y), (a <=* al ++ al), (a <=* al ++ bl), (a <=* bl ++ al), (a <=* bl ++ bl), (a <=* []), (x <=* a :: al), (x <=* a :: bl), (x <=* x :: al), (x <=* x :: bl)
(x <=* y :: bl), (x <=* selection_sort al), (x <=* selection_sort bl), (x <=* selsort al a), (x <=* selsort al x), (x <=* selsort al y), (x <=* selsort bl a), (x <=* selsort bl x), (x <=* selsort bl y), (x <=* al ++ al)
(x <=* bl ++ al), (x <=* bl ++ bl), (x <=* []), (y <=* a :: al), (y <=* a :: bl), (y <=* x :: al), (y <=* x :: bl), (y <=* y :: al), (y <=* y :: bl), (y <=* selection_sort al)
(y <=* selsort al a), (y <=* selsort al x), (y <=* selsort al y), (y <=* selsort bl a), (y <=* selsort bl x), (y <=* selsort bl y), (y <=* al ++ al), (y <=* al ++ bl), (y <=* bl ++ al), (y <=* bl ++ bl)
(length al <=* al), (length al <=* bl), (length al <=* a :: al), (length al <=* a :: bl), (length al <=* x :: al), (length al <=* x :: bl), (length al <=* y :: al), (length al <=* y :: bl), (length al <=* selection_sort al), (length al <=* selection_sort bl)
(length al <=* selsort al x), (length al <=* selsort al y), (length al <=* selsort bl a), (length al <=* selsort bl x), (length al <=* selsort bl y), (length al <=* al ++ al), (length al <=* al ++ bl), (length al <=* bl ++ al), (length al <=* bl ++ bl), (length al <=* [])
(length bl <=* bl), (length bl <=* a :: al), (length bl <=* a :: bl), (length bl <=* x :: al), (length bl <=* x :: bl), (length bl <=* y :: al), (length bl <=* y :: bl), (length bl <=* selection_sort al), (length bl <=* selection_sort bl), (length bl <=* selsort al a)
(length bl <=* selsort al y), (length bl <=* selsort bl a), (length bl <=* selsort bl x), (length bl <=* selsort bl y), (length bl <=* al ++ al), (length bl <=* al ++ bl), (length bl <=* bl ++ al), (length bl <=* bl ++ bl), (length bl <=* []), (sorted (a :: al))
(sorted (x :: al)), (sorted (x :: bl)), (sorted (y :: al)), (sorted (y :: bl)), (sorted (selection_sort al)), (sorted (selection_sort bl)), (sorted (selsort al a)), (sorted (selsort al x)), (sorted (selsort al y)), (sorted (selsort bl a))
(sorted (selsort bl y)), (sorted (al ++ al)), (sorted (al ++ bl)), (sorted (bl ++ al)), (sorted (bl ++ bl)), (sorted []), (Permutation al (a :: al)), (Permutation al (a :: bl)), (Permutation al (x :: al)), (Permutation al (x :: bl))
(Permutation al (y :: bl)), (Permutation al (selection_sort al)), (Permutation al (selection_sort bl)), (Permutation al (selsort al a)), (Permutation al (selsort al x)), (Permutation al (selsort al y)), (Permutation al (selsort bl a)), (Permutation al (selsort bl x)), (Permutation al (selsort bl y)), (Permutation al (al ++ al))
(Permutation al (bl ++ al)), (Permutation al (bl ++ bl)), (Permutation al []), (Permutation bl (a :: al)), (Permutation bl (a :: bl)), (Permutation bl (x :: al)), (Permutation bl (x :: bl)), (Permutation bl (y :: al)), (Permutation bl (y :: bl)), (Permutation bl (selection_sort al))
(Permutation bl (selsort al a)), (Permutation bl (selsort al x)), (Permutation bl (selsort al y)), (Permutation bl (selsort bl a)), (Permutation bl (selsort bl x)), (Permutation bl (selsort bl y)), (Permutation bl (al ++ al)), (Permutation bl (al ++ bl)), (Permutation bl (bl ++ al)), (Permutation bl (bl ++ bl))
(Permutation (a :: al) al), (Permutation (a :: al) bl), (Permutation (a :: al) (a :: bl)), (Permutation (a :: al) (x :: al)), (Permutation (a :: al) (x :: bl)), (Permutation (a :: al) (y :: al)), (Permutation (a :: al) (y :: bl)), (Permutation (a :: al) (selection_sort al)), (Permutation (a :: al) (selection_sort bl)), (Permutation (a :: al) (selsort al a))
(Permutation (a :: al) (selsort al y)), (Permutation (a :: al) (selsort bl a)), (Permutation (a :: al) (selsort bl x)), (Permutation (a :: al) (selsort bl y)), (Permutation (a :: al) (al ++ al)), (Permutation (a :: al) (al ++ bl)), (Permutation (a :: al) (bl ++ al)), (Permutation (a :: al) (bl ++ bl)), (Permutation (a :: al) []), (Permutation (a :: bl) al)
(Permutation (a :: bl) (a :: al)), (Permutation (a :: bl) (x :: al)), (Permutation (a :: bl) (x :: bl)), (Permutation (a :: bl) (y :: al)), (Permutation (a :: bl) (y :: bl)), (Permutation (a :: bl) (selection_sort al)), (Permutation (a :: bl) (selection_sort bl)), (Permutation (a :: bl) (selsort al a)), (Permutation (a :: bl) (selsort al x)), (Permutation (a :: bl) (selsort al y))
(Permutation (a :: bl) (selsort bl x)), (Permutation (a :: bl) (selsort bl y)), (Permutation (a :: bl) (al ++ al)), (Permutation (a :: bl) (al ++ bl)), (Permutation (a :: bl) (bl ++ al)), (Permutation (a :: bl) (bl ++ bl)), (Permutation (a :: bl) []), (Permutation (x :: al) al), (Permutation (x :: al) bl), (Permutation (x :: al) (a :: al))
(Permutation (x :: al) (x :: bl)), (Permutation (x :: al) (y :: al)), (Permutation (x :: al) (y :: bl)), (Permutation (x :: al) (selection_sort al)), (Permutation (x :: al) (selection_sort bl)), (Permutation (x :: al) (selsort al a)), (Permutation (x :: al) (selsort al x)), (Permutation (x :: al) (selsort al y)), (Permutation (x :: al) (selsort bl a)), (Permutation (x :: al) (selsort bl x))
(Permutation (x :: al) (al ++ al)), (Permutation (x :: al) (al ++ bl)), (Permutation (x :: al) (bl ++ al)), (Permutation (x :: al) (bl ++ bl)), (Permutation (x :: al) []), (Permutation (x :: bl) al), (Permutation (x :: bl) bl), (Permutation (x :: bl) (a :: al)), (Permutation (x :: bl) (a :: bl)), (Permutation (x :: bl) (x :: al))
(Permutation (x :: bl) (y :: bl)), (Permutation (x :: bl) (selection_sort al)), (Permutation (x :: bl) (selection_sort bl)), (Permutation (x :: bl) (selsort al a)), (Permutation (x :: bl) (selsort al x)), (Permutation (x :: bl) (selsort al y)), (Permutation (x :: bl) (selsort bl a)), (Permutation (x :: bl) (selsort bl x)), (Permutation (x :: bl) (selsort bl y)), (Permutation (x :: bl) (al ++ al))
(Permutation (x :: bl) (bl ++ al)), (Permutation (x :: bl) (bl ++ bl)), (Permutation (x :: bl) []), (Permutation (y :: al) al), (Permutation (y :: al) bl), (Permutation (y :: al) (a :: al)), (Permutation (y :: al) (a :: bl)), (Permutation (y :: al) (x :: al)), (Permutation (y :: al) (x :: bl)), (Permutation (y :: al) (y :: bl))
(Permutation (y :: al) (selection_sort bl)), (Permutation (y :: al) (selsort al a)), (Permutation (y :: al) (selsort al x)), (Permutation (y :: al) (selsort al y)), (Permutation (y :: al) (selsort bl a)), (Permutation (y :: al) (selsort bl x)), (Permutation (y :: al) (selsort bl y)), (Permutation (y :: al) (al ++ al)), (Permutation (y :: al) (al ++ bl)), (Permutation (y :: al) (bl ++ al))
(Permutation (y :: al) []), (Permutation (y :: bl) al), (Permutation (y :: bl) bl), (Permutation (y :: bl) (a :: al)), (Permutation (y :: bl) (a :: bl)), (Permutation (y :: bl) (x :: al)), (Permutation (y :: bl) (x :: bl)), (Permutation (y :: bl) (y :: al)), (Permutation (y :: bl) (selection_sort al)), (Permutation (y :: bl) (selection_sort bl))
(Permutation (y :: bl) (selsort al x)), (Permutation (y :: bl) (selsort al y)), (Permutation (y :: bl) (selsort bl a)), (Permutation (y :: bl) (selsort bl x)), (Permutation (y :: bl) (selsort bl y)), (Permutation (y :: bl) (al ++ al)), (Permutation (y :: bl) (al ++ bl)), (Permutation (y :: bl) (bl ++ al)), (Permutation (y :: bl) (bl ++ bl)), (Permutation (y :: bl) [])
(Permutation (selection_sort al) bl), (Permutation (selection_sort al) (a :: al)), (Permutation (selection_sort al) (a :: bl)), (Permutation (selection_sort al) (x :: al)), (Permutation (selection_sort al) (x :: bl)), (Permutation (selection_sort al) (y :: al)), (Permutation (selection_sort al) (y :: bl)), (Permutation (selection_sort al) (selection_sort bl)), (Permutation (selection_sort al) (selsort al a)), (Permutation (selection_sort al) (selsort al x))
(Permutation (selection_sort al) (selsort bl a)), (Permutation (selection_sort al) (selsort bl x)), (Permutation (selection_sort al) (selsort bl y)), (Permutation (selection_sort al) (al ++ al)), (Permutation (selection_sort al) (al ++ bl)), (Permutation (selection_sort al) (bl ++ al)), (Permutation (selection_sort al) (bl ++ bl)), (Permutation (selection_sort al) []), (Permutation (selection_sort bl) al), (Permutation (selection_sort bl) bl)
(Permutation (selection_sort bl) (a :: bl)), (Permutation (selection_sort bl) (x :: al)), (Permutation (selection_sort bl) (x :: bl)), (Permutation (selection_sort bl) (y :: al)), (Permutation (selection_sort bl) (y :: bl)), (Permutation (selection_sort bl) (selection_sort al)), (Permutation (selection_sort bl) (selsort al a)), (Permutation (selection_sort bl) (selsort al x)), (Permutation (selection_sort bl) (selsort al y)), (Permutation (selection_sort bl) (selsort bl a))
(Permutation (selection_sort bl) (selsort bl y)), (Permutation (selection_sort bl) (al ++ al)), (Permutation (selection_sort bl) (al ++ bl)), (Permutation (selection_sort bl) (bl ++ al)), (Permutation (selection_sort bl) (bl ++ bl)), (Permutation (selection_sort bl) []), (Permutation (selsort al a) al), (Permutation (selsort al a) bl), (Permutation (selsort al a) (a :: al)), (Permutation (selsort al a) (a :: bl))
(Permutation (selsort al a) (x :: bl)), (Permutation (selsort al a) (y :: al)), (Permutation (selsort al a) (y :: bl)), (Permutation (selsort al a) (selection_sort al)), (Permutation (selsort al a) (selection_sort bl)), (Permutation (selsort al a) (selsort al x)), (Permutation (selsort al a) (selsort al y)), (Permutation (selsort al a) (selsort bl a)), (Permutation (selsort al a) (selsort bl x)), (Permutation (selsort al a) (selsort bl y))
(Permutation (selsort al a) (al ++ bl)), (Permutation (selsort al a) (bl ++ al)), (Permutation (selsort al a) (bl ++ bl)), (Permutation (selsort al a) []), (Permutation (selsort al x) al), (Permutation (selsort al x) bl), (Permutation (selsort al x) (a :: al)), (Permutation (selsort al x) (a :: bl)), (Permutation (selsort al x) (x :: al)), (Permutation (selsort al x) (x :: bl))
(Permutation (selsort al x) (y :: bl)), (Permutation (selsort al x) (selection_sort al)), (Permutation (selsort al x) (selection_sort bl)), (Permutation (selsort al x) (selsort al a)), (Permutation (selsort al x) (selsort al y)), (Permutation (selsort al x) (selsort bl a)), (Permutation (selsort al x) (selsort bl x)), (Permutation (selsort al x) (selsort bl y)), (Permutation (selsort al x) (al ++ al)), (Permutation (selsort al x) (al ++ bl))
(Permutation (selsort al x) (bl ++ bl)), (Permutation (selsort al x) []), (Permutation (selsort al y) al), (Permutation (selsort al y) bl), (Permutation (selsort al y) (a :: al)), (Permutation (selsort al y) (a :: bl)), (Permutation (selsort al y) (x :: al)), (Permutation (selsort al y) (x :: bl)), (Permutation (selsort al y) (y :: al)), (Permutation (selsort al y) (y :: bl))
(Permutation (selsort al y) (selection_sort bl)), (Permutation (selsort al y) (selsort al a)), (Permutation (selsort al y) (selsort al x)), (Permutation (selsort al y) (selsort bl a)), (Permutation (selsort al y) (selsort bl x)), (Permutation (selsort al y) (selsort bl y)), (Permutation (selsort al y) (al ++ al)), (Permutation (selsort al y) (al ++ bl)), (Permutation (selsort al y) (bl ++ al)), (Permutation (selsort al y) (bl ++ bl))
(Permutation (selsort bl a) al), (Permutation (selsort bl a) bl), (Permutation (selsort bl a) (a :: al)), (Permutation (selsort bl a) (a :: bl)), (Permutation (selsort bl a) (x :: al)), (Permutation (selsort bl a) (x :: bl)), (Permutation (selsort bl a) (y :: al)), (Permutation (selsort bl a) (y :: bl)), (Permutation (selsort bl a) (selection_sort al)), (Permutation (selsort bl a) (selection_sort bl))
(Permutation (selsort bl a) (selsort al x)), (Permutation (selsort bl a) (selsort al y)), (Permutation (selsort bl a) (selsort bl x)), (Permutation (selsort bl a) (selsort bl y)), (Permutation (selsort bl a) (al ++ al)), (Permutation (selsort bl a) (al ++ bl)), (Permutation (selsort bl a) (bl ++ al)), (Permutation (selsort bl a) (bl ++ bl)), (Permutation (selsort bl a) []), (Permutation (selsort bl x) al)
(Permutation (selsort bl x) (a :: al)), (Permutation (selsort bl x) (a :: bl)), (Permutation (selsort bl x) (x :: al)), (Permutation (selsort bl x) (x :: bl)), (Permutation (selsort bl x) (y :: al)), (Permutation (selsort bl x) (y :: bl)), (Permutation (selsort bl x) (selection_sort al)), (Permutation (selsort bl x) (selection_sort bl)), (Permutation (selsort bl x) (selsort al a)), (Permutation (selsort bl x) (selsort al x))
(Permutation (selsort bl x) (selsort bl a)), (Permutation (selsort bl x) (selsort bl y)), (Permutation (selsort bl x) (al ++ al)), (Permutation (selsort bl x) (al ++ bl)), (Permutation (selsort bl x) (bl ++ al)), (Permutation (selsort bl x) (bl ++ bl)), (Permutation (selsort bl x) []), (Permutation (selsort bl y) al), (Permutation (selsort bl y) bl), (Permutation (selsort bl y) (a :: al))
(Permutation (selsort bl y) (x :: al)), (Permutation (selsort bl y) (x :: bl)), (Permutation (selsort bl y) (y :: al)), (Permutation (selsort bl y) (y :: bl)), (Permutation (selsort bl y) (selection_sort al)), (Permutation (selsort bl y) (selection_sort bl)), (Permutation (selsort bl y) (selsort al a)), (Permutation (selsort bl y) (selsort al x)), (Permutation (selsort bl y) (selsort al y)), (Permutation (selsort bl y) (selsort bl a))
(Permutation (selsort bl y) (al ++ al)), (Permutation (selsort bl y) (al ++ bl)), (Permutation (selsort bl y) (bl ++ al)), (Permutation (selsort bl y) (bl ++ bl)), (Permutation (selsort bl y) []), (Permutation (al ++ al) al), (Permutation (al ++ al) bl), (Permutation (al ++ al) (a :: al)), (Permutation (al ++ al) (a :: bl)), (Permutation (al ++ al) (x :: al))
(Permutation (al ++ al) (y :: al)), (Permutation (al ++ al) (y :: bl)), (Permutation (al ++ al) (selection_sort al)), (Permutation (al ++ al) (selection_sort bl)), (Permutation (al ++ al) (selsort al a)), (Permutation (al ++ al) (selsort al x)), (Permutation (al ++ al) (selsort al y)), (Permutation (al ++ al) (selsort bl a)), (Permutation (al ++ al) (selsort bl x)), (Permutation (al ++ al) (selsort bl y))
(Permutation (al ++ al) (bl ++ al)), (Permutation (al ++ al) (bl ++ bl)), (Permutation (al ++ al) []), (Permutation (al ++ bl) al), (Permutation (al ++ bl) bl), (Permutation (al ++ bl) (a :: al)), (Permutation (al ++ bl) (a :: bl)), (Permutation (al ++ bl) (x :: al)), (Permutation (al ++ bl) (x :: bl)), (Permutation (al ++ bl) (y :: al))
(Permutation (al ++ bl) (selection_sort al)), (Permutation (al ++ bl) (selection_sort bl)), (Permutation (al ++ bl) (selsort al a)), (Permutation (al ++ bl) (selsort al x)), (Permutation (al ++ bl) (selsort al y)), (Permutation (al ++ bl) (selsort bl a)), (Permutation (al ++ bl) (selsort bl x)), (Permutation (al ++ bl) (selsort bl y)), (Permutation (al ++ bl) (al ++ al)), (Permutation (al ++ bl) (bl ++ al))
(Permutation (al ++ bl) []), (Permutation (bl ++ al) al), (Permutation (bl ++ al) bl), (Permutation (bl ++ al) (a :: al)), (Permutation (bl ++ al) (a :: bl)), (Permutation (bl ++ al) (x :: al)), (Permutation (bl ++ al) (x :: bl)), (Permutation (bl ++ al) (y :: al)), (Permutation (bl ++ al) (y :: bl)), (Permutation (bl ++ al) (selection_sort al))
(Permutation (bl ++ al) (selsort al a)), (Permutation (bl ++ al) (selsort al x)), (Permutation (bl ++ al) (selsort al y)), (Permutation (bl ++ al) (selsort bl a)), (Permutation (bl ++ al) (selsort bl x)), (Permutation (bl ++ al) (selsort bl y)), (Permutation (bl ++ al) (al ++ al)), (Permutation (bl ++ al) (al ++ bl)), (Permutation (bl ++ al) (bl ++ bl)), (Permutation (bl ++ al) [])
(Permutation (bl ++ bl) bl), (Permutation (bl ++ bl) (a :: al)), (Permutation (bl ++ bl) (a :: bl)), (Permutation (bl ++ bl) (x :: al)), (Permutation (bl ++ bl) (x :: bl)), (Permutation (bl ++ bl) (y :: al)), (Permutation (bl ++ bl) (y :: bl)), (Permutation (bl ++ bl) (selection_sort al)), (Permutation (bl ++ bl) (selection_sort bl)), (Permutation (bl ++ bl) (selsort al a))
(Permutation (bl ++ bl) (selsort al y)), (Permutation (bl ++ bl) (selsort bl a)), (Permutation (bl ++ bl) (selsort bl x)), (Permutation (bl ++ bl) (selsort bl y)), (Permutation (bl ++ bl) (al ++ al)), (Permutation (bl ++ bl) (al ++ bl)), (Permutation (bl ++ bl) (bl ++ al)), (Permutation (bl ++ bl) []), (Permutation [] al), (Permutation [] bl)
(Permutation [] (a :: bl)), (Permutation [] (x :: al)), (Permutation [] (x :: bl)), (Permutation [] (y :: al)), (Permutation [] (y :: bl)), (Permutation [] (selection_sort al)), (Permutation [] (selection_sort bl)), (Permutation [] (selsort al a)), (Permutation [] (selsort al x)), (Permutation [] (selsort al y))
(Permutation [] (selsort bl x)), (Permutation [] (selsort bl y)), (Permutation [] (al ++ al)), (Permutation [] (al ++ bl)), (Permutation [] (bl ++ al)), (Permutation [] (bl ++ bl)), (In a (a :: al)), (In a (a :: bl)), (In a (x :: al)), (In a (x :: bl))
(In a (y :: bl)), (In a (selection_sort al)), (In a (selection_sort bl)), (In a (selsort al a)), (In a (selsort al x)), (In a (selsort al y)), (In a (selsort bl a)), (In a (selsort bl x)), (In a (selsort bl y)), (In a (al ++ al))
(In a (bl ++ al)), (In a (bl ++ bl)), (In x (a :: al)), (In x (a :: bl)), (In x (x :: al)), (In x (x :: bl)), (In x (y :: al)), (In x (y :: bl)), (In x (selection_sort al)), (In x (selection_sort bl))
(In x (selsort al x)), (In x (selsort al y)), (In x (selsort bl a)), (In x (selsort bl x)), (In x (selsort bl y)), (In x (al ++ al)), (In x (al ++ bl)), (In x (bl ++ al)), (In x (bl ++ bl)), (In y (a :: al))
(In y (x :: al)), (In y (x :: bl)), (In y (y :: al)), (In y (y :: bl)), (In y (selection_sort al)), (In y (selection_sort bl)), (In y (selsort al a)), (In y (selsort al x)), (In y (selsort al y)), (In y (selsort bl a))
(In y (selsort bl y)), (In y (al ++ al)), (In y (al ++ bl)), (In y (bl ++ al)), (In y (bl ++ bl)), (In (length al) al), (In (length al) bl), (In (length al) (a :: al)), (In (length al) (a :: bl)), (In (length al) (x :: al))
(In (length al) (y :: al)), (In (length al) (y :: bl)), (In (length al) (selection_sort al)), (In (length al) (selection_sort bl)), (In (length al) (selsort al a)), (In (length al) (selsort al x)), (In (length al) (selsort al y)), (In (length al) (selsort bl a)), (In (length al) (selsort bl x)), (In (length al) (selsort bl y))
(In (length al) (al ++ bl)), (In (length al) (bl ++ al)), (In (length al) (bl ++ bl)), (In (length bl) al), (In (length bl) bl), (In (length bl) (a :: al)), (In (length bl) (a :: bl)), (In (length bl) (x :: al)), (In (length bl) (x :: bl)), (In (length bl) (y :: al))
(In (length bl) (selection_sort al)), (In (length bl) (selection_sort bl)), (In (length bl) (selsort al a)), (In (length bl) (selsort al x)), (In (length bl) (selsort al y)), (In (length bl) (selsort bl a)), (In (length bl) (selsort bl x)), (In (length bl) (selsort bl y)), (In (length bl) (al ++ al)), (In (length bl) (al ++ bl))
(In (length bl) (bl ++ bl)), (a < length al), (a < length bl), (x < length al), (x < length bl), (y < length al), (y < length bl), (length al < a), (length al < x), (length al < y)
(length bl < a), (length bl < x), (length bl < y), (length bl < length al), (a <= length al), (a <= length bl), (x <= length al), (x <= length bl), (y <= length al), (y <= length bl)
(length al <= x), (length al <= y), (length al <= length bl), (length bl <= a), (length bl <= x), (length bl <= y), (length bl <= length al), (~ a <=* al), (~ a <=* bl), (~ x <=* al)
(~ y <=* al), (~ y <=* bl), (~ sorted al), (~ sorted bl), (~ Permutation al al), (~ Permutation al bl), (~ Permutation bl al), (~ Permutation bl bl), (~ In a al), (~ In a bl)
(~ In x bl), (~ In y al), (~ In y bl), (~ a < a), (~ a < x), (~ a < y), (~ x < a), (~ x < x), (~ x < y), (~ y < a)
(~ y < y), (~ a <= a), (~ a <= x), (~ a <= y), (~ x <= a), (~ x <= x), (~ x <= y), (~ y <= a), (~ y <= x), (~ y <= y)
(al <> bl), (bl <> al), (bl <> bl), (a <> a), (a <> x), (a <> y), (x <> a), (x <> x), (x <> y), (y <> a)
(y <> y), (None = Some al), (None = Some bl), (a :: al = al), (a :: al = bl), (a :: al = selection_sort al), (a :: al = selection_sort bl), (a :: al = selsort al a), (a :: al = selsort al x), (a :: al = selsort al y)
(a :: al = selsort bl x), (a :: al = selsort bl y), (a :: al = al ++ al), (a :: al = al ++ bl), (a :: al = bl ++ al), (a :: al = bl ++ bl), (a :: al = []), (a :: bl = al), (a :: bl = bl), (a :: bl = selection_sort al)
(a :: bl = selsort al a), (a :: bl = selsort al x), (a :: bl = selsort al y), (a :: bl = selsort bl a), (a :: bl = selsort bl x), (a :: bl = selsort bl y), (a :: bl = al ++ al), (a :: bl = al ++ bl), (a :: bl = bl ++ al), (a :: bl = bl ++ bl)
(x :: al = al), (x :: al = bl), (x :: al = selection_sort al), (x :: al = selection_sort bl), (x :: al = selsort al a), (x :: al = selsort al x), (x :: al = selsort al y), (x :: al = selsort bl a), (x :: al = selsort bl x), (x :: al = selsort bl y)
(x :: al = al ++ bl), (x :: al = bl ++ al), (x :: al = bl ++ bl), (x :: al = []), (x :: bl = al), (x :: bl = bl), (x :: bl = selection_sort al), (x :: bl = selection_sort bl), (x :: bl = selsort al a), (x :: bl = selsort al x)
(x :: bl = selsort bl a), (x :: bl = selsort bl x), (x :: bl = selsort bl y), (x :: bl = al ++ al), (x :: bl = al ++ bl), (x :: bl = bl ++ al), (x :: bl = bl ++ bl), (x :: bl = []), (y :: al = al), (y :: al = bl)
(y :: al = selection_sort bl), (y :: al = selsort al a), (y :: al = selsort al x), (y :: al = selsort al y), (y :: al = selsort bl a), (y :: al = selsort bl x), (y :: al = selsort bl y), (y :: al = al ++ al), (y :: al = al ++ bl), (y :: al = bl ++ al)
(y :: al = []), (y :: bl = al), (y :: bl = bl), (y :: bl = selection_sort al), (y :: bl = selection_sort bl), (y :: bl = selsort al a), (y :: bl = selsort al x), (y :: bl = selsort al y), (y :: bl = selsort bl a), (y :: bl = selsort bl x)
(y :: bl = al ++ al), (y :: bl = al ++ bl), (y :: bl = bl ++ al), (y :: bl = bl ++ bl), (y :: bl = []), (selection_sort al = al), (selection_sort al = bl), (selection_sort al = al ++ al), (selection_sort al = al ++ bl), (selection_sort al = bl ++ al)
(selection_sort bl = al), (selection_sort bl = bl), (selection_sort bl = al ++ al), (selection_sort bl = al ++ bl), (selection_sort bl = bl ++ al), (selection_sort bl = bl ++ bl), (selsort al a = al), (selsort al a = bl), (selsort al a = selection_sort al), (selsort al a = selection_sort bl)
(selsort al a = al ++ bl), (selsort al a = bl ++ al), (selsort al a = bl ++ bl), (selsort al x = al), (selsort al x = bl), (selsort al x = selection_sort al), (selsort al x = selection_sort bl), (selsort al x = al ++ al), (selsort al x = al ++ bl), (selsort al x = bl ++ al)
(selsort al y = al), (selsort al y = bl), (selsort al y = selection_sort al), (selsort al y = selection_sort bl), (selsort al y = al ++ al), (selsort al y = al ++ bl), (selsort al y = bl ++ al), (selsort al y = bl ++ bl), (selsort bl a = al), (selsort bl a = bl)
(selsort bl a = selection_sort bl), (selsort bl a = al ++ al), (selsort bl a = al ++ bl), (selsort bl a = bl ++ al), (selsort bl a = bl ++ bl), (selsort bl x = al), (selsort bl x = bl), (selsort bl x = selection_sort al), (selsort bl x = selection_sort bl), (selsort bl x = al ++ al)
(selsort bl x = bl ++ al), (selsort bl x = bl ++ bl), (selsort bl y = al), (selsort bl y = bl), (selsort bl y = selection_sort al), (selsort bl y = selection_sort bl), (selsort bl y = al ++ al), (selsort bl y = al ++ bl), (selsort bl y = bl ++ al), (selsort bl y = bl ++ bl)
(al ++ al = bl), (al ++ bl = al), (al ++ bl = bl), (bl ++ al = al), (bl ++ al = bl), (bl ++ bl = al), (bl ++ bl = bl), ([] = al), ([] = bl), ([] = selection_sort al)
([] = selsort al a), ([] = selsort al x), ([] = selsort al y), ([] = selsort bl a), ([] = selsort bl x), ([] = selsort bl y), ([] = al ++ al), ([] = al ++ bl), ([] = bl ++ al), ([] = bl ++ bl)
(None = Some x), (None = Some y), ((a, al) = select a al), ((a, al) = select a bl), ((a, al) = select x al), ((a, al) = select x bl), ((a, al) = select y al), ((a, al) = select y bl), ((a, bl) = select a al), ((a, bl) = select a bl)
((a, bl) = select x bl), ((a, bl) = select y al), ((a, bl) = select y bl), ((x, al) = select a al), ((x, al) = select a bl), ((x, al) = select x al), ((x, al) = select x bl), ((x, al) = select y al), ((x, al) = select y bl), ((x, bl) = select a al)
((x, bl) = select x al), ((x, bl) = select x bl), ((x, bl) = select y al), ((x, bl) = select y bl), ((y, al) = select a al), ((y, al) = select a bl), ((y, al) = select x al), ((y, al) = select x bl), ((y, al) = select y al), ((y, al) = select y bl)
((y, bl) = select a bl), ((y, bl) = select x al), ((y, bl) = select x bl), ((y, bl) = select y al), ((y, bl) = select y bl), (length al = a), (length al = x), (length al = y), (length bl = a), (length bl = x)


------------------------------ COMBINED SYNTHESIS PROBLEMS ------------------------------
Time Elapsed From Start: 127.238 seconds


Label: 1 (0)
Abducted Assumption: (select x gv2 = (y, bl))
Positive Examples:
   [a := 2; al := [2]; bl := [3]; gv2 := [3]; x := 3; y := 3]
   [a := 2; al := [0; 3]; bl := [0]; gv2 := [0]; x := 0; y := 0]
   [a := 0; al := [1]; bl := [1]; gv2 := [1]; x := 1; y := 1]
   [a := 0; al := [0; 0]; bl := []; gv2 := []; x := 0; y := 0]
   [a := 2; al := [2; 2]; bl := []; gv2 := []; x := 2; y := 2]
   [a := 2; al := [1; 2]; bl := []; gv2 := []; x := 2; y := 2]
   [a := 2; al := [2; 4; 3; 3]; bl := []; gv2 := []; x := 0; y := 0]
   [a := 0; al := [3; 0]; bl := []; gv2 := []; x := 2; y := 2]
   [a := 1; al := [0; 4; 2]; bl := []; gv2 := []; x := 3; y := 3]
   [a := 0; al := [0]; bl := [2; 2]; gv2 := [1; 2]; x := 2; y := 1]
   etc ...

Negative Examples:
   [a := 4; al := [1; 1; 0; 0]; bl := [3; 2; 1; 1]; gv2 := []; x := 2; y := 0]
   [a := 0; al := [0; 0]; bl := [2; 1]; gv2 := [2]; x := 1; y := 2]
   [a := 6; al := [6; 0; 3; 0; 0]; bl := [1]; gv2 := []; x := 3; y := 2]
   [a := 4; al := [4; 2]; bl := [4; 5; 1]; gv2 := [2; 2; 0; 0; 3]; x := 1; y := 3]
   [a := 0; al := [4; 0]; bl := [1; 3]; gv2 := [1; 2; 2]; x := 3; y := 2]
   [a := 1; al := [2]; bl := [0; 3; 0]; gv2 := [3; 0; 2]; x := 3; y := 2]
   [a := 1; al := [0]; bl := []; gv2 := [2]; x := 0; y := 1]
   [a := 2; al := [1; 4]; bl := [4; 1]; gv2 := [5; 5; 0; 6; 2; 3]; x := 6; y := 1]
   [a := 0; al := [3; 3]; bl := [5; 5; 3]; gv2 := [1; 0]; x := 4; y := 5]
   [a := 0; al := [3; 3; 2; 0]; bl := [2; 2; 3]; gv2 := [2; 2; 0]; x := 3; y := 2]
   etc ...

(x <=* gv2), (x <=* bl), (y <=* gv2), (y <=* bl), (sorted gv2), (sorted bl), (Permutation gv2 gv2), (Permutation gv2 bl), (Permutation bl gv2), (Permutation bl bl)
(In x bl), (In y gv2), (In y bl), (x < x), (x < y), (y < x), (y < y), (x <= x), (x <= y), (y <= x)
(gv2 = gv2), (gv2 = bl), (bl = gv2), (bl = bl), (x = x), (x = y), (y = x), (y = y), (false = sorted_bool gv2), (false = sorted_bool bl)
(true = sorted_bool bl), (x <=* x :: gv2), (x <=* x :: bl), (x <=* y :: gv2), (x <=* y :: bl), (x <=* selection_sort gv2), (x <=* selection_sort bl), (x <=* selsort gv2 x), (x <=* selsort gv2 y), (x <=* selsort bl x)
(x <=* gv2 ++ gv2), (x <=* gv2 ++ bl), (x <=* bl ++ gv2), (x <=* bl ++ bl), (x <=* []), (y <=* x :: gv2), (y <=* x :: bl), (y <=* y :: gv2), (y <=* y :: bl), (y <=* selection_sort gv2)
(y <=* selsort gv2 x), (y <=* selsort gv2 y), (y <=* selsort bl x), (y <=* selsort bl y), (y <=* gv2 ++ gv2), (y <=* gv2 ++ bl), (y <=* bl ++ gv2), (y <=* bl ++ bl), (y <=* []), (length gv2 <=* gv2)
(length gv2 <=* x :: gv2), (length gv2 <=* x :: bl), (length gv2 <=* y :: gv2), (length gv2 <=* y :: bl), (length gv2 <=* selection_sort gv2), (length gv2 <=* selection_sort bl), (length gv2 <=* selsort gv2 x), (length gv2 <=* selsort gv2 y), (length gv2 <=* selsort bl x), (length gv2 <=* selsort bl y)
(length gv2 <=* gv2 ++ bl), (length gv2 <=* bl ++ gv2), (length gv2 <=* bl ++ bl), (length gv2 <=* []), (length bl <=* gv2), (length bl <=* bl), (length bl <=* x :: gv2), (length bl <=* x :: bl), (length bl <=* y :: gv2), (length bl <=* y :: bl)
(length bl <=* selection_sort bl), (length bl <=* selsort gv2 x), (length bl <=* selsort gv2 y), (length bl <=* selsort bl x), (length bl <=* selsort bl y), (length bl <=* gv2 ++ gv2), (length bl <=* gv2 ++ bl), (length bl <=* bl ++ gv2), (length bl <=* bl ++ bl), (length bl <=* [])
(sorted (x :: bl)), (sorted (y :: gv2)), (sorted (y :: bl)), (sorted (selection_sort gv2)), (sorted (selection_sort bl)), (sorted (selsort gv2 x)), (sorted (selsort gv2 y)), (sorted (selsort bl x)), (sorted (selsort bl y)), (sorted (gv2 ++ gv2))
(sorted (bl ++ gv2)), (sorted (bl ++ bl)), (sorted []), (Permutation gv2 (x :: gv2)), (Permutation gv2 (x :: bl)), (Permutation gv2 (y :: gv2)), (Permutation gv2 (y :: bl)), (Permutation gv2 (selection_sort gv2)), (Permutation gv2 (selection_sort bl)), (Permutation gv2 (selsort gv2 x))
(Permutation gv2 (selsort bl x)), (Permutation gv2 (selsort bl y)), (Permutation gv2 (gv2 ++ gv2)), (Permutation gv2 (gv2 ++ bl)), (Permutation gv2 (bl ++ gv2)), (Permutation gv2 (bl ++ bl)), (Permutation gv2 []), (Permutation bl (x :: gv2)), (Permutation bl (x :: bl)), (Permutation bl (y :: gv2))
(Permutation bl (selection_sort gv2)), (Permutation bl (selection_sort bl)), (Permutation bl (selsort gv2 x)), (Permutation bl (selsort gv2 y)), (Permutation bl (selsort bl x)), (Permutation bl (selsort bl y)), (Permutation bl (gv2 ++ gv2)), (Permutation bl (gv2 ++ bl)), (Permutation bl (bl ++ gv2)), (Permutation bl (bl ++ bl))
(Permutation (x :: gv2) gv2), (Permutation (x :: gv2) bl), (Permutation (x :: gv2) (x :: bl)), (Permutation (x :: gv2) (y :: gv2)), (Permutation (x :: gv2) (y :: bl)), (Permutation (x :: gv2) (selection_sort gv2)), (Permutation (x :: gv2) (selection_sort bl)), (Permutation (x :: gv2) (selsort gv2 x)), (Permutation (x :: gv2) (selsort gv2 y)), (Permutation (x :: gv2) (selsort bl x))
(Permutation (x :: gv2) (gv2 ++ gv2)), (Permutation (x :: gv2) (gv2 ++ bl)), (Permutation (x :: gv2) (bl ++ gv2)), (Permutation (x :: gv2) (bl ++ bl)), (Permutation (x :: gv2) []), (Permutation (x :: bl) gv2), (Permutation (x :: bl) bl), (Permutation (x :: bl) (x :: gv2)), (Permutation (x :: bl) (y :: gv2)), (Permutation (x :: bl) (y :: bl))
(Permutation (x :: bl) (selection_sort bl)), (Permutation (x :: bl) (selsort gv2 x)), (Permutation (x :: bl) (selsort gv2 y)), (Permutation (x :: bl) (selsort bl x)), (Permutation (x :: bl) (selsort bl y)), (Permutation (x :: bl) (gv2 ++ gv2)), (Permutation (x :: bl) (gv2 ++ bl)), (Permutation (x :: bl) (bl ++ gv2)), (Permutation (x :: bl) (bl ++ bl)), (Permutation (x :: bl) [])
(Permutation (y :: gv2) bl), (Permutation (y :: gv2) (x :: gv2)), (Permutation (y :: gv2) (x :: bl)), (Permutation (y :: gv2) (y :: bl)), (Permutation (y :: gv2) (selection_sort gv2)), (Permutation (y :: gv2) (selection_sort bl)), (Permutation (y :: gv2) (selsort gv2 x)), (Permutation (y :: gv2) (selsort gv2 y)), (Permutation (y :: gv2) (selsort bl x)), (Permutation (y :: gv2) (selsort bl y))
(Permutation (y :: gv2) (gv2 ++ bl)), (Permutation (y :: gv2) (bl ++ gv2)), (Permutation (y :: gv2) (bl ++ bl)), (Permutation (y :: gv2) []), (Permutation (y :: bl) gv2), (Permutation (y :: bl) bl), (Permutation (y :: bl) (x :: gv2)), (Permutation (y :: bl) (x :: bl)), (Permutation (y :: bl) (y :: gv2)), (Permutation (y :: bl) (selection_sort gv2))
(Permutation (y :: bl) (selsort gv2 x)), (Permutation (y :: bl) (selsort gv2 y)), (Permutation (y :: bl) (selsort bl x)), (Permutation (y :: bl) (selsort bl y)), (Permutation (y :: bl) (gv2 ++ gv2)), (Permutation (y :: bl) (gv2 ++ bl)), (Permutation (y :: bl) (bl ++ gv2)), (Permutation (y :: bl) (bl ++ bl)), (Permutation (y :: bl) []), (Permutation (selection_sort gv2) gv2)
(Permutation (selection_sort gv2) (x :: gv2)), (Permutation (selection_sort gv2) (x :: bl)), (Permutation (selection_sort gv2) (y :: gv2)), (Permutation (selection_sort gv2) (y :: bl)), (Permutation (selection_sort gv2) (selection_sort bl)), (Permutation (selection_sort gv2) (selsort gv2 x)), (Permutation (selection_sort gv2) (selsort gv2 y)), (Permutation (selection_sort gv2) (selsort bl x)), (Permutation (selection_sort gv2) (selsort bl y)), (Permutation (selection_sort gv2) (gv2 ++ gv2))
(Permutation (selection_sort gv2) (bl ++ gv2)), (Permutation (selection_sort gv2) (bl ++ bl)), (Permutation (selection_sort gv2) []), (Permutation (selection_sort bl) gv2), (Permutation (selection_sort bl) bl), (Permutation (selection_sort bl) (x :: gv2)), (Permutation (selection_sort bl) (x :: bl)), (Permutation (selection_sort bl) (y :: gv2)), (Permutation (selection_sort bl) (y :: bl)), (Permutation (selection_sort bl) (selection_sort gv2))
(Permutation (selection_sort bl) (selsort gv2 y)), (Permutation (selection_sort bl) (selsort bl x)), (Permutation (selection_sort bl) (selsort bl y)), (Permutation (selection_sort bl) (gv2 ++ gv2)), (Permutation (selection_sort bl) (gv2 ++ bl)), (Permutation (selection_sort bl) (bl ++ gv2)), (Permutation (selection_sort bl) (bl ++ bl)), (Permutation (selection_sort bl) []), (Permutation (selsort gv2 x) gv2), (Permutation (selsort gv2 x) bl)
(Permutation (selsort gv2 x) (x :: bl)), (Permutation (selsort gv2 x) (y :: gv2)), (Permutation (selsort gv2 x) (y :: bl)), (Permutation (selsort gv2 x) (selection_sort gv2)), (Permutation (selsort gv2 x) (selection_sort bl)), (Permutation (selsort gv2 x) (selsort gv2 y)), (Permutation (selsort gv2 x) (selsort bl x)), (Permutation (selsort gv2 x) (selsort bl y)), (Permutation (selsort gv2 x) (gv2 ++ gv2)), (Permutation (selsort gv2 x) (gv2 ++ bl))
(Permutation (selsort gv2 x) (bl ++ bl)), (Permutation (selsort gv2 x) []), (Permutation (selsort gv2 y) gv2), (Permutation (selsort gv2 y) bl), (Permutation (selsort gv2 y) (x :: gv2)), (Permutation (selsort gv2 y) (x :: bl)), (Permutation (selsort gv2 y) (y :: gv2)), (Permutation (selsort gv2 y) (y :: bl)), (Permutation (selsort gv2 y) (selection_sort gv2)), (Permutation (selsort gv2 y) (selection_sort bl))
(Permutation (selsort gv2 y) (selsort bl x)), (Permutation (selsort gv2 y) (selsort bl y)), (Permutation (selsort gv2 y) (gv2 ++ gv2)), (Permutation (selsort gv2 y) (gv2 ++ bl)), (Permutation (selsort gv2 y) (bl ++ gv2)), (Permutation (selsort gv2 y) (bl ++ bl)), (Permutation (selsort gv2 y) []), (Permutation (selsort bl x) gv2), (Permutation (selsort bl x) bl), (Permutation (selsort bl x) (x :: gv2))
(Permutation (selsort bl x) (y :: gv2)), (Permutation (selsort bl x) (y :: bl)), (Permutation (selsort bl x) (selection_sort gv2)), (Permutation (selsort bl x) (selection_sort bl)), (Permutation (selsort bl x) (selsort gv2 x)), (Permutation (selsort bl x) (selsort gv2 y)), (Permutation (selsort bl x) (selsort bl y)), (Permutation (selsort bl x) (gv2 ++ gv2)), (Permutation (selsort bl x) (gv2 ++ bl)), (Permutation (selsort bl x) (bl ++ gv2))
(Permutation (selsort bl x) []), (Permutation (selsort bl y) gv2), (Permutation (selsort bl y) bl), (Permutation (selsort bl y) (x :: gv2)), (Permutation (selsort bl y) (x :: bl)), (Permutation (selsort bl y) (y :: gv2)), (Permutation (selsort bl y) (y :: bl)), (Permutation (selsort bl y) (selection_sort gv2)), (Permutation (selsort bl y) (selection_sort bl)), (Permutation (selsort bl y) (selsort gv2 x))
(Permutation (selsort bl y) (selsort bl x)), (Permutation (selsort bl y) (gv2 ++ gv2)), (Permutation (selsort bl y) (gv2 ++ bl)), (Permutation (selsort bl y) (bl ++ gv2)), (Permutation (selsort bl y) (bl ++ bl)), (Permutation (selsort bl y) []), (Permutation (gv2 ++ gv2) gv2), (Permutation (gv2 ++ gv2) bl), (Permutation (gv2 ++ gv2) (x :: gv2)), (Permutation (gv2 ++ gv2) (x :: bl))
(Permutation (gv2 ++ gv2) (y :: bl)), (Permutation (gv2 ++ gv2) (selection_sort gv2)), (Permutation (gv2 ++ gv2) (selection_sort bl)), (Permutation (gv2 ++ gv2) (selsort gv2 x)), (Permutation (gv2 ++ gv2) (selsort gv2 y)), (Permutation (gv2 ++ gv2) (selsort bl x)), (Permutation (gv2 ++ gv2) (selsort bl y)), (Permutation (gv2 ++ gv2) (gv2 ++ bl)), (Permutation (gv2 ++ gv2) (bl ++ gv2)), (Permutation (gv2 ++ gv2) (bl ++ bl))
(Permutation (gv2 ++ bl) gv2), (Permutation (gv2 ++ bl) bl), (Permutation (gv2 ++ bl) (x :: gv2)), (Permutation (gv2 ++ bl) (x :: bl)), (Permutation (gv2 ++ bl) (y :: gv2)), (Permutation (gv2 ++ bl) (y :: bl)), (Permutation (gv2 ++ bl) (selection_sort gv2)), (Permutation (gv2 ++ bl) (selection_sort bl)), (Permutation (gv2 ++ bl) (selsort gv2 x)), (Permutation (gv2 ++ bl) (selsort gv2 y))
(Permutation (gv2 ++ bl) (selsort bl y)), (Permutation (gv2 ++ bl) (gv2 ++ gv2)), (Permutation (gv2 ++ bl) (bl ++ gv2)), (Permutation (gv2 ++ bl) (bl ++ bl)), (Permutation (gv2 ++ bl) []), (Permutation (bl ++ gv2) gv2), (Permutation (bl ++ gv2) bl), (Permutation (bl ++ gv2) (x :: gv2)), (Permutation (bl ++ gv2) (x :: bl)), (Permutation (bl ++ gv2) (y :: gv2))
(Permutation (bl ++ gv2) (selection_sort gv2)), (Permutation (bl ++ gv2) (selection_sort bl)), (Permutation (bl ++ gv2) (selsort gv2 x)), (Permutation (bl ++ gv2) (selsort gv2 y)), (Permutation (bl ++ gv2) (selsort bl x)), (Permutation (bl ++ gv2) (selsort bl y)), (Permutation (bl ++ gv2) (gv2 ++ gv2)), (Permutation (bl ++ gv2) (gv2 ++ bl)), (Permutation (bl ++ gv2) (bl ++ bl)), (Permutation (bl ++ gv2) [])
(Permutation (bl ++ bl) bl), (Permutation (bl ++ bl) (x :: gv2)), (Permutation (bl ++ bl) (x :: bl)), (Permutation (bl ++ bl) (y :: gv2)), (Permutation (bl ++ bl) (y :: bl)), (Permutation (bl ++ bl) (selection_sort gv2)), (Permutation (bl ++ bl) (selection_sort bl)), (Permutation (bl ++ bl) (selsort gv2 x)), (Permutation (bl ++ bl) (selsort gv2 y)), (Permutation (bl ++ bl) (selsort bl x))
(Permutation (bl ++ bl) (gv2 ++ gv2)), (Permutation (bl ++ bl) (gv2 ++ bl)), (Permutation (bl ++ bl) (bl ++ gv2)), (Permutation (bl ++ bl) []), (Permutation [] gv2), (Permutation [] bl), (Permutation [] (x :: gv2)), (Permutation [] (x :: bl)), (Permutation [] (y :: gv2)), (Permutation [] (y :: bl))
(Permutation [] (selection_sort bl)), (Permutation [] (selsort gv2 x)), (Permutation [] (selsort gv2 y)), (Permutation [] (selsort bl x)), (Permutation [] (selsort bl y)), (Permutation [] (gv2 ++ gv2)), (Permutation [] (gv2 ++ bl)), (Permutation [] (bl ++ gv2)), (Permutation [] (bl ++ bl)), (In x (x :: gv2))
(In x (y :: gv2)), (In x (y :: bl)), (In x (selection_sort gv2)), (In x (selection_sort bl)), (In x (selsort gv2 x)), (In x (selsort gv2 y)), (In x (selsort bl x)), (In x (selsort bl y)), (In x (gv2 ++ gv2)), (In x (gv2 ++ bl))
(In x (bl ++ bl)), (In y (x :: gv2)), (In y (x :: bl)), (In y (y :: gv2)), (In y (y :: bl)), (In y (selection_sort gv2)), (In y (selection_sort bl)), (In y (selsort gv2 x)), (In y (selsort gv2 y)), (In y (selsort bl x))
(In y (gv2 ++ gv2)), (In y (gv2 ++ bl)), (In y (bl ++ gv2)), (In y (bl ++ bl)), (In (length gv2) gv2), (In (length gv2) bl), (In (length gv2) (x :: gv2)), (In (length gv2) (x :: bl)), (In (length gv2) (y :: gv2)), (In (length gv2) (y :: bl))
(In (length gv2) (selection_sort bl)), (In (length gv2) (selsort gv2 x)), (In (length gv2) (selsort gv2 y)), (In (length gv2) (selsort bl x)), (In (length gv2) (selsort bl y)), (In (length gv2) (gv2 ++ gv2)), (In (length gv2) (gv2 ++ bl)), (In (length gv2) (bl ++ gv2)), (In (length gv2) (bl ++ bl)), (In (length bl) gv2)
(In (length bl) (x :: gv2)), (In (length bl) (x :: bl)), (In (length bl) (y :: gv2)), (In (length bl) (y :: bl)), (In (length bl) (selection_sort gv2)), (In (length bl) (selection_sort bl)), (In (length bl) (selsort gv2 x)), (In (length bl) (selsort gv2 y)), (In (length bl) (selsort bl x)), (In (length bl) (selsort bl y))
(In (length bl) (gv2 ++ bl)), (In (length bl) (bl ++ gv2)), (In (length bl) (bl ++ bl)), (x < length gv2), (x < length bl), (y < length gv2), (y < length bl), (length gv2 < x), (length gv2 < y), (length gv2 < length bl)
(length bl < y), (length bl < length gv2), (x <= length gv2), (x <= length bl), (y <= length gv2), (y <= length bl), (length gv2 <= x), (length gv2 <= y), (length gv2 <= length bl), (length bl <= x)
(length bl <= length gv2), (~ x <=* gv2), (~ x <=* bl), (~ y <=* gv2), (~ y <=* bl), (~ sorted gv2), (~ sorted bl), (~ Permutation gv2 gv2), (~ Permutation gv2 bl), (~ Permutation bl gv2)
(~ In x gv2), (~ In x bl), (~ In y gv2), (~ In y bl), (~ x < x), (~ x < y), (~ y < x), (~ y < y), (~ x <= x), (~ x <= y)
(~ y <= y), (gv2 <> gv2), (gv2 <> bl), (bl <> gv2), (bl <> bl), (x <> x), (x <> y), (y <> x), (y <> y), (None = Some gv2)
(x :: gv2 = gv2), (x :: gv2 = bl), (x :: gv2 = selection_sort gv2), (x :: gv2 = selection_sort bl), (x :: gv2 = selsort gv2 x), (x :: gv2 = selsort gv2 y), (x :: gv2 = selsort bl x), (x :: gv2 = selsort bl y), (x :: gv2 = gv2 ++ gv2), (x :: gv2 = gv2 ++ bl)
(x :: gv2 = bl ++ bl), (x :: gv2 = []), (x :: bl = gv2), (x :: bl = bl), (x :: bl = selection_sort gv2), (x :: bl = selection_sort bl), (x :: bl = selsort gv2 x), (x :: bl = selsort gv2 y), (x :: bl = selsort bl x), (x :: bl = selsort bl y)
(x :: bl = gv2 ++ bl), (x :: bl = bl ++ gv2), (x :: bl = bl ++ bl), (x :: bl = []), (y :: gv2 = gv2), (y :: gv2 = bl), (y :: gv2 = selection_sort gv2), (y :: gv2 = selection_sort bl), (y :: gv2 = selsort gv2 x), (y :: gv2 = selsort gv2 y)
(y :: gv2 = selsort bl y), (y :: gv2 = gv2 ++ gv2), (y :: gv2 = gv2 ++ bl), (y :: gv2 = bl ++ gv2), (y :: gv2 = bl ++ bl), (y :: gv2 = []), (y :: bl = gv2), (y :: bl = bl), (y :: bl = selection_sort gv2), (y :: bl = selection_sort bl)
(y :: bl = selsort gv2 y), (y :: bl = selsort bl x), (y :: bl = selsort bl y), (y :: bl = gv2 ++ gv2), (y :: bl = gv2 ++ bl), (y :: bl = bl ++ gv2), (y :: bl = bl ++ bl), (y :: bl = []), (selection_sort gv2 = gv2), (selection_sort gv2 = bl)
(selection_sort gv2 = gv2 ++ bl), (selection_sort gv2 = bl ++ gv2), (selection_sort gv2 = bl ++ bl), (selection_sort bl = gv2), (selection_sort bl = bl), (selection_sort bl = gv2 ++ gv2), (selection_sort bl = gv2 ++ bl), (selection_sort bl = bl ++ gv2), (selection_sort bl = bl ++ bl), (selsort gv2 x = gv2)
(selsort gv2 x = selection_sort gv2), (selsort gv2 x = selection_sort bl), (selsort gv2 x = gv2 ++ gv2), (selsort gv2 x = gv2 ++ bl), (selsort gv2 x = bl ++ gv2), (selsort gv2 x = bl ++ bl), (selsort gv2 y = gv2), (selsort gv2 y = bl), (selsort gv2 y = selection_sort gv2), (selsort gv2 y = selection_sort bl)
(selsort gv2 y = gv2 ++ bl), (selsort gv2 y = bl ++ gv2), (selsort gv2 y = bl ++ bl), (selsort bl x = gv2), (selsort bl x = bl), (selsort bl x = selection_sort gv2), (selsort bl x = selection_sort bl), (selsort bl x = gv2 ++ gv2), (selsort bl x = gv2 ++ bl), (selsort bl x = bl ++ gv2)
(selsort bl y = gv2), (selsort bl y = bl), (selsort bl y = selection_sort gv2), (selsort bl y = selection_sort bl), (selsort bl y = gv2 ++ gv2), (selsort bl y = gv2 ++ bl), (selsort bl y = bl ++ gv2), (selsort bl y = bl ++ bl), (gv2 ++ gv2 = gv2), (gv2 ++ gv2 = bl)
(gv2 ++ bl = bl), (bl ++ gv2 = gv2), (bl ++ gv2 = bl), (bl ++ bl = gv2), (bl ++ bl = bl), ([] = gv2), ([] = bl), ([] = selection_sort gv2), ([] = selection_sort bl), ([] = selsort gv2 x)
([] = selsort bl x), ([] = selsort bl y), ([] = gv2 ++ gv2), ([] = gv2 ++ bl), ([] = bl ++ gv2), ([] = bl ++ bl), (None = Some x), (None = Some y), ((x, gv2) = select x gv2), ((x, gv2) = select x bl)
((x, gv2) = select y bl), ((x, bl) = select x gv2), ((x, bl) = select x bl), ((x, bl) = select y gv2), ((x, bl) = select y bl), ((y, gv2) = select x gv2), ((y, gv2) = select x bl), ((y, gv2) = select y gv2), ((y, gv2) = select y bl), ((y, bl) = select x gv2)
((y, bl) = select y gv2), ((y, bl) = select y bl), (length gv2 = x), (length gv2 = y), (length bl = x), (length bl = y)

Label: 3 (1)
Abducted Assumption: ((let (j, l') := select a al in (j, x :: l')) = (y, bl))
Positive Examples:
   [a := 1; al := []; bl := [3]; x := 3; y := 1]
   [a := 1; al := [1]; bl := [2; 1]; x := 2; y := 1]
   [a := 0; al := []; bl := [3]; x := 3; y := 0]
   [a := 0; al := []; bl := [2]; x := 2; y := 0]
   [a := 2; al := []; bl := [2]; x := 2; y := 2]
   [a := 2; al := [0]; bl := [1; 2]; x := 1; y := 0]
   [a := 2; al := []; bl := [0]; x := 0; y := 2]
   [a := 1; al := [2]; bl := [2; 2]; x := 2; y := 1]
   [a := 2; al := []; bl := [1]; x := 1; y := 2]
   [a := 1; al := [1]; bl := [0; 1]; x := 0; y := 1]
   etc ...

Negative Examples:
   [a := 0; al := [1; 1]; bl := [2; 2; 0; 4]; x := 1; y := 3]
   [a := 0; al := [3; 5; 5]; bl := [6; 0; 4; 5]; x := 1; y := 4]
   [a := 2; al := [2; 0; 5; 4]; bl := [5; 3]; x := 0; y := 5]
   [a := 3; al := [3; 3; 2; 1]; bl := [3]; x := 0; y := 4]
   [a := 0; al := []; bl := [3; 2]; x := 2; y := 3]
   [a := 2; al := []; bl := [1]; x := 0; y := 2]
   [a := 6; al := [6; 0; 6; 1]; bl := [0]; x := 2; y := 4]
   [a := 4; al := [4]; bl := [5; 0; 4; 1; 4]; x := 4; y := 3]
   [a := 1; al := [2; 1; 2; 2]; bl := [0; 3]; x := 4; y := 1]
   [a := 2; al := [1]; bl := [1; 1]; x := 2; y := 1]
   etc ...

(a <=* al), (a <=* bl), (x <=* al), (x <=* bl), (y <=* al), (y <=* bl), (sorted al), (sorted bl), (Permutation al al), (Permutation al bl)
(Permutation bl bl), (In a al), (In a bl), (In x al), (In x bl), (In y al), (In y bl), (a < a), (a < x), (a < y)
(x < x), (x < y), (y < a), (y < x), (y < y), (a <= a), (a <= x), (a <= y), (x <= a), (x <= x)
(y <= a), (y <= x), (y <= y), (al = al), (al = bl), (bl = al), (bl = bl), (a = a), (a = x), (a = y)
(x = x), (x = y), (y = a), (y = x), (y = y), (false = sorted_bool al), (false = sorted_bool bl), (true = sorted_bool al), (true = sorted_bool bl), (a <=* a :: al)
(a <=* x :: al), (a <=* x :: bl), (a <=* y :: al), (a <=* y :: bl), (a <=* selection_sort al), (a <=* selection_sort bl), (a <=* selsort al a), (a <=* selsort al x), (a <=* selsort al y), (a <=* selsort bl a)
(a <=* selsort bl y), (a <=* al ++ al), (a <=* al ++ bl), (a <=* bl ++ al), (a <=* bl ++ bl), (a <=* []), (x <=* a :: al), (x <=* a :: bl), (x <=* x :: al), (x <=* x :: bl)
(x <=* y :: bl), (x <=* selection_sort al), (x <=* selection_sort bl), (x <=* selsort al a), (x <=* selsort al x), (x <=* selsort al y), (x <=* selsort bl a), (x <=* selsort bl x), (x <=* selsort bl y), (x <=* al ++ al)
(x <=* bl ++ al), (x <=* bl ++ bl), (x <=* []), (y <=* a :: al), (y <=* a :: bl), (y <=* x :: al), (y <=* x :: bl), (y <=* y :: al), (y <=* y :: bl), (y <=* selection_sort al)
(y <=* selsort al a), (y <=* selsort al x), (y <=* selsort al y), (y <=* selsort bl a), (y <=* selsort bl x), (y <=* selsort bl y), (y <=* al ++ al), (y <=* al ++ bl), (y <=* bl ++ al), (y <=* bl ++ bl)
(length al <=* al), (length al <=* bl), (length al <=* a :: al), (length al <=* a :: bl), (length al <=* x :: al), (length al <=* x :: bl), (length al <=* y :: al), (length al <=* y :: bl), (length al <=* selection_sort al), (length al <=* selection_sort bl)
(length al <=* selsort al x), (length al <=* selsort al y), (length al <=* selsort bl a), (length al <=* selsort bl x), (length al <=* selsort bl y), (length al <=* al ++ al), (length al <=* al ++ bl), (length al <=* bl ++ al), (length al <=* bl ++ bl), (length al <=* [])
(length bl <=* bl), (length bl <=* a :: al), (length bl <=* a :: bl), (length bl <=* x :: al), (length bl <=* x :: bl), (length bl <=* y :: al), (length bl <=* y :: bl), (length bl <=* selection_sort al), (length bl <=* selection_sort bl), (length bl <=* selsort al a)
(length bl <=* selsort al y), (length bl <=* selsort bl a), (length bl <=* selsort bl x), (length bl <=* selsort bl y), (length bl <=* al ++ al), (length bl <=* al ++ bl), (length bl <=* bl ++ al), (length bl <=* bl ++ bl), (length bl <=* []), (sorted (a :: al))
(sorted (x :: al)), (sorted (x :: bl)), (sorted (y :: al)), (sorted (y :: bl)), (sorted (selection_sort al)), (sorted (selection_sort bl)), (sorted (selsort al a)), (sorted (selsort al x)), (sorted (selsort al y)), (sorted (selsort bl a))
(sorted (selsort bl y)), (sorted (al ++ al)), (sorted (al ++ bl)), (sorted (bl ++ al)), (sorted (bl ++ bl)), (sorted []), (Permutation al (a :: al)), (Permutation al (a :: bl)), (Permutation al (x :: al)), (Permutation al (x :: bl))
(Permutation al (y :: bl)), (Permutation al (selection_sort al)), (Permutation al (selection_sort bl)), (Permutation al (selsort al a)), (Permutation al (selsort al x)), (Permutation al (selsort al y)), (Permutation al (selsort bl a)), (Permutation al (selsort bl x)), (Permutation al (selsort bl y)), (Permutation al (al ++ al))
(Permutation al (bl ++ al)), (Permutation al (bl ++ bl)), (Permutation al []), (Permutation bl (a :: al)), (Permutation bl (a :: bl)), (Permutation bl (x :: al)), (Permutation bl (x :: bl)), (Permutation bl (y :: al)), (Permutation bl (y :: bl)), (Permutation bl (selection_sort al))
(Permutation bl (selsort al a)), (Permutation bl (selsort al x)), (Permutation bl (selsort al y)), (Permutation bl (selsort bl a)), (Permutation bl (selsort bl x)), (Permutation bl (selsort bl y)), (Permutation bl (al ++ al)), (Permutation bl (al ++ bl)), (Permutation bl (bl ++ al)), (Permutation bl (bl ++ bl))
(Permutation (a :: al) al), (Permutation (a :: al) bl), (Permutation (a :: al) (a :: bl)), (Permutation (a :: al) (x :: al)), (Permutation (a :: al) (x :: bl)), (Permutation (a :: al) (y :: al)), (Permutation (a :: al) (y :: bl)), (Permutation (a :: al) (selection_sort al)), (Permutation (a :: al) (selection_sort bl)), (Permutation (a :: al) (selsort al a))
(Permutation (a :: al) (selsort al y)), (Permutation (a :: al) (selsort bl a)), (Permutation (a :: al) (selsort bl x)), (Permutation (a :: al) (selsort bl y)), (Permutation (a :: al) (al ++ al)), (Permutation (a :: al) (al ++ bl)), (Permutation (a :: al) (bl ++ al)), (Permutation (a :: al) (bl ++ bl)), (Permutation (a :: al) []), (Permutation (a :: bl) al)
(Permutation (a :: bl) (a :: al)), (Permutation (a :: bl) (x :: al)), (Permutation (a :: bl) (x :: bl)), (Permutation (a :: bl) (y :: al)), (Permutation (a :: bl) (y :: bl)), (Permutation (a :: bl) (selection_sort al)), (Permutation (a :: bl) (selection_sort bl)), (Permutation (a :: bl) (selsort al a)), (Permutation (a :: bl) (selsort al x)), (Permutation (a :: bl) (selsort al y))
(Permutation (a :: bl) (selsort bl x)), (Permutation (a :: bl) (selsort bl y)), (Permutation (a :: bl) (al ++ al)), (Permutation (a :: bl) (al ++ bl)), (Permutation (a :: bl) (bl ++ al)), (Permutation (a :: bl) (bl ++ bl)), (Permutation (a :: bl) []), (Permutation (x :: al) al), (Permutation (x :: al) bl), (Permutation (x :: al) (a :: al))
(Permutation (x :: al) (x :: bl)), (Permutation (x :: al) (y :: al)), (Permutation (x :: al) (y :: bl)), (Permutation (x :: al) (selection_sort al)), (Permutation (x :: al) (selection_sort bl)), (Permutation (x :: al) (selsort al a)), (Permutation (x :: al) (selsort al x)), (Permutation (x :: al) (selsort al y)), (Permutation (x :: al) (selsort bl a)), (Permutation (x :: al) (selsort bl x))
(Permutation (x :: al) (al ++ al)), (Permutation (x :: al) (al ++ bl)), (Permutation (x :: al) (bl ++ al)), (Permutation (x :: al) (bl ++ bl)), (Permutation (x :: al) []), (Permutation (x :: bl) al), (Permutation (x :: bl) bl), (Permutation (x :: bl) (a :: al)), (Permutation (x :: bl) (a :: bl)), (Permutation (x :: bl) (x :: al))
(Permutation (x :: bl) (y :: bl)), (Permutation (x :: bl) (selection_sort al)), (Permutation (x :: bl) (selection_sort bl)), (Permutation (x :: bl) (selsort al a)), (Permutation (x :: bl) (selsort al x)), (Permutation (x :: bl) (selsort al y)), (Permutation (x :: bl) (selsort bl a)), (Permutation (x :: bl) (selsort bl x)), (Permutation (x :: bl) (selsort bl y)), (Permutation (x :: bl) (al ++ al))
(Permutation (x :: bl) (bl ++ al)), (Permutation (x :: bl) (bl ++ bl)), (Permutation (x :: bl) []), (Permutation (y :: al) al), (Permutation (y :: al) bl), (Permutation (y :: al) (a :: al)), (Permutation (y :: al) (a :: bl)), (Permutation (y :: al) (x :: al)), (Permutation (y :: al) (x :: bl)), (Permutation (y :: al) (y :: bl))
(Permutation (y :: al) (selection_sort bl)), (Permutation (y :: al) (selsort al a)), (Permutation (y :: al) (selsort al x)), (Permutation (y :: al) (selsort al y)), (Permutation (y :: al) (selsort bl a)), (Permutation (y :: al) (selsort bl x)), (Permutation (y :: al) (selsort bl y)), (Permutation (y :: al) (al ++ al)), (Permutation (y :: al) (al ++ bl)), (Permutation (y :: al) (bl ++ al))
(Permutation (y :: al) []), (Permutation (y :: bl) al), (Permutation (y :: bl) bl), (Permutation (y :: bl) (a :: al)), (Permutation (y :: bl) (a :: bl)), (Permutation (y :: bl) (x :: al)), (Permutation (y :: bl) (x :: bl)), (Permutation (y :: bl) (y :: al)), (Permutation (y :: bl) (selection_sort al)), (Permutation (y :: bl) (selection_sort bl))
(Permutation (y :: bl) (selsort al x)), (Permutation (y :: bl) (selsort al y)), (Permutation (y :: bl) (selsort bl a)), (Permutation (y :: bl) (selsort bl x)), (Permutation (y :: bl) (selsort bl y)), (Permutation (y :: bl) (al ++ al)), (Permutation (y :: bl) (al ++ bl)), (Permutation (y :: bl) (bl ++ al)), (Permutation (y :: bl) (bl ++ bl)), (Permutation (y :: bl) [])
(Permutation (selection_sort al) bl), (Permutation (selection_sort al) (a :: al)), (Permutation (selection_sort al) (a :: bl)), (Permutation (selection_sort al) (x :: al)), (Permutation (selection_sort al) (x :: bl)), (Permutation (selection_sort al) (y :: al)), (Permutation (selection_sort al) (y :: bl)), (Permutation (selection_sort al) (selection_sort bl)), (Permutation (selection_sort al) (selsort al a)), (Permutation (selection_sort al) (selsort al x))
(Permutation (selection_sort al) (selsort bl a)), (Permutation (selection_sort al) (selsort bl x)), (Permutation (selection_sort al) (selsort bl y)), (Permutation (selection_sort al) (al ++ al)), (Permutation (selection_sort al) (al ++ bl)), (Permutation (selection_sort al) (bl ++ al)), (Permutation (selection_sort al) (bl ++ bl)), (Permutation (selection_sort al) []), (Permutation (selection_sort bl) al), (Permutation (selection_sort bl) bl)
(Permutation (selection_sort bl) (a :: bl)), (Permutation (selection_sort bl) (x :: al)), (Permutation (selection_sort bl) (x :: bl)), (Permutation (selection_sort bl) (y :: al)), (Permutation (selection_sort bl) (y :: bl)), (Permutation (selection_sort bl) (selection_sort al)), (Permutation (selection_sort bl) (selsort al a)), (Permutation (selection_sort bl) (selsort al x)), (Permutation (selection_sort bl) (selsort al y)), (Permutation (selection_sort bl) (selsort bl a))
(Permutation (selection_sort bl) (selsort bl y)), (Permutation (selection_sort bl) (al ++ al)), (Permutation (selection_sort bl) (al ++ bl)), (Permutation (selection_sort bl) (bl ++ al)), (Permutation (selection_sort bl) (bl ++ bl)), (Permutation (selection_sort bl) []), (Permutation (selsort al a) al), (Permutation (selsort al a) bl), (Permutation (selsort al a) (a :: al)), (Permutation (selsort al a) (a :: bl))
(Permutation (selsort al a) (x :: bl)), (Permutation (selsort al a) (y :: al)), (Permutation (selsort al a) (y :: bl)), (Permutation (selsort al a) (selection_sort al)), (Permutation (selsort al a) (selection_sort bl)), (Permutation (selsort al a) (selsort al x)), (Permutation (selsort al a) (selsort al y)), (Permutation (selsort al a) (selsort bl a)), (Permutation (selsort al a) (selsort bl x)), (Permutation (selsort al a) (selsort bl y))
(Permutation (selsort al a) (al ++ bl)), (Permutation (selsort al a) (bl ++ al)), (Permutation (selsort al a) (bl ++ bl)), (Permutation (selsort al a) []), (Permutation (selsort al x) al), (Permutation (selsort al x) bl), (Permutation (selsort al x) (a :: al)), (Permutation (selsort al x) (a :: bl)), (Permutation (selsort al x) (x :: al)), (Permutation (selsort al x) (x :: bl))
(Permutation (selsort al x) (y :: bl)), (Permutation (selsort al x) (selection_sort al)), (Permutation (selsort al x) (selection_sort bl)), (Permutation (selsort al x) (selsort al a)), (Permutation (selsort al x) (selsort al y)), (Permutation (selsort al x) (selsort bl a)), (Permutation (selsort al x) (selsort bl x)), (Permutation (selsort al x) (selsort bl y)), (Permutation (selsort al x) (al ++ al)), (Permutation (selsort al x) (al ++ bl))
(Permutation (selsort al x) (bl ++ bl)), (Permutation (selsort al x) []), (Permutation (selsort al y) al), (Permutation (selsort al y) bl), (Permutation (selsort al y) (a :: al)), (Permutation (selsort al y) (a :: bl)), (Permutation (selsort al y) (x :: al)), (Permutation (selsort al y) (x :: bl)), (Permutation (selsort al y) (y :: al)), (Permutation (selsort al y) (y :: bl))
(Permutation (selsort al y) (selection_sort bl)), (Permutation (selsort al y) (selsort al a)), (Permutation (selsort al y) (selsort al x)), (Permutation (selsort al y) (selsort bl a)), (Permutation (selsort al y) (selsort bl x)), (Permutation (selsort al y) (selsort bl y)), (Permutation (selsort al y) (al ++ al)), (Permutation (selsort al y) (al ++ bl)), (Permutation (selsort al y) (bl ++ al)), (Permutation (selsort al y) (bl ++ bl))
(Permutation (selsort bl a) al), (Permutation (selsort bl a) bl), (Permutation (selsort bl a) (a :: al)), (Permutation (selsort bl a) (a :: bl)), (Permutation (selsort bl a) (x :: al)), (Permutation (selsort bl a) (x :: bl)), (Permutation (selsort bl a) (y :: al)), (Permutation (selsort bl a) (y :: bl)), (Permutation (selsort bl a) (selection_sort al)), (Permutation (selsort bl a) (selection_sort bl))
(Permutation (selsort bl a) (selsort al x)), (Permutation (selsort bl a) (selsort al y)), (Permutation (selsort bl a) (selsort bl x)), (Permutation (selsort bl a) (selsort bl y)), (Permutation (selsort bl a) (al ++ al)), (Permutation (selsort bl a) (al ++ bl)), (Permutation (selsort bl a) (bl ++ al)), (Permutation (selsort bl a) (bl ++ bl)), (Permutation (selsort bl a) []), (Permutation (selsort bl x) al)
(Permutation (selsort bl x) (a :: al)), (Permutation (selsort bl x) (a :: bl)), (Permutation (selsort bl x) (x :: al)), (Permutation (selsort bl x) (x :: bl)), (Permutation (selsort bl x) (y :: al)), (Permutation (selsort bl x) (y :: bl)), (Permutation (selsort bl x) (selection_sort al)), (Permutation (selsort bl x) (selection_sort bl)), (Permutation (selsort bl x) (selsort al a)), (Permutation (selsort bl x) (selsort al x))
(Permutation (selsort bl x) (selsort bl a)), (Permutation (selsort bl x) (selsort bl y)), (Permutation (selsort bl x) (al ++ al)), (Permutation (selsort bl x) (al ++ bl)), (Permutation (selsort bl x) (bl ++ al)), (Permutation (selsort bl x) (bl ++ bl)), (Permutation (selsort bl x) []), (Permutation (selsort bl y) al), (Permutation (selsort bl y) bl), (Permutation (selsort bl y) (a :: al))
(Permutation (selsort bl y) (x :: al)), (Permutation (selsort bl y) (x :: bl)), (Permutation (selsort bl y) (y :: al)), (Permutation (selsort bl y) (y :: bl)), (Permutation (selsort bl y) (selection_sort al)), (Permutation (selsort bl y) (selection_sort bl)), (Permutation (selsort bl y) (selsort al a)), (Permutation (selsort bl y) (selsort al x)), (Permutation (selsort bl y) (selsort al y)), (Permutation (selsort bl y) (selsort bl a))
(Permutation (selsort bl y) (al ++ al)), (Permutation (selsort bl y) (al ++ bl)), (Permutation (selsort bl y) (bl ++ al)), (Permutation (selsort bl y) (bl ++ bl)), (Permutation (selsort bl y) []), (Permutation (al ++ al) al), (Permutation (al ++ al) bl), (Permutation (al ++ al) (a :: al)), (Permutation (al ++ al) (a :: bl)), (Permutation (al ++ al) (x :: al))
(Permutation (al ++ al) (y :: al)), (Permutation (al ++ al) (y :: bl)), (Permutation (al ++ al) (selection_sort al)), (Permutation (al ++ al) (selection_sort bl)), (Permutation (al ++ al) (selsort al a)), (Permutation (al ++ al) (selsort al x)), (Permutation (al ++ al) (selsort al y)), (Permutation (al ++ al) (selsort bl a)), (Permutation (al ++ al) (selsort bl x)), (Permutation (al ++ al) (selsort bl y))
(Permutation (al ++ al) (bl ++ al)), (Permutation (al ++ al) (bl ++ bl)), (Permutation (al ++ al) []), (Permutation (al ++ bl) al), (Permutation (al ++ bl) bl), (Permutation (al ++ bl) (a :: al)), (Permutation (al ++ bl) (a :: bl)), (Permutation (al ++ bl) (x :: al)), (Permutation (al ++ bl) (x :: bl)), (Permutation (al ++ bl) (y :: al))
(Permutation (al ++ bl) (selection_sort al)), (Permutation (al ++ bl) (selection_sort bl)), (Permutation (al ++ bl) (selsort al a)), (Permutation (al ++ bl) (selsort al x)), (Permutation (al ++ bl) (selsort al y)), (Permutation (al ++ bl) (selsort bl a)), (Permutation (al ++ bl) (selsort bl x)), (Permutation (al ++ bl) (selsort bl y)), (Permutation (al ++ bl) (al ++ al)), (Permutation (al ++ bl) (bl ++ al))
(Permutation (al ++ bl) []), (Permutation (bl ++ al) al), (Permutation (bl ++ al) bl), (Permutation (bl ++ al) (a :: al)), (Permutation (bl ++ al) (a :: bl)), (Permutation (bl ++ al) (x :: al)), (Permutation (bl ++ al) (x :: bl)), (Permutation (bl ++ al) (y :: al)), (Permutation (bl ++ al) (y :: bl)), (Permutation (bl ++ al) (selection_sort al))
(Permutation (bl ++ al) (selsort al a)), (Permutation (bl ++ al) (selsort al x)), (Permutation (bl ++ al) (selsort al y)), (Permutation (bl ++ al) (selsort bl a)), (Permutation (bl ++ al) (selsort bl x)), (Permutation (bl ++ al) (selsort bl y)), (Permutation (bl ++ al) (al ++ al)), (Permutation (bl ++ al) (al ++ bl)), (Permutation (bl ++ al) (bl ++ bl)), (Permutation (bl ++ al) [])
(Permutation (bl ++ bl) bl), (Permutation (bl ++ bl) (a :: al)), (Permutation (bl ++ bl) (a :: bl)), (Permutation (bl ++ bl) (x :: al)), (Permutation (bl ++ bl) (x :: bl)), (Permutation (bl ++ bl) (y :: al)), (Permutation (bl ++ bl) (y :: bl)), (Permutation (bl ++ bl) (selection_sort al)), (Permutation (bl ++ bl) (selection_sort bl)), (Permutation (bl ++ bl) (selsort al a))
(Permutation (bl ++ bl) (selsort al y)), (Permutation (bl ++ bl) (selsort bl a)), (Permutation (bl ++ bl) (selsort bl x)), (Permutation (bl ++ bl) (selsort bl y)), (Permutation (bl ++ bl) (al ++ al)), (Permutation (bl ++ bl) (al ++ bl)), (Permutation (bl ++ bl) (bl ++ al)), (Permutation (bl ++ bl) []), (Permutation [] al), (Permutation [] bl)
(Permutation [] (a :: bl)), (Permutation [] (x :: al)), (Permutation [] (x :: bl)), (Permutation [] (y :: al)), (Permutation [] (y :: bl)), (Permutation [] (selection_sort al)), (Permutation [] (selection_sort bl)), (Permutation [] (selsort al a)), (Permutation [] (selsort al x)), (Permutation [] (selsort al y))
(Permutation [] (selsort bl x)), (Permutation [] (selsort bl y)), (Permutation [] (al ++ al)), (Permutation [] (al ++ bl)), (Permutation [] (bl ++ al)), (Permutation [] (bl ++ bl)), (In a (a :: al)), (In a (a :: bl)), (In a (x :: al)), (In a (x :: bl))
(In a (y :: bl)), (In a (selection_sort al)), (In a (selection_sort bl)), (In a (selsort al a)), (In a (selsort al x)), (In a (selsort al y)), (In a (selsort bl a)), (In a (selsort bl x)), (In a (selsort bl y)), (In a (al ++ al))
(In a (bl ++ al)), (In a (bl ++ bl)), (In x (a :: al)), (In x (a :: bl)), (In x (x :: al)), (In x (x :: bl)), (In x (y :: al)), (In x (y :: bl)), (In x (selection_sort al)), (In x (selection_sort bl))
(In x (selsort al x)), (In x (selsort al y)), (In x (selsort bl a)), (In x (selsort bl x)), (In x (selsort bl y)), (In x (al ++ al)), (In x (al ++ bl)), (In x (bl ++ al)), (In x (bl ++ bl)), (In y (a :: al))
(In y (x :: al)), (In y (x :: bl)), (In y (y :: al)), (In y (y :: bl)), (In y (selection_sort al)), (In y (selection_sort bl)), (In y (selsort al a)), (In y (selsort al x)), (In y (selsort al y)), (In y (selsort bl a))
(In y (selsort bl y)), (In y (al ++ al)), (In y (al ++ bl)), (In y (bl ++ al)), (In y (bl ++ bl)), (In (length al) al), (In (length al) bl), (In (length al) (a :: al)), (In (length al) (a :: bl)), (In (length al) (x :: al))
(In (length al) (y :: al)), (In (length al) (y :: bl)), (In (length al) (selection_sort al)), (In (length al) (selection_sort bl)), (In (length al) (selsort al a)), (In (length al) (selsort al x)), (In (length al) (selsort al y)), (In (length al) (selsort bl a)), (In (length al) (selsort bl x)), (In (length al) (selsort bl y))
(In (length al) (al ++ bl)), (In (length al) (bl ++ al)), (In (length al) (bl ++ bl)), (In (length bl) al), (In (length bl) bl), (In (length bl) (a :: al)), (In (length bl) (a :: bl)), (In (length bl) (x :: al)), (In (length bl) (x :: bl)), (In (length bl) (y :: al))
(In (length bl) (selection_sort al)), (In (length bl) (selection_sort bl)), (In (length bl) (selsort al a)), (In (length bl) (selsort al x)), (In (length bl) (selsort al y)), (In (length bl) (selsort bl a)), (In (length bl) (selsort bl x)), (In (length bl) (selsort bl y)), (In (length bl) (al ++ al)), (In (length bl) (al ++ bl))
(In (length bl) (bl ++ bl)), (a < length al), (a < length bl), (x < length al), (x < length bl), (y < length al), (y < length bl), (length al < a), (length al < x), (length al < y)
(length bl < a), (length bl < x), (length bl < y), (length bl < length al), (a <= length al), (a <= length bl), (x <= length al), (x <= length bl), (y <= length al), (y <= length bl)
(length al <= x), (length al <= y), (length al <= length bl), (length bl <= a), (length bl <= x), (length bl <= y), (length bl <= length al), (~ a <=* al), (~ a <=* bl), (~ x <=* al)
(~ y <=* al), (~ y <=* bl), (~ sorted al), (~ sorted bl), (~ Permutation al al), (~ Permutation al bl), (~ Permutation bl al), (~ Permutation bl bl), (~ In a al), (~ In a bl)
(~ In x bl), (~ In y al), (~ In y bl), (~ a < a), (~ a < x), (~ a < y), (~ x < a), (~ x < x), (~ x < y), (~ y < a)
(~ y < y), (~ a <= a), (~ a <= x), (~ a <= y), (~ x <= a), (~ x <= x), (~ x <= y), (~ y <= a), (~ y <= x), (~ y <= y)
(al <> bl), (bl <> al), (bl <> bl), (a <> a), (a <> x), (a <> y), (x <> a), (x <> x), (x <> y), (y <> a)
(y <> y), (None = Some al), (None = Some bl), (a :: al = al), (a :: al = bl), (a :: al = selection_sort al), (a :: al = selection_sort bl), (a :: al = selsort al a), (a :: al = selsort al x), (a :: al = selsort al y)
(a :: al = selsort bl x), (a :: al = selsort bl y), (a :: al = al ++ al), (a :: al = al ++ bl), (a :: al = bl ++ al), (a :: al = bl ++ bl), (a :: al = []), (a :: bl = al), (a :: bl = bl), (a :: bl = selection_sort al)
(a :: bl = selsort al a), (a :: bl = selsort al x), (a :: bl = selsort al y), (a :: bl = selsort bl a), (a :: bl = selsort bl x), (a :: bl = selsort bl y), (a :: bl = al ++ al), (a :: bl = al ++ bl), (a :: bl = bl ++ al), (a :: bl = bl ++ bl)
(x :: al = al), (x :: al = bl), (x :: al = selection_sort al), (x :: al = selection_sort bl), (x :: al = selsort al a), (x :: al = selsort al x), (x :: al = selsort al y), (x :: al = selsort bl a), (x :: al = selsort bl x), (x :: al = selsort bl y)
(x :: al = al ++ bl), (x :: al = bl ++ al), (x :: al = bl ++ bl), (x :: al = []), (x :: bl = al), (x :: bl = bl), (x :: bl = selection_sort al), (x :: bl = selection_sort bl), (x :: bl = selsort al a), (x :: bl = selsort al x)
(x :: bl = selsort bl a), (x :: bl = selsort bl x), (x :: bl = selsort bl y), (x :: bl = al ++ al), (x :: bl = al ++ bl), (x :: bl = bl ++ al), (x :: bl = bl ++ bl), (x :: bl = []), (y :: al = al), (y :: al = bl)
(y :: al = selection_sort bl), (y :: al = selsort al a), (y :: al = selsort al x), (y :: al = selsort al y), (y :: al = selsort bl a), (y :: al = selsort bl x), (y :: al = selsort bl y), (y :: al = al ++ al), (y :: al = al ++ bl), (y :: al = bl ++ al)
(y :: al = []), (y :: bl = al), (y :: bl = bl), (y :: bl = selection_sort al), (y :: bl = selection_sort bl), (y :: bl = selsort al a), (y :: bl = selsort al x), (y :: bl = selsort al y), (y :: bl = selsort bl a), (y :: bl = selsort bl x)
(y :: bl = al ++ al), (y :: bl = al ++ bl), (y :: bl = bl ++ al), (y :: bl = bl ++ bl), (y :: bl = []), (selection_sort al = al), (selection_sort al = bl), (selection_sort al = al ++ al), (selection_sort al = al ++ bl), (selection_sort al = bl ++ al)
(selection_sort bl = al), (selection_sort bl = bl), (selection_sort bl = al ++ al), (selection_sort bl = al ++ bl), (selection_sort bl = bl ++ al), (selection_sort bl = bl ++ bl), (selsort al a = al), (selsort al a = bl), (selsort al a = selection_sort al), (selsort al a = selection_sort bl)
(selsort al a = al ++ bl), (selsort al a = bl ++ al), (selsort al a = bl ++ bl), (selsort al x = al), (selsort al x = bl), (selsort al x = selection_sort al), (selsort al x = selection_sort bl), (selsort al x = al ++ al), (selsort al x = al ++ bl), (selsort al x = bl ++ al)
(selsort al y = al), (selsort al y = bl), (selsort al y = selection_sort al), (selsort al y = selection_sort bl), (selsort al y = al ++ al), (selsort al y = al ++ bl), (selsort al y = bl ++ al), (selsort al y = bl ++ bl), (selsort bl a = al), (selsort bl a = bl)
(selsort bl a = selection_sort bl), (selsort bl a = al ++ al), (selsort bl a = al ++ bl), (selsort bl a = bl ++ al), (selsort bl a = bl ++ bl), (selsort bl x = al), (selsort bl x = bl), (selsort bl x = selection_sort al), (selsort bl x = selection_sort bl), (selsort bl x = al ++ al)
(selsort bl x = bl ++ al), (selsort bl x = bl ++ bl), (selsort bl y = al), (selsort bl y = bl), (selsort bl y = selection_sort al), (selsort bl y = selection_sort bl), (selsort bl y = al ++ al), (selsort bl y = al ++ bl), (selsort bl y = bl ++ al), (selsort bl y = bl ++ bl)
(al ++ al = bl), (al ++ bl = al), (al ++ bl = bl), (bl ++ al = al), (bl ++ al = bl), (bl ++ bl = al), (bl ++ bl = bl), ([] = al), ([] = bl), ([] = selection_sort al)
([] = selsort al a), ([] = selsort al x), ([] = selsort al y), ([] = selsort bl a), ([] = selsort bl x), ([] = selsort bl y), ([] = al ++ al), ([] = al ++ bl), ([] = bl ++ al), ([] = bl ++ bl)
(None = Some x), (None = Some y), ((a, al) = select a al), ((a, al) = select a bl), ((a, al) = select x al), ((a, al) = select x bl), ((a, al) = select y al), ((a, al) = select y bl), ((a, bl) = select a al), ((a, bl) = select a bl)
((a, bl) = select x bl), ((a, bl) = select y al), ((a, bl) = select y bl), ((x, al) = select a al), ((x, al) = select a bl), ((x, al) = select x al), ((x, al) = select x bl), ((x, al) = select y al), ((x, al) = select y bl), ((x, bl) = select a al)
((x, bl) = select x al), ((x, bl) = select x bl), ((x, bl) = select y al), ((x, bl) = select y bl), ((y, al) = select a al), ((y, al) = select a bl), ((y, al) = select x al), ((y, al) = select x bl), ((y, al) = select y al), ((y, al) = select y bl)
((y, bl) = select a bl), ((y, bl) = select x al), ((y, bl) = select x bl), ((y, bl) = select y al), ((y, bl) = select y bl), (length al = a), (length al = x), (length al = y), (length bl = a), (length bl = x)


------------------------------ SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 716.59 seconds


Label: 1 (0)
(Permutation (x :: gv2) (y :: bl)), (Permutation (y :: bl) (x :: gv2)), ((y, bl) = select x gv2)

Label: 3 (1)


------------------------------ PROCESSED SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 722.372 seconds


((let (j, l') := select a al in (j, x :: l')) = (y, bl))

(select x gv2 = (y, bl))
 - (Permutation (x :: gv2) (y :: bl))
 - (Permutation (y :: bl) (x :: gv2))


------------------------------ FINAL RESULTS ------------------------------
Time Elapsed From Start: 722.372 seconds

Number of Lemmas Returned: 2

(select x gv2 = (y, bl) -> Permutation (x :: gv2) (y :: bl))
(Permutation (x :: gv2) (y :: bl) -> Permutation (y :: bl) (x :: gv2))