Lemma Synthesis Execution Log and Results
--------------------------------------------------------------------
--------------------------------------------------------------------

Label: Initial State
Assumptions: 

----------------------------------
Goal: (Permutation [] (selsort [] 0))


------------------------------ GENERALIZED VARIABLES ------------------------------
Time Elapsed From Start: 0. seconds

gv1 : (list nat) = (selsort [] 0)
gv2 : nat = 0
gv0 : (list nat) = []


------------------------------ GENERALIZATIONS ------------------------------
  NOTE: The assumptions have been restricted to be only the necessary assumptions.
Time Elapsed From Start: 13.406 seconds

Label: Generalization #0
Assumptions: 
 -- ([] = gv0)

----------------------------------
Goal: (Permutation gv0 (selsort gv0 0))
Case: 3

Label: Generalization #1
Assumptions: 
 -- (0 = gv2)

----------------------------------
Goal: (Permutation [] (selsort [] gv2))
Case: 1

Label: Generalization #2
Assumptions: 
 -- (selsort [] 0 = gv1)

----------------------------------
Goal: (Permutation [] gv1)
Case: 3



------------------------------ SYNTHESIS PROBLEMS ------------------------------
Time Elapsed From Start: 14.481 seconds

 -- functions to consider -- 
@eq : (forall A : Type, A -> A -> Prop)
not : (Prop -> Prop)
@fst : (forall A B : Type, A * B -> A)
@snd : (forall A B : Type, A * B -> B)
length : (forall A : Type, list A -> nat)
app : (forall A : Type, list A -> list A -> list A)
le : (nat -> nat -> Prop)
lt : (nat -> nat -> Prop)
In : (forall A : Type, A -> list A -> Prop)
existsb : (forall A : Type, (A -> bool) -> list A -> bool)
forallb : (forall A : Type, (A -> bool) -> list A -> bool)
Forall : (forall A : Type, (A -> Prop) -> list A -> Prop)
nodup : (forall A : Type, (forall x y : A, {x = y} + {x <> y}) -> list A -> list A)
Permutation : (forall A : Type, list A -> list A -> Prop)
sorted : (list nat -> Prop)
is_a_sorting_algorithm : ((list nat -> list nat) -> Prop)
select : (nat -> list nat -> nat * list nat)
selsort : (list nat -> nat -> list nat)
selection_sort : (list nat -> list nat)
le_all : (nat -> list nat -> Prop)
sorted_bool : (list nat -> bool)

Label: 0 (0)
Abducted Assumption: ([] = gv0)
Positive Examples:
   [gv0 := []]

Negative Examples:
   [gv0 := [4; 1; 3; 1]]
   [gv0 := [1; 3; 2; 3]]
   [gv0 := [6; 3; 5; 3; 4]]
   [gv0 := [3; 5; 2; 4; 2]]
   [gv0 := [1; 5; 1; 5; 2; 2]]
   [gv0 := [0; 0; 4; 0; 4]]
   [gv0 := [2; 6; 0; 0]]
   [gv0 := [0; 0; 0; 1]]
   [gv0 := [5; 4; 6; 0; 3; 2]]
   [gv0 := [0; 4; 0; 1; 4; 0]]
   etc ...


Label: 2 (1)
Abducted Assumption: (selsort [] 0 = gv1)
Positive Examples:
   [gv1 := []]

Negative Examples:
   [gv1 := [5; 3; 3; 5; 2]]
   [gv1 := [0; 0; 2; 1; 2]]
   [gv1 := [4; 2; 1; 5]]
   [gv1 := [0; 2; 1; 3]]
   [gv1 := [5; 4; 6; 4; 3; 0]]
   [gv1 := [6; 5; 5]]
   [gv1 := [4; 2; 5]]
   [gv1 := [4; 4; 0; 4]]
   [gv1 := [1; 1; 3; 2]]
   [gv1 := [1; 0; 4; 3]]
   etc ...



------------------------------ TERMS CONSIDERED IN SYNTHESIS ------------------------------
Time Elapsed From Start: 15.293 seconds


Label: 0 (0)
(sorted gv0), (gv0 = gv0), (false = sorted_bool gv0), (true = sorted_bool gv0), (sorted (selection_sort gv0)), (Permutation gv0 (selection_sort gv0)), (Permutation (selection_sort gv0) gv0), (~ sorted gv0), (gv0 <> gv0), (None = Some gv0)

Label: 2 (1)
(sorted gv1), (gv1 = gv1), (false = sorted_bool gv1), (true = sorted_bool gv1), (sorted (selection_sort gv1)), (Permutation gv1 (selection_sort gv1)), (Permutation (selection_sort gv1) gv1), (~ sorted gv1), (gv1 <> gv1), (None = Some gv1)


------------------------------ COMBINED SYNTHESIS PROBLEMS ------------------------------
Time Elapsed From Start: 15.295 seconds


Label: 2 (0)
Abducted Assumption: (selsort [] 0 = gv1)
Positive Examples:
   [gv1 := []]

Negative Examples:
   [gv1 := [5; 3; 3; 5; 2]]
   [gv1 := [0; 0; 2; 1; 2]]
   [gv1 := [4; 2; 1; 5]]
   [gv1 := [0; 2; 1; 3]]
   [gv1 := [5; 4; 6; 4; 3; 0]]
   [gv1 := [6; 5; 5]]
   [gv1 := [4; 2; 5]]
   [gv1 := [4; 4; 0; 4]]
   [gv1 := [1; 1; 3; 2]]
   [gv1 := [1; 0; 4; 3]]
   etc ...

(sorted gv1), (gv1 = gv1), (false = sorted_bool gv1), (true = sorted_bool gv1), (sorted (selection_sort gv1)), (Permutation gv1 (selection_sort gv1)), (Permutation (selection_sort gv1) gv1), (~ sorted gv1), (gv1 <> gv1), (None = Some gv1)

Label: 0 (1)
Abducted Assumption: ([] = gv0)
Positive Examples:
   [gv0 := []]

Negative Examples:
   [gv0 := [4; 1; 3; 1]]
   [gv0 := [1; 3; 2; 3]]
   [gv0 := [6; 3; 5; 3; 4]]
   [gv0 := [3; 5; 2; 4; 2]]
   [gv0 := [1; 5; 1; 5; 2; 2]]
   [gv0 := [0; 0; 4; 0; 4]]
   [gv0 := [2; 6; 0; 0]]
   [gv0 := [0; 0; 0; 1]]
   [gv0 := [5; 4; 6; 0; 3; 2]]
   [gv0 := [0; 4; 0; 1; 4; 0]]
   etc ...

(sorted gv0), (gv0 = gv0), (false = sorted_bool gv0), (true = sorted_bool gv0), (sorted (selection_sort gv0)), (Permutation gv0 (selection_sort gv0)), (Permutation (selection_sort gv0) gv0), (~ sorted gv0), (gv0 <> gv0), (None = Some gv0)


------------------------------ SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 24.132 seconds


Label: 2 (0)

Label: 0 (1)


------------------------------ PROCESSED SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 25.996 seconds


([] = gv0)
 - ([] = gv0)

(selsort [] 0 = gv1)
 - (selsort [] 0 = gv1)


------------------------------ FINAL RESULTS ------------------------------
Time Elapsed From Start: 25.998 seconds

Number of Result Pairs Returned: 0
