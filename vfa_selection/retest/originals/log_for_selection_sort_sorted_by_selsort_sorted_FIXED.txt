Lemma Synthesis Execution Log and Results
--------------------------------------------------------------------
--------------------------------------------------------------------

Label: Initial State
Assumptions: 

----------------------------------
Goal: (sorted (selsort al (length al)))


------------------------------ GENERALIZED VARIABLES ------------------------------
Time Elapsed From Start: 0. seconds

gv1 : nat = (length al)
gv0 : (list nat) = (selsort al (length al))


------------------------------ GENERALIZATIONS ------------------------------
  NOTE: The assumptions have been restricted to be only the necessary assumptions.
Time Elapsed From Start: 20.738 seconds

Label: Generalization #0
Assumptions: 
 -- (selsort al (length al) = gv0)

----------------------------------
Goal: (sorted gv0)
Case: 3

Label: Generalization #1
Assumptions: 
 -- (length al = gv1)

----------------------------------
Goal: (sorted (selsort al gv1))
Case: 1

Label: Generalization #2
Assumptions: 

----------------------------------
Goal: (sorted (selsort al (length al)))
Case: 1



------------------------------ SYNTHESIS PROBLEMS ------------------------------
Time Elapsed From Start: 21.467 seconds

 -- functions to consider -- 
@eq : (forall A : Type, A -> A -> Prop)
not : (Prop -> Prop)
length : (forall A : Type, list A -> nat)
app : (forall A : Type, list A -> list A -> list A)
le : (nat -> nat -> Prop)
lt : (nat -> nat -> Prop)
In : (forall A : Type, A -> list A -> Prop)
existsb : (forall A : Type, (A -> bool) -> list A -> bool)
forallb : (forall A : Type, (A -> bool) -> list A -> bool)
Forall : (forall A : Type, (A -> Prop) -> list A -> Prop)
nodup : (forall A : Type, (forall x y : A, {x = y} + {x <> y}) -> list A -> list A)
Permutation : (forall A : Type, list A -> list A -> Prop)
sorted : (list nat -> Prop)
is_a_sorting_algorithm : ((list nat -> list nat) -> Prop)
select : (nat -> list nat -> nat * list nat)
selsort : (list nat -> nat -> list nat)
selection_sort : (list nat -> list nat)
le_all : (nat -> list nat -> Prop)
sorted_bool : (list nat -> bool)

Label: 0 (0)
Abducted Assumption: (selsort al (length al) = gv0)
Positive Examples:
   [al := [1; 2]; gv0 := [1; 2]]
   [al := [2; 1; 3]; gv0 := [1; 2; 3]]
   [al := [1; 3]; gv0 := [1; 3]]
   [al := [3; 2]; gv0 := [2; 3]]
   [al := [0; 2]; gv0 := [0; 2]]
   [al := [4; 3]; gv0 := [3; 4]]
   [al := [5; 1]; gv0 := [1; 5]]
   [al := [4]; gv0 := [4]]
   [al := [0; 0]; gv0 := [0; 0]]
   [al := [1; 0]; gv0 := [0; 1]]
   etc ...

Negative Examples:
   [al := [0; 2; 3; 0; 1]; gv0 := [6; 5]]
   [al := [3; 0]; gv0 := [2; 1]]
   [al := [5; 0; 5; 1; 2; 3]; gv0 := [2; 5; 0]]
   [al := []; gv0 := [2; 5; 2]]
   [al := [2; 6; 2]; gv0 := [1; 0; 3; 4; 3]]
   [al := [2]; gv0 := [2; 4; 1; 0; 5]]
   [al := [2; 4; 4; 3]; gv0 := [1; 1; 3; 2]]
   [al := [3; 0; 6; 2; 1]; gv0 := [6; 3; 2]]
   [al := [0; 4; 4]; gv0 := [3; 4; 3; 5]]
   [al := [3]; gv0 := [6; 4; 3; 2]]
   etc ...


Label: 1 (1)
Abducted Assumption: (length al = gv1)
Positive Examples:
   [al := [3; 1; 4; 1]; gv1 := 4]
   [al := [1; 2; 0]; gv1 := 3]
   [al := [6; 2; 2; 3; 2]; gv1 := 5]
   [al := [3; 0; 3; 1; 6; 1]; gv1 := 6]
   [al := [2; 6; 3; 5; 2; 0]; gv1 := 6]
   [al := [3; 5; 3; 5]; gv1 := 4]
   [al := [0; 3; 2; 3; 4]; gv1 := 5]
   [al := [5; 5; 4; 2]; gv1 := 4]
   [al := [5; 2; 4; 2; 3; 3]; gv1 := 6]
   [al := [0; 5; 2; 1]; gv1 := 4]
   etc ...

Negative Examples:
   [al := [5; 1; 6]; gv1 := 0]
   [al := [1; 0; 0; 5]; gv1 := 2]
   [al := [6; 2; 5; 5; 2]; gv1 := 3]
   [al := [4; 2; 2]; gv1 := 2]
   [al := [4; 2; 3; 2]; gv1 := 0]
   [al := [0; 5; 6]; gv1 := 4]
   [al := [4; 5; 5; 4; 6; 0]; gv1 := 5]
   [al := [4; 3; 0; 2]; gv1 := 1]
   [al := [1; 0; 0]; gv1 := 0]
   [al := [5; 6; 3; 1; 2; 4]; gv1 := 2]
   etc ...



------------------------------ TERMS CONSIDERED IN SYNTHESIS ------------------------------
Time Elapsed From Start: 22.24 seconds


Label: 0 (0)
(sorted al), (sorted gv0), (al = al), (al = gv0), (gv0 = al), (gv0 = gv0), (false = sorted_bool al), (false = sorted_bool gv0), (true = sorted_bool al), (true = sorted_bool gv0)
(sorted (selection_sort gv0)), (Permutation al gv0), (Permutation al (selection_sort al)), (Permutation al (selection_sort gv0)), (Permutation gv0 al), (Permutation gv0 (selection_sort al)), (Permutation gv0 (selection_sort gv0)), (Permutation (selection_sort al) al), (Permutation (selection_sort al) gv0), (Permutation (selection_sort al) (selection_sort gv0))
(Permutation (selection_sort gv0) gv0), (Permutation (selection_sort gv0) (selection_sort al)), (~ sorted al), (~ sorted gv0), (al <> al), (al <> gv0), (gv0 <> al), (gv0 <> gv0), (None = Some al), (None = Some gv0)
(selection_sort al = gv0), (selection_sort gv0 = al), (selection_sort gv0 = gv0)

Label: 1 (1)
(gv1 <=* al), (sorted al), (Permutation al al), (In gv1 al), (gv1 < gv1), (gv1 <= gv1), (gv1 = gv1), (al = al), (false = sorted_bool al), (true = sorted_bool al)
(gv1 <=* selection_sort al), (gv1 <=* selsort al gv1), (gv1 <=* al ++ al), (gv1 <=* []), (length al <=* al), (length al <=* gv1 :: al), (length al <=* selection_sort al), (length al <=* selsort al gv1), (length al <=* al ++ al), (length al <=* [])
(sorted (selection_sort al)), (sorted (selsort al gv1)), (sorted (al ++ al)), (sorted []), (Permutation al (gv1 :: al)), (Permutation al (selection_sort al)), (Permutation al (selsort al gv1)), (Permutation al (al ++ al)), (Permutation al []), (Permutation (gv1 :: al) al)
(Permutation (gv1 :: al) (selsort al gv1)), (Permutation (gv1 :: al) (al ++ al)), (Permutation (gv1 :: al) []), (Permutation (selection_sort al) al), (Permutation (selection_sort al) (gv1 :: al)), (Permutation (selection_sort al) (selsort al gv1)), (Permutation (selection_sort al) (al ++ al)), (Permutation (selection_sort al) []), (Permutation (selsort al gv1) al), (Permutation (selsort al gv1) (gv1 :: al))
(Permutation (selsort al gv1) (al ++ al)), (Permutation (selsort al gv1) []), (Permutation (al ++ al) al), (Permutation (al ++ al) (gv1 :: al)), (Permutation (al ++ al) (selection_sort al)), (Permutation (al ++ al) (selsort al gv1)), (Permutation (al ++ al) []), (Permutation [] al), (Permutation [] (gv1 :: al)), (Permutation [] (selection_sort al))
(Permutation [] (al ++ al)), (In gv1 (gv1 :: al)), (In gv1 (selection_sort al)), (In gv1 (selsort al gv1)), (In gv1 (al ++ al)), (In (length al) al), (In (length al) (gv1 :: al)), (In (length al) (selection_sort al)), (In (length al) (selsort al gv1)), (In (length al) (al ++ al))
(length al < gv1), (gv1 <= length al), (length al <= gv1), (~ gv1 <=* al), (~ sorted al), (~ Permutation al al), (~ In gv1 al), (~ gv1 < gv1), (~ gv1 <= gv1), (gv1 <> gv1)
(None = Some al), (gv1 :: al = al), (gv1 :: al = selection_sort al), (gv1 :: al = selsort al gv1), (gv1 :: al = al ++ al), (gv1 :: al = []), (selection_sort al = al), (selection_sort al = al ++ al), (selsort al gv1 = al), (selsort al gv1 = selection_sort al)
(al ++ al = al), ([] = al), ([] = selection_sort al), ([] = selsort al gv1), ([] = al ++ al), (None = Some gv1), ((gv1, al) = select gv1 al), (length al = gv1)


------------------------------ SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 70.203 seconds


Label: 0 (0)
(sorted gv0), (Permutation gv0 (selection_sort al)), (Permutation (selection_sort gv0) al), (selection_sort al = gv0)

Label: 1 (1)
(length al = gv1)


------------------------------ PROCESSED SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 86.943 seconds


(selsort al (length al) = gv0)
 - (selsort al (length al) = gv0)
 - (sorted gv0)
 - (Permutation gv0 (selection_sort al))
 - (Permutation (selection_sort gv0) al)

(length al = gv1)
 - (length al = gv1)


------------------------------ FINAL RESULTS ------------------------------
Time Elapsed From Start: 86.943 seconds

Number of Result Pairs Returned: 2

(selsort al (length al) = gv0 -> sorted gv0)

(length al = gv1 -> sorted (selsort al gv1))
