Lemma Synthesis Execution Log and Results
--------------------------------------------------------------------
--------------------------------------------------------------------

Label: Initial State
Assumptions: 
 -- (Forall (fun y0 : nat => y <= y0) l)
 -- (y <= x)
 -- (In n (x :: l))

----------------------------------
Goal: (y <= n)


------------------------------ GENERALIZED VARIABLES ------------------------------
Time Elapsed From Start: 0. seconds



------------------------------ GENERALIZATIONS ------------------------------
  NOTE: The assumptions have been restricted to be only the necessary assumptions.
Time Elapsed From Start: 49.212 seconds

Label: Generalization #0
Assumptions: 
 -- (Forall (fun y0 : nat => y <= y0) l)
 -- (y <= x)
 -- (In n (x :: l))

----------------------------------
Goal: (y <= n)
Case: 3



------------------------------ SYNTHESIS PROBLEMS ------------------------------
Time Elapsed From Start: 49.769 seconds

 -- functions to consider -- 
@eq : (forall A : Type, A -> A -> Prop)
not : (Prop -> Prop)
@fst : (forall A B : Type, A * B -> A)
@snd : (forall A B : Type, A * B -> B)
length : (forall A : Type, list A -> nat)
app : (forall A : Type, list A -> list A -> list A)
le : (nat -> nat -> Prop)
lt : (nat -> nat -> Prop)
In : (forall A : Type, A -> list A -> Prop)
existsb : (forall A : Type, (A -> bool) -> list A -> bool)
forallb : (forall A : Type, (A -> bool) -> list A -> bool)
Forall : (forall A : Type, (A -> Prop) -> list A -> Prop)
nodup : (forall A : Type, (forall x y : A, {x = y} + {x <> y}) -> list A -> list A)
Permutation : (forall A : Type, list A -> list A -> Prop)
sorted : (list nat -> Prop)
is_a_sorting_algorithm : ((list nat -> list nat) -> Prop)
select : (nat -> list nat -> nat * list nat)
selsort : (list nat -> nat -> list nat)
selection_sort : (list nat -> list nat)
le_all : (nat -> list nat -> Prop)
sorted_bool : (list nat -> bool)

Label: 0 (0)
Abducted Assumption: (Forall (fun y0 : nat => y <= y0) l)
Positive Examples:
   [l := [3]; n := 2; x := 2; y := 1]
   [l := [5; 1; 2; 2]; n := 5; x := 0; y := 0]
   [l := [3; 2; 4; 0]; n := 3; x := 1; y := 0]
   [l := [5; 3; 3; 2]; n := 5; x := 3; y := 1]
   [l := [4; 3; 2; 4]; n := 4; x := 2; y := 2]
   [l := [1; 4; 2; 1]; n := 2; x := 2; y := 1]
   [l := [4; 4; 4; 1]; n := 1; x := 1; y := 1]
   [l := [2; 2]; n := 1; x := 1; y := 0]
   [l := [3; 3]; n := 2; x := 2; y := 2]
   [l := [2; 1; 3]; n := 1; x := 2; y := 0]
   etc ...

Negative Examples:
   [l := [4; 0; 2; 1]; n := 0; x := 5; y := 4]
   [l := [1; 2; 1]; n := 1; x := 3; y := 3]
   [l := [6; 3; 3; 1; 2; 6]; n := 3; x := 6; y := 5]
   [l := [1; 4; 2]; n := 1; x := 4; y := 2]
   [l := [5; 0; 4; 5]; n := 0; x := 4; y := 3]
   [l := [3; 0; 5]; n := 3; x := 4; y := 4]
   [l := [1; 1; 2; 0]; n := 0; x := 3; y := 1]
   [l := [0; 1; 4]; n := 1; x := 3; y := 3]
   [l := [3; 4; 3; 0]; n := 3; x := 4; y := 4]
   [l := [4; 1; 2]; n := 1; x := 5; y := 4]
   etc ...


Label: 0 (1)
Abducted Assumption: (y <= x)
Positive Examples:
   [l := [3]; n := 2; x := 2; y := 1]
   [l := [5; 1; 2; 2]; n := 5; x := 0; y := 0]
   [l := [3; 2; 4; 0]; n := 3; x := 1; y := 0]
   [l := [5; 3; 3; 2]; n := 5; x := 3; y := 1]
   [l := [4; 3; 2; 4]; n := 4; x := 2; y := 2]
   [l := [1; 4; 2; 1]; n := 2; x := 2; y := 1]
   [l := [4; 4; 4; 1]; n := 1; x := 1; y := 1]
   [l := [2; 2]; n := 1; x := 1; y := 0]
   [l := [3; 3]; n := 2; x := 2; y := 2]
   [l := [2; 1; 3]; n := 1; x := 2; y := 0]
   etc ...

Negative Examples:
   [l := [4; 6; 4; 2; 5]; n := 0; x := 0; y := 1]
   [l := [2; 3; 2; 2; 5]; n := 0; x := 0; y := 1]
   [l := [6]; n := 1; x := 1; y := 5]
   [l := [5; 2; 4]; n := 1; x := 1; y := 2]
   [l := [3; 5; 4]; n := 0; x := 0; y := 2]
   [l := [3; 3; 2]; n := 0; x := 0; y := 2]
   [l := []; n := 3; x := 3; y := 5]
   [l := [5; 5; 4; 5; 3]; n := 0; x := 0; y := 2]
   [l := [3]; n := 0; x := 0; y := 1]
   [l := [4]; n := 0; x := 0; y := 3]
   etc ...


Label: 0 (2)
Abducted Assumption: (In n (x :: l))
Positive Examples:
   [l := [3]; n := 2; x := 2; y := 1]
   [l := [5; 1; 2; 2]; n := 5; x := 0; y := 0]
   [l := [3; 2; 4; 0]; n := 3; x := 1; y := 0]
   [l := [5; 3; 3; 2]; n := 5; x := 3; y := 1]
   [l := [4; 3; 2; 4]; n := 4; x := 2; y := 2]
   [l := [1; 4; 2; 1]; n := 2; x := 2; y := 1]
   [l := [4; 4; 4; 1]; n := 1; x := 1; y := 1]
   [l := [2; 2]; n := 1; x := 1; y := 0]
   [l := [3; 3]; n := 2; x := 2; y := 2]
   [l := [2; 1; 3]; n := 1; x := 2; y := 0]
   etc ...

Negative Examples:
   [l := [2; 3]; n := 0; x := 3; y := 1]
   [l := [4]; n := 0; x := 4; y := 1]
   [l := [3; 3]; n := 0; x := 4; y := 1]
   [l := [3; 2; 2]; n := 0; x := 1; y := 1]
   [l := [2; 2]; n := 0; x := 2; y := 2]
   [l := [3; 4; 6]; n := 0; x := 5; y := 2]
   [l := [5; 3; 1]; n := 0; x := 2; y := 1]
   [l := [5; 5]; n := 1; x := 3; y := 3]
   [l := [5]; n := 0; x := 4; y := 2]
   [l := [2; 2; 2]; n := 0; x := 2; y := 2]
   etc ...



------------------------------ TERMS CONSIDERED IN SYNTHESIS ------------------------------
Time Elapsed From Start: 50.552 seconds


Label: 0 (0)
(false = sorted_bool l), (true = sorted_bool l), (x <=* l), (x <=* x :: l), (x <=* n :: l), (x <=* y :: l), (x <=* selection_sort l), (x <=* selsort l x), (x <=* selsort l n), (x <=* selsort l y)
(x <=* []), (n <=* l), (n <=* x :: l), (n <=* n :: l), (n <=* y :: l), (n <=* selection_sort l), (n <=* selsort l x), (n <=* selsort l n), (n <=* selsort l y), (n <=* l ++ l)
(y <=* l), (y <=* x :: l), (y <=* n :: l), (y <=* y :: l), (y <=* selection_sort l), (y <=* selsort l x), (y <=* selsort l n), (y <=* selsort l y), (y <=* l ++ l), (y <=* [])
(length l <=* x :: l), (length l <=* n :: l), (length l <=* y :: l), (length l <=* selection_sort l), (length l <=* selsort l x), (length l <=* selsort l n), (length l <=* selsort l y), (length l <=* l ++ l), (length l <=* []), (sorted l)
(sorted (n :: l)), (sorted (y :: l)), (sorted (selection_sort l)), (sorted (selsort l x)), (sorted (selsort l n)), (sorted (selsort l y)), (sorted (l ++ l)), (sorted []), (Permutation l (x :: l)), (Permutation l (n :: l))
(Permutation l (selection_sort l)), (Permutation l (selsort l x)), (Permutation l (selsort l n)), (Permutation l (selsort l y)), (Permutation l (l ++ l)), (Permutation l []), (Permutation (x :: l) l), (Permutation (x :: l) (n :: l)), (Permutation (x :: l) (y :: l)), (Permutation (x :: l) (selection_sort l))
(Permutation (x :: l) (selsort l n)), (Permutation (x :: l) (selsort l y)), (Permutation (x :: l) (l ++ l)), (Permutation (x :: l) []), (Permutation (n :: l) l), (Permutation (n :: l) (x :: l)), (Permutation (n :: l) (y :: l)), (Permutation (n :: l) (selection_sort l)), (Permutation (n :: l) (selsort l x)), (Permutation (n :: l) (selsort l n))
(Permutation (n :: l) (l ++ l)), (Permutation (n :: l) []), (Permutation (y :: l) l), (Permutation (y :: l) (x :: l)), (Permutation (y :: l) (n :: l)), (Permutation (y :: l) (selection_sort l)), (Permutation (y :: l) (selsort l x)), (Permutation (y :: l) (selsort l n)), (Permutation (y :: l) (selsort l y)), (Permutation (y :: l) (l ++ l))
(Permutation (selection_sort l) l), (Permutation (selection_sort l) (x :: l)), (Permutation (selection_sort l) (n :: l)), (Permutation (selection_sort l) (y :: l)), (Permutation (selection_sort l) (selsort l x)), (Permutation (selection_sort l) (selsort l n)), (Permutation (selection_sort l) (selsort l y)), (Permutation (selection_sort l) (l ++ l)), (Permutation (selection_sort l) []), (Permutation (selsort l x) l)
(Permutation (selsort l x) (n :: l)), (Permutation (selsort l x) (y :: l)), (Permutation (selsort l x) (selection_sort l)), (Permutation (selsort l x) (selsort l n)), (Permutation (selsort l x) (selsort l y)), (Permutation (selsort l x) (l ++ l)), (Permutation (selsort l x) []), (Permutation (selsort l n) l), (Permutation (selsort l n) (x :: l)), (Permutation (selsort l n) (n :: l))
(Permutation (selsort l n) (selection_sort l)), (Permutation (selsort l n) (selsort l x)), (Permutation (selsort l n) (selsort l y)), (Permutation (selsort l n) (l ++ l)), (Permutation (selsort l n) []), (Permutation (selsort l y) l), (Permutation (selsort l y) (x :: l)), (Permutation (selsort l y) (n :: l)), (Permutation (selsort l y) (y :: l)), (Permutation (selsort l y) (selection_sort l))
(Permutation (selsort l y) (selsort l n)), (Permutation (selsort l y) (l ++ l)), (Permutation (selsort l y) []), (Permutation (l ++ l) l), (Permutation (l ++ l) (x :: l)), (Permutation (l ++ l) (n :: l)), (Permutation (l ++ l) (y :: l)), (Permutation (l ++ l) (selection_sort l)), (Permutation (l ++ l) (selsort l x)), (Permutation (l ++ l) (selsort l n))
(Permutation (l ++ l) []), (Permutation [] l), (Permutation [] (x :: l)), (Permutation [] (n :: l)), (Permutation [] (y :: l)), (Permutation [] (selection_sort l)), (Permutation [] (selsort l x)), (Permutation [] (selsort l n)), (Permutation [] (selsort l y)), (Permutation [] (l ++ l))
(In x (x :: l)), (In x (n :: l)), (In x (y :: l)), (In x (selection_sort l)), (In x (selsort l x)), (In x (selsort l n)), (In x (selsort l y)), (In x (l ++ l)), (In n l), (In n (x :: l))
(In n (y :: l)), (In n (selection_sort l)), (In n (selsort l x)), (In n (selsort l n)), (In n (selsort l y)), (In n (l ++ l)), (In y l), (In y (x :: l)), (In y (n :: l)), (In y (y :: l))
(In y (selsort l x)), (In y (selsort l n)), (In y (selsort l y)), (In y (l ++ l)), (In (length l) l), (In (length l) (x :: l)), (In (length l) (n :: l)), (In (length l) (y :: l)), (In (length l) (selection_sort l)), (In (length l) (selsort l x))
(In (length l) (selsort l y)), (In (length l) (l ++ l)), (x < n), (x < y), (x < length l), (n < x), (n < y), (n < length l), (y < x), (y < n)
(length l < x), (length l < n), (length l < y), (x <= n), (x <= y), (x <= length l), (n <= x), (n <= y), (n <= length l), (y <= x)
(y <= length l), (length l <= x), (length l <= n), (length l <= y), (selection_sort l = l), (selection_sort l = l ++ l), (selsort l x = l), (selsort l x = selection_sort l), (selsort l x = l ++ l), (selsort l n = l)
(selsort l n = l ++ l), (selsort l y = l), (selsort l y = selection_sort l), (selsort l y = l ++ l), (l ++ l = l), (length l = x), (length l = n), (length l = y)

Label: 0 (1)
(false = sorted_bool l), (true = sorted_bool l), (x <=* l), (x <=* x :: l), (x <=* n :: l), (x <=* y :: l), (x <=* selection_sort l), (x <=* selsort l x), (x <=* selsort l n), (x <=* selsort l y)
(x <=* []), (n <=* l), (n <=* x :: l), (n <=* n :: l), (n <=* y :: l), (n <=* selection_sort l), (n <=* selsort l x), (n <=* selsort l n), (n <=* selsort l y), (n <=* l ++ l)
(y <=* l), (y <=* x :: l), (y <=* n :: l), (y <=* y :: l), (y <=* selection_sort l), (y <=* selsort l x), (y <=* selsort l n), (y <=* selsort l y), (y <=* l ++ l), (y <=* [])
(length l <=* x :: l), (length l <=* n :: l), (length l <=* y :: l), (length l <=* selection_sort l), (length l <=* selsort l x), (length l <=* selsort l n), (length l <=* selsort l y), (length l <=* l ++ l), (length l <=* []), (sorted l)
(sorted (n :: l)), (sorted (y :: l)), (sorted (selection_sort l)), (sorted (selsort l x)), (sorted (selsort l n)), (sorted (selsort l y)), (sorted (l ++ l)), (sorted []), (Permutation l (x :: l)), (Permutation l (n :: l))
(Permutation l (selection_sort l)), (Permutation l (selsort l x)), (Permutation l (selsort l n)), (Permutation l (selsort l y)), (Permutation l (l ++ l)), (Permutation l []), (Permutation (x :: l) l), (Permutation (x :: l) (n :: l)), (Permutation (x :: l) (y :: l)), (Permutation (x :: l) (selection_sort l))
(Permutation (x :: l) (selsort l n)), (Permutation (x :: l) (selsort l y)), (Permutation (x :: l) (l ++ l)), (Permutation (x :: l) []), (Permutation (n :: l) l), (Permutation (n :: l) (x :: l)), (Permutation (n :: l) (y :: l)), (Permutation (n :: l) (selection_sort l)), (Permutation (n :: l) (selsort l x)), (Permutation (n :: l) (selsort l n))
(Permutation (n :: l) (l ++ l)), (Permutation (n :: l) []), (Permutation (y :: l) l), (Permutation (y :: l) (x :: l)), (Permutation (y :: l) (n :: l)), (Permutation (y :: l) (selection_sort l)), (Permutation (y :: l) (selsort l x)), (Permutation (y :: l) (selsort l n)), (Permutation (y :: l) (selsort l y)), (Permutation (y :: l) (l ++ l))
(Permutation (selection_sort l) l), (Permutation (selection_sort l) (x :: l)), (Permutation (selection_sort l) (n :: l)), (Permutation (selection_sort l) (y :: l)), (Permutation (selection_sort l) (selsort l x)), (Permutation (selection_sort l) (selsort l n)), (Permutation (selection_sort l) (selsort l y)), (Permutation (selection_sort l) (l ++ l)), (Permutation (selection_sort l) []), (Permutation (selsort l x) l)
(Permutation (selsort l x) (n :: l)), (Permutation (selsort l x) (y :: l)), (Permutation (selsort l x) (selection_sort l)), (Permutation (selsort l x) (selsort l n)), (Permutation (selsort l x) (selsort l y)), (Permutation (selsort l x) (l ++ l)), (Permutation (selsort l x) []), (Permutation (selsort l n) l), (Permutation (selsort l n) (x :: l)), (Permutation (selsort l n) (n :: l))
(Permutation (selsort l n) (selection_sort l)), (Permutation (selsort l n) (selsort l x)), (Permutation (selsort l n) (selsort l y)), (Permutation (selsort l n) (l ++ l)), (Permutation (selsort l n) []), (Permutation (selsort l y) l), (Permutation (selsort l y) (x :: l)), (Permutation (selsort l y) (n :: l)), (Permutation (selsort l y) (y :: l)), (Permutation (selsort l y) (selection_sort l))
(Permutation (selsort l y) (selsort l n)), (Permutation (selsort l y) (l ++ l)), (Permutation (selsort l y) []), (Permutation (l ++ l) l), (Permutation (l ++ l) (x :: l)), (Permutation (l ++ l) (n :: l)), (Permutation (l ++ l) (y :: l)), (Permutation (l ++ l) (selection_sort l)), (Permutation (l ++ l) (selsort l x)), (Permutation (l ++ l) (selsort l n))
(Permutation (l ++ l) []), (Permutation [] l), (Permutation [] (x :: l)), (Permutation [] (n :: l)), (Permutation [] (y :: l)), (Permutation [] (selection_sort l)), (Permutation [] (selsort l x)), (Permutation [] (selsort l n)), (Permutation [] (selsort l y)), (Permutation [] (l ++ l))
(In x (x :: l)), (In x (n :: l)), (In x (y :: l)), (In x (selection_sort l)), (In x (selsort l x)), (In x (selsort l n)), (In x (selsort l y)), (In x (l ++ l)), (In n l), (In n (x :: l))
(In n (y :: l)), (In n (selection_sort l)), (In n (selsort l x)), (In n (selsort l n)), (In n (selsort l y)), (In n (l ++ l)), (In y l), (In y (x :: l)), (In y (n :: l)), (In y (y :: l))
(In y (selsort l x)), (In y (selsort l n)), (In y (selsort l y)), (In y (l ++ l)), (In (length l) l), (In (length l) (x :: l)), (In (length l) (n :: l)), (In (length l) (y :: l)), (In (length l) (selection_sort l)), (In (length l) (selsort l x))
(In (length l) (selsort l y)), (In (length l) (l ++ l)), (x < n), (x < y), (x < length l), (n < x), (n < y), (n < length l), (y < x), (y < n)
(length l < x), (length l < n), (length l < y), (x <= n), (x <= y), (x <= length l), (n <= x), (n <= y), (n <= length l), (y <= x)
(y <= length l), (length l <= x), (length l <= n), (length l <= y), (selection_sort l = l), (selection_sort l = l ++ l), (selsort l x = l), (selsort l x = selection_sort l), (selsort l x = l ++ l), (selsort l n = l)
(selsort l n = l ++ l), (selsort l y = l), (selsort l y = selection_sort l), (selsort l y = l ++ l), (l ++ l = l), (length l = x), (length l = n), (length l = y)

Label: 0 (2)
(false = sorted_bool l), (true = sorted_bool l), (x <=* l), (x <=* x :: l), (x <=* n :: l), (x <=* y :: l), (x <=* selection_sort l), (x <=* selsort l x), (x <=* selsort l n), (x <=* selsort l y)
(x <=* []), (n <=* l), (n <=* x :: l), (n <=* n :: l), (n <=* y :: l), (n <=* selection_sort l), (n <=* selsort l x), (n <=* selsort l n), (n <=* selsort l y), (n <=* l ++ l)
(y <=* l), (y <=* x :: l), (y <=* n :: l), (y <=* y :: l), (y <=* selection_sort l), (y <=* selsort l x), (y <=* selsort l n), (y <=* selsort l y), (y <=* l ++ l), (y <=* [])
(length l <=* x :: l), (length l <=* n :: l), (length l <=* y :: l), (length l <=* selection_sort l), (length l <=* selsort l x), (length l <=* selsort l n), (length l <=* selsort l y), (length l <=* l ++ l), (length l <=* []), (sorted l)
(sorted (n :: l)), (sorted (y :: l)), (sorted (selection_sort l)), (sorted (selsort l x)), (sorted (selsort l n)), (sorted (selsort l y)), (sorted (l ++ l)), (sorted []), (Permutation l (x :: l)), (Permutation l (n :: l))
(Permutation l (selection_sort l)), (Permutation l (selsort l x)), (Permutation l (selsort l n)), (Permutation l (selsort l y)), (Permutation l (l ++ l)), (Permutation l []), (Permutation (x :: l) l), (Permutation (x :: l) (n :: l)), (Permutation (x :: l) (y :: l)), (Permutation (x :: l) (selection_sort l))
(Permutation (x :: l) (selsort l n)), (Permutation (x :: l) (selsort l y)), (Permutation (x :: l) (l ++ l)), (Permutation (x :: l) []), (Permutation (n :: l) l), (Permutation (n :: l) (x :: l)), (Permutation (n :: l) (y :: l)), (Permutation (n :: l) (selection_sort l)), (Permutation (n :: l) (selsort l x)), (Permutation (n :: l) (selsort l n))
(Permutation (n :: l) (l ++ l)), (Permutation (n :: l) []), (Permutation (y :: l) l), (Permutation (y :: l) (x :: l)), (Permutation (y :: l) (n :: l)), (Permutation (y :: l) (selection_sort l)), (Permutation (y :: l) (selsort l x)), (Permutation (y :: l) (selsort l n)), (Permutation (y :: l) (selsort l y)), (Permutation (y :: l) (l ++ l))
(Permutation (selection_sort l) l), (Permutation (selection_sort l) (x :: l)), (Permutation (selection_sort l) (n :: l)), (Permutation (selection_sort l) (y :: l)), (Permutation (selection_sort l) (selsort l x)), (Permutation (selection_sort l) (selsort l n)), (Permutation (selection_sort l) (selsort l y)), (Permutation (selection_sort l) (l ++ l)), (Permutation (selection_sort l) []), (Permutation (selsort l x) l)
(Permutation (selsort l x) (n :: l)), (Permutation (selsort l x) (y :: l)), (Permutation (selsort l x) (selection_sort l)), (Permutation (selsort l x) (selsort l n)), (Permutation (selsort l x) (selsort l y)), (Permutation (selsort l x) (l ++ l)), (Permutation (selsort l x) []), (Permutation (selsort l n) l), (Permutation (selsort l n) (x :: l)), (Permutation (selsort l n) (n :: l))
(Permutation (selsort l n) (selection_sort l)), (Permutation (selsort l n) (selsort l x)), (Permutation (selsort l n) (selsort l y)), (Permutation (selsort l n) (l ++ l)), (Permutation (selsort l n) []), (Permutation (selsort l y) l), (Permutation (selsort l y) (x :: l)), (Permutation (selsort l y) (n :: l)), (Permutation (selsort l y) (y :: l)), (Permutation (selsort l y) (selection_sort l))
(Permutation (selsort l y) (selsort l n)), (Permutation (selsort l y) (l ++ l)), (Permutation (selsort l y) []), (Permutation (l ++ l) l), (Permutation (l ++ l) (x :: l)), (Permutation (l ++ l) (n :: l)), (Permutation (l ++ l) (y :: l)), (Permutation (l ++ l) (selection_sort l)), (Permutation (l ++ l) (selsort l x)), (Permutation (l ++ l) (selsort l n))
(Permutation (l ++ l) []), (Permutation [] l), (Permutation [] (x :: l)), (Permutation [] (n :: l)), (Permutation [] (y :: l)), (Permutation [] (selection_sort l)), (Permutation [] (selsort l x)), (Permutation [] (selsort l n)), (Permutation [] (selsort l y)), (Permutation [] (l ++ l))
(In x (x :: l)), (In x (n :: l)), (In x (y :: l)), (In x (selection_sort l)), (In x (selsort l x)), (In x (selsort l n)), (In x (selsort l y)), (In x (l ++ l)), (In n l), (In n (x :: l))
(In n (y :: l)), (In n (selection_sort l)), (In n (selsort l x)), (In n (selsort l n)), (In n (selsort l y)), (In n (l ++ l)), (In y l), (In y (x :: l)), (In y (n :: l)), (In y (y :: l))
(In y (selsort l x)), (In y (selsort l n)), (In y (selsort l y)), (In y (l ++ l)), (In (length l) l), (In (length l) (x :: l)), (In (length l) (n :: l)), (In (length l) (y :: l)), (In (length l) (selection_sort l)), (In (length l) (selsort l x))
(In (length l) (selsort l y)), (In (length l) (l ++ l)), (x < n), (x < y), (x < length l), (n < x), (n < y), (n < length l), (y < x), (y < n)
(length l < x), (length l < n), (length l < y), (x <= n), (x <= y), (x <= length l), (n <= x), (n <= y), (n <= length l), (y <= x)
(y <= length l), (length l <= x), (length l <= n), (length l <= y), (selection_sort l = l), (selection_sort l = l ++ l), (selsort l x = l), (selsort l x = selection_sort l), (selsort l x = l ++ l), (selsort l n = l)
(selsort l n = l ++ l), (selsort l y = l), (selsort l y = selection_sort l), (selsort l y = l ++ l), (l ++ l = l), (length l = x), (length l = n), (length l = y)


------------------------------ SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 277.147 seconds


Label: 0 (0)
(y <=* l), (y <=* x :: l), (y <=* n :: l), (y <=* y :: l), (y <=* selection_sort l), (y <=* selsort l x), (y <=* selsort l y), (y <=* l ++ l)

Label: 0 (1)
(y <=* x :: l), (y <=* n :: l), (y <= x)

Label: 0 (2)
(y <=* n :: l), (In n (x :: l))


------------------------------ FINAL RESULTS ------------------------------
Time Elapsed From Start: 306.401 seconds


(Forall (fun y0 : nat => y <= y0) l -> y <=* selsort l x)
(y <=* n :: l -> y <= n)
(Forall (fun y0 : nat => y <= y0) l -> y <=* l)
(y <=* n :: l -> y <= n)
(y <=* n :: l -> y <= n)