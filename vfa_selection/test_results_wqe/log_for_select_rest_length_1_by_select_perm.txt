Lemma Synthesis Execution Log and Results
--------------------------------------------------------------------
--------------------------------------------------------------------

Label: Initial State
Assumptions: 
 -- (select x l = (y, r))

----------------------------------
Goal: (length l = length r)


------------------------------ GENERALIZED VARIABLES ------------------------------
Time Elapsed From Start: 0. seconds

gv0 : nat = (length l)
gv1 : nat = (length r)


------------------------------ GENERALIZATIONS ------------------------------
  NOTE: The assumptions have been restricted to be only the necessary assumptions.
Time Elapsed From Start: 32.155 seconds

Label: Generalization #0
Assumptions: 
 -- (select x l = (y, r))

----------------------------------
Goal: (length l = gv1)
Case: 2

Label: Generalization #1
Assumptions: 
 -- (select x l = (y, r))

----------------------------------
Goal: (gv0 = length r)
Case: 2

Label: Generalization #2
Assumptions: 
 -- (select x l = (y, r))

----------------------------------
Goal: (length l = length r)
Case: 3



------------------------------ SYNTHESIS PROBLEMS ------------------------------
Time Elapsed From Start: 33.097 seconds

 -- functions to consider -- 
@eq : (forall A : Type, A -> A -> Prop)
not : (Prop -> Prop)
@fst : (forall A B : Type, A * B -> A)
@snd : (forall A B : Type, A * B -> B)
length : (forall A : Type, list A -> nat)
app : (forall A : Type, list A -> list A -> list A)
le : (nat -> nat -> Prop)
lt : (nat -> nat -> Prop)
In : (forall A : Type, A -> list A -> Prop)
existsb : (forall A : Type, (A -> bool) -> list A -> bool)
forallb : (forall A : Type, (A -> bool) -> list A -> bool)
Forall : (forall A : Type, (A -> Prop) -> list A -> Prop)
nodup : (forall A : Type, (forall x y : A, {x = y} + {x <> y}) -> list A -> list A)
Permutation : (forall A : Type, list A -> list A -> Prop)
sorted : (list nat -> Prop)
is_a_sorting_algorithm : ((list nat -> list nat) -> Prop)
select : (nat -> list nat -> nat * list nat)
selsort : (list nat -> nat -> list nat)
selection_sort : (list nat -> list nat)
le_all : (nat -> list nat -> Prop)
sorted_bool : (list nat -> bool)

Label: 0 (0)
Abducted Assumption: n/a
Positive Examples:
   [gv1 := 0; l := []; r := []; x := 4; y := 4]
   [gv1 := 2; l := [0; 2]; r := [2; 2]; x := 2; y := 0]
   [gv1 := 1; l := [3]; r := [3]; x := 3; y := 3]
   [gv1 := 2; l := [0; 0]; r := [2; 0]; x := 2; y := 0]
   [gv1 := 1; l := [2]; r := [2]; x := 2; y := 2]
   [gv1 := 0; l := []; r := []; x := 2; y := 2]
   [gv1 := 1; l := [3]; r := [3]; x := 1; y := 1]
   [gv1 := 2; l := [0; 1]; r := [3; 1]; x := 3; y := 0]
   [gv1 := 0; l := []; r := []; x := 6; y := 6]
   [gv1 := 1; l := [0]; r := [0]; x := 0; y := 0]
   etc ...

Negative Examples:
   [gv1 := 1; l := [0; 1]; r := [1; 1]; x := 1; y := 0]
   [gv1 := 1; l := []; r := []; x := 6; y := 6]
   [gv1 := 0; l := [0]; r := [2]; x := 2; y := 0]
   [gv1 := 2; l := [3]; r := [3]; x := 3; y := 3]
   [gv1 := 3; l := []; r := []; x := 3; y := 3]
   [gv1 := 2; l := []; r := []; x := 4; y := 4]
   [gv1 := 1; l := [1; 1]; r := [2; 1]; x := 2; y := 1]
   [gv1 := 0; l := [1]; r := [3]; x := 3; y := 1]
   [gv1 := 1; l := [0; 1]; r := [2; 1]; x := 2; y := 0]
   [gv1 := 2; l := [0]; r := [2]; x := 2; y := 0]
   etc ...


Label: 1 (1)
Abducted Assumption: n/a
Positive Examples:
   [gv0 := 1; l := [2]; r := [2]; x := 0; y := 0]
   [gv0 := 1; l := [2]; r := [2]; x := 1; y := 1]
   [gv0 := 1; l := [1]; r := [2]; x := 2; y := 1]
   [gv0 := 2; l := [0; 1]; r := [2; 1]; x := 2; y := 0]
   [gv0 := 0; l := []; r := []; x := 3; y := 3]
   [gv0 := 2; l := [0; 3]; r := [0; 3]; x := 0; y := 0]
   [gv0 := 0; l := []; r := []; x := 4; y := 4]
   [gv0 := 1; l := [0]; r := [1]; x := 1; y := 0]
   [gv0 := 0; l := []; r := []; x := 2; y := 2]
   [gv0 := 1; l := [1]; r := [1]; x := 0; y := 0]
   etc ...

Negative Examples:
   [gv0 := 2; l := [2]; r := [2]; x := 0; y := 0]
   [gv0 := 3; l := [0]; r := [2]; x := 2; y := 0]
   [gv0 := 2; l := [1]; r := [1]; x := 0; y := 0]
   [gv0 := 4; l := []; r := []; x := 0; y := 0]
   [gv0 := 3; l := [2]; r := [2]; x := 1; y := 1]
   [gv0 := 1; l := [0; 2]; r := [1; 2]; x := 1; y := 0]
   [gv0 := 0; l := [1; 2]; r := [1; 2]; x := 0; y := 0]
   [gv0 := 3; l := [3; 0]; r := [3; 3]; x := 3; y := 0]
   [gv0 := 1; l := []; r := []; x := 3; y := 3]
   [gv0 := 0; l := [1]; r := [2]; x := 2; y := 1]
   etc ...


Label: 2 (2)
Abducted Assumption: (select x l = (y, r))
Positive Examples:
   [l := [3]; r := [3]; x := 2; y := 2]
   [l := [3; 1; 3]; r := [3; 2; 3]; x := 2; y := 1]
   [l := [2]; r := [2]; x := 1; y := 1]
   [l := [2; 1]; r := [2; 1]; x := 0; y := 0]
   [l := [2; 2]; r := [2; 2]; x := 2; y := 2]
   [l := [0; 0]; r := [2; 0]; x := 2; y := 0]
   [l := [5]; r := [5]; x := 1; y := 1]
   [l := [2]; r := [2]; x := 0; y := 0]
   [l := [0]; r := [0]; x := 0; y := 0]
   [l := [3]; r := [3]; x := 1; y := 1]
   etc ...

Negative Examples:
   [l := [1; 3]; r := []; x := 2; y := 3]
   [l := [3; 5; 2; 3]; r := []; x := 6; y := 5]
   [l := [1; 3; 3]; r := []; x := 3; y := 3]
   [l := [6; 2; 2; 6; 4]; r := []; x := 5; y := 2]
   [l := [3]; r := [3; 0; 4; 3; 3]; x := 0; y := 1]
   [l := [0]; r := [0; 3]; x := 1; y := 3]
   [l := [0; 1; 5; 0; 1; 4]; r := [5]; x := 1; y := 0]
   [l := [2; 5; 3; 0; 0]; r := [3; 3; 4]; x := 4; y := 1]
   [l := [4; 2; 0; 4]; r := [2; 2; 2; 2; 2]; x := 5; y := 3]
   [l := [3; 2; 2]; r := []; x := 0; y := 1]
   etc ...



------------------------------ TERMS CONSIDERED IN SYNTHESIS ------------------------------
Time Elapsed From Start: 34.031 seconds


Label: 0 (0)
(y <=* gv1 :: r), (y <=* gv1 :: l), (y <=* selsort r gv1), (y <=* selsort l gv1), (x <=* gv1 :: r), (x <=* gv1 :: l), (x <=* selsort r gv1), (x <=* selsort l gv1), (gv1 <=* r), (gv1 <=* l)
(gv1 <=* y :: l), (gv1 <=* x :: r), (gv1 <=* x :: l), (gv1 <=* gv1 :: r), (gv1 <=* gv1 :: l), (gv1 <=* selection_sort r), (gv1 <=* selection_sort l), (gv1 <=* selsort r y), (gv1 <=* selsort r x), (gv1 <=* selsort r gv1)
(gv1 <=* selsort l x), (gv1 <=* selsort l gv1), (gv1 <=* r ++ r), (gv1 <=* r ++ l), (gv1 <=* l ++ r), (gv1 <=* l ++ l), (gv1 <=* []), (length r <=* gv1 :: r), (length r <=* gv1 :: l), (length r <=* selsort r gv1)
(length l <=* gv1 :: r), (length l <=* gv1 :: l), (length l <=* selsort r gv1), (length l <=* selsort l gv1), (sorted (gv1 :: r)), (sorted (gv1 :: l)), (sorted (selsort r gv1)), (sorted (selsort l gv1)), (Permutation r (gv1 :: r)), (Permutation r (gv1 :: l))
(Permutation r (selsort l gv1)), (Permutation l (gv1 :: r)), (Permutation l (gv1 :: l)), (Permutation l (selsort r gv1)), (Permutation l (selsort l gv1)), (Permutation (y :: r) (gv1 :: r)), (Permutation (y :: r) (gv1 :: l)), (Permutation (y :: r) (selsort r gv1)), (Permutation (y :: r) (selsort l gv1)), (Permutation (y :: l) (gv1 :: r))
(Permutation (y :: l) (selsort r gv1)), (Permutation (y :: l) (selsort l gv1)), (Permutation (x :: r) (gv1 :: r)), (Permutation (x :: r) (gv1 :: l)), (Permutation (x :: r) (selsort r gv1)), (Permutation (x :: r) (selsort l gv1)), (Permutation (x :: l) (gv1 :: r)), (Permutation (x :: l) (gv1 :: l)), (Permutation (x :: l) (selsort r gv1)), (Permutation (x :: l) (selsort l gv1))
(Permutation (gv1 :: r) l), (Permutation (gv1 :: r) (y :: r)), (Permutation (gv1 :: r) (y :: l)), (Permutation (gv1 :: r) (x :: r)), (Permutation (gv1 :: r) (x :: l)), (Permutation (gv1 :: r) (gv1 :: l)), (Permutation (gv1 :: r) (selection_sort r)), (Permutation (gv1 :: r) (selection_sort l)), (Permutation (gv1 :: r) (selsort r y)), (Permutation (gv1 :: r) (selsort r x))
(Permutation (gv1 :: r) (selsort l y)), (Permutation (gv1 :: r) (selsort l x)), (Permutation (gv1 :: r) (selsort l gv1)), (Permutation (gv1 :: r) (r ++ r)), (Permutation (gv1 :: r) (r ++ l)), (Permutation (gv1 :: r) (l ++ r)), (Permutation (gv1 :: r) (l ++ l)), (Permutation (gv1 :: r) []), (Permutation (gv1 :: l) r), (Permutation (gv1 :: l) l)
(Permutation (gv1 :: l) (y :: l)), (Permutation (gv1 :: l) (x :: r)), (Permutation (gv1 :: l) (x :: l)), (Permutation (gv1 :: l) (gv1 :: r)), (Permutation (gv1 :: l) (selection_sort r)), (Permutation (gv1 :: l) (selection_sort l)), (Permutation (gv1 :: l) (selsort r y)), (Permutation (gv1 :: l) (selsort r x)), (Permutation (gv1 :: l) (selsort r gv1)), (Permutation (gv1 :: l) (selsort l y))
(Permutation (gv1 :: l) (selsort l gv1)), (Permutation (gv1 :: l) (r ++ r)), (Permutation (gv1 :: l) (r ++ l)), (Permutation (gv1 :: l) (l ++ r)), (Permutation (gv1 :: l) (l ++ l)), (Permutation (gv1 :: l) []), (Permutation (selection_sort r) (gv1 :: r)), (Permutation (selection_sort r) (gv1 :: l)), (Permutation (selection_sort r) (selsort r gv1)), (Permutation (selection_sort r) (selsort l gv1))
(Permutation (selection_sort l) (gv1 :: l)), (Permutation (selection_sort l) (selsort r gv1)), (Permutation (selection_sort l) (selsort l gv1)), (Permutation (selsort r y) (gv1 :: r)), (Permutation (selsort r y) (gv1 :: l)), (Permutation (selsort r y) (selsort r gv1)), (Permutation (selsort r y) (selsort l gv1)), (Permutation (selsort r x) (gv1 :: r)), (Permutation (selsort r x) (gv1 :: l)), (Permutation (selsort r x) (selsort r gv1))
(Permutation (selsort r gv1) r), (Permutation (selsort r gv1) l), (Permutation (selsort r gv1) (y :: r)), (Permutation (selsort r gv1) (y :: l)), (Permutation (selsort r gv1) (x :: r)), (Permutation (selsort r gv1) (x :: l)), (Permutation (selsort r gv1) (gv1 :: r)), (Permutation (selsort r gv1) (gv1 :: l)), (Permutation (selsort r gv1) (selection_sort r)), (Permutation (selsort r gv1) (selection_sort l))
(Permutation (selsort r gv1) (selsort r x)), (Permutation (selsort r gv1) (selsort l y)), (Permutation (selsort r gv1) (selsort l x)), (Permutation (selsort r gv1) (selsort l gv1)), (Permutation (selsort r gv1) (r ++ r)), (Permutation (selsort r gv1) (r ++ l)), (Permutation (selsort r gv1) (l ++ r)), (Permutation (selsort r gv1) (l ++ l)), (Permutation (selsort r gv1) []), (Permutation (selsort l y) (gv1 :: r))
(Permutation (selsort l y) (selsort r gv1)), (Permutation (selsort l y) (selsort l gv1)), (Permutation (selsort l x) (gv1 :: r)), (Permutation (selsort l x) (gv1 :: l)), (Permutation (selsort l x) (selsort r gv1)), (Permutation (selsort l x) (selsort l gv1)), (Permutation (selsort l gv1) r), (Permutation (selsort l gv1) l), (Permutation (selsort l gv1) (y :: r)), (Permutation (selsort l gv1) (y :: l))
(Permutation (selsort l gv1) (x :: l)), (Permutation (selsort l gv1) (gv1 :: r)), (Permutation (selsort l gv1) (gv1 :: l)), (Permutation (selsort l gv1) (selection_sort r)), (Permutation (selsort l gv1) (selection_sort l)), (Permutation (selsort l gv1) (selsort r y)), (Permutation (selsort l gv1) (selsort r x)), (Permutation (selsort l gv1) (selsort r gv1)), (Permutation (selsort l gv1) (selsort l y)), (Permutation (selsort l gv1) (selsort l x))
(Permutation (selsort l gv1) (r ++ l)), (Permutation (selsort l gv1) (l ++ r)), (Permutation (selsort l gv1) (l ++ l)), (Permutation (selsort l gv1) []), (Permutation (r ++ r) (gv1 :: r)), (Permutation (r ++ r) (gv1 :: l)), (Permutation (r ++ r) (selsort r gv1)), (Permutation (r ++ r) (selsort l gv1)), (Permutation (r ++ l) (gv1 :: r)), (Permutation (r ++ l) (gv1 :: l))
(Permutation (r ++ l) (selsort l gv1)), (Permutation (l ++ r) (gv1 :: r)), (Permutation (l ++ r) (gv1 :: l)), (Permutation (l ++ r) (selsort r gv1)), (Permutation (l ++ r) (selsort l gv1)), (Permutation (l ++ l) (gv1 :: r)), (Permutation (l ++ l) (gv1 :: l)), (Permutation (l ++ l) (selsort r gv1)), (Permutation (l ++ l) (selsort l gv1)), (Permutation [] (gv1 :: r))
(Permutation [] (selsort r gv1)), (Permutation [] (selsort l gv1)), (In y (gv1 :: r)), (In y (gv1 :: l)), (In y (selsort r gv1)), (In y (selsort l gv1)), (In x (gv1 :: r)), (In x (gv1 :: l)), (In x (selsort r gv1)), (In x (selsort l gv1))
(In gv1 l), (In gv1 (y :: r)), (In gv1 (y :: l)), (In gv1 (x :: r)), (In gv1 (x :: l)), (In gv1 (gv1 :: r)), (In gv1 (gv1 :: l)), (In gv1 (selection_sort r)), (In gv1 (selection_sort l)), (In gv1 (selsort r y))
(In gv1 (selsort r gv1)), (In gv1 (selsort l y)), (In gv1 (selsort l x)), (In gv1 (selsort l gv1)), (In gv1 (r ++ r)), (In gv1 (r ++ l)), (In gv1 (l ++ r)), (In gv1 (l ++ l)), (In (length r) (gv1 :: r)), (In (length r) (gv1 :: l))
(In (length r) (selsort l gv1)), (In (length l) (gv1 :: r)), (In (length l) (gv1 :: l)), (In (length l) (selsort r gv1)), (In (length l) (selsort l gv1)), (y < gv1), (x < gv1), (gv1 < y), (gv1 < x), (gv1 < length r)
(length r < gv1), (length l < gv1), (y <= gv1), (x <= gv1), (gv1 <= y), (gv1 <= x), (gv1 <= length r), (gv1 <= length l), (length r <= gv1), (length l <= gv1)
(selsort r gv1 = l), (selsort r gv1 = selection_sort r), (selsort r gv1 = selection_sort l), (selsort r gv1 = r ++ r), (selsort r gv1 = r ++ l), (selsort r gv1 = l ++ r), (selsort r gv1 = l ++ l), (selsort l gv1 = r), (selsort l gv1 = l), (selsort l gv1 = selection_sort r)
(selsort l gv1 = r ++ r), (selsort l gv1 = r ++ l), (selsort l gv1 = l ++ r), (selsort l gv1 = l ++ l), (length r = gv1), (length l = gv1)

Label: 1 (1)
(y <=* gv0 :: l), (y <=* gv0 :: r), (y <=* selsort l gv0), (y <=* selsort r gv0), (x <=* gv0 :: l), (x <=* gv0 :: r), (x <=* selsort l gv0), (x <=* selsort r gv0), (gv0 <=* l), (gv0 <=* r)
(gv0 <=* y :: r), (gv0 <=* x :: l), (gv0 <=* x :: r), (gv0 <=* gv0 :: l), (gv0 <=* gv0 :: r), (gv0 <=* selection_sort l), (gv0 <=* selection_sort r), (gv0 <=* selsort l y), (gv0 <=* selsort l x), (gv0 <=* selsort l gv0)
(gv0 <=* selsort r x), (gv0 <=* selsort r gv0), (gv0 <=* l ++ l), (gv0 <=* l ++ r), (gv0 <=* r ++ l), (gv0 <=* r ++ r), (gv0 <=* []), (length l <=* gv0 :: l), (length l <=* gv0 :: r), (length l <=* selsort l gv0)
(length r <=* gv0 :: l), (length r <=* gv0 :: r), (length r <=* selsort l gv0), (length r <=* selsort r gv0), (sorted (gv0 :: l)), (sorted (gv0 :: r)), (sorted (selsort l gv0)), (sorted (selsort r gv0)), (Permutation l (gv0 :: l)), (Permutation l (gv0 :: r))
(Permutation l (selsort r gv0)), (Permutation r (gv0 :: l)), (Permutation r (gv0 :: r)), (Permutation r (selsort l gv0)), (Permutation r (selsort r gv0)), (Permutation (y :: l) (gv0 :: l)), (Permutation (y :: l) (gv0 :: r)), (Permutation (y :: l) (selsort l gv0)), (Permutation (y :: l) (selsort r gv0)), (Permutation (y :: r) (gv0 :: l))
(Permutation (y :: r) (selsort l gv0)), (Permutation (y :: r) (selsort r gv0)), (Permutation (x :: l) (gv0 :: l)), (Permutation (x :: l) (gv0 :: r)), (Permutation (x :: l) (selsort l gv0)), (Permutation (x :: l) (selsort r gv0)), (Permutation (x :: r) (gv0 :: l)), (Permutation (x :: r) (gv0 :: r)), (Permutation (x :: r) (selsort l gv0)), (Permutation (x :: r) (selsort r gv0))
(Permutation (gv0 :: l) r), (Permutation (gv0 :: l) (y :: l)), (Permutation (gv0 :: l) (y :: r)), (Permutation (gv0 :: l) (x :: l)), (Permutation (gv0 :: l) (x :: r)), (Permutation (gv0 :: l) (gv0 :: r)), (Permutation (gv0 :: l) (selection_sort l)), (Permutation (gv0 :: l) (selection_sort r)), (Permutation (gv0 :: l) (selsort l y)), (Permutation (gv0 :: l) (selsort l x))
(Permutation (gv0 :: l) (selsort r y)), (Permutation (gv0 :: l) (selsort r x)), (Permutation (gv0 :: l) (selsort r gv0)), (Permutation (gv0 :: l) (l ++ l)), (Permutation (gv0 :: l) (l ++ r)), (Permutation (gv0 :: l) (r ++ l)), (Permutation (gv0 :: l) (r ++ r)), (Permutation (gv0 :: l) []), (Permutation (gv0 :: r) l), (Permutation (gv0 :: r) r)
(Permutation (gv0 :: r) (y :: r)), (Permutation (gv0 :: r) (x :: l)), (Permutation (gv0 :: r) (x :: r)), (Permutation (gv0 :: r) (gv0 :: l)), (Permutation (gv0 :: r) (selection_sort l)), (Permutation (gv0 :: r) (selection_sort r)), (Permutation (gv0 :: r) (selsort l y)), (Permutation (gv0 :: r) (selsort l x)), (Permutation (gv0 :: r) (selsort l gv0)), (Permutation (gv0 :: r) (selsort r y))
(Permutation (gv0 :: r) (selsort r gv0)), (Permutation (gv0 :: r) (l ++ l)), (Permutation (gv0 :: r) (l ++ r)), (Permutation (gv0 :: r) (r ++ l)), (Permutation (gv0 :: r) (r ++ r)), (Permutation (gv0 :: r) []), (Permutation (selection_sort l) (gv0 :: l)), (Permutation (selection_sort l) (gv0 :: r)), (Permutation (selection_sort l) (selsort l gv0)), (Permutation (selection_sort l) (selsort r gv0))
(Permutation (selection_sort r) (gv0 :: r)), (Permutation (selection_sort r) (selsort l gv0)), (Permutation (selection_sort r) (selsort r gv0)), (Permutation (selsort l y) (gv0 :: l)), (Permutation (selsort l y) (gv0 :: r)), (Permutation (selsort l y) (selsort l gv0)), (Permutation (selsort l y) (selsort r gv0)), (Permutation (selsort l x) (gv0 :: l)), (Permutation (selsort l x) (gv0 :: r)), (Permutation (selsort l x) (selsort l gv0))
(Permutation (selsort l gv0) l), (Permutation (selsort l gv0) r), (Permutation (selsort l gv0) (y :: l)), (Permutation (selsort l gv0) (y :: r)), (Permutation (selsort l gv0) (x :: l)), (Permutation (selsort l gv0) (x :: r)), (Permutation (selsort l gv0) (gv0 :: l)), (Permutation (selsort l gv0) (gv0 :: r)), (Permutation (selsort l gv0) (selection_sort l)), (Permutation (selsort l gv0) (selection_sort r))
(Permutation (selsort l gv0) (selsort l x)), (Permutation (selsort l gv0) (selsort r y)), (Permutation (selsort l gv0) (selsort r x)), (Permutation (selsort l gv0) (selsort r gv0)), (Permutation (selsort l gv0) (l ++ l)), (Permutation (selsort l gv0) (l ++ r)), (Permutation (selsort l gv0) (r ++ l)), (Permutation (selsort l gv0) (r ++ r)), (Permutation (selsort l gv0) []), (Permutation (selsort r y) (gv0 :: l))
(Permutation (selsort r y) (selsort l gv0)), (Permutation (selsort r y) (selsort r gv0)), (Permutation (selsort r x) (gv0 :: l)), (Permutation (selsort r x) (gv0 :: r)), (Permutation (selsort r x) (selsort l gv0)), (Permutation (selsort r x) (selsort r gv0)), (Permutation (selsort r gv0) l), (Permutation (selsort r gv0) r), (Permutation (selsort r gv0) (y :: l)), (Permutation (selsort r gv0) (y :: r))
(Permutation (selsort r gv0) (x :: r)), (Permutation (selsort r gv0) (gv0 :: l)), (Permutation (selsort r gv0) (gv0 :: r)), (Permutation (selsort r gv0) (selection_sort l)), (Permutation (selsort r gv0) (selection_sort r)), (Permutation (selsort r gv0) (selsort l y)), (Permutation (selsort r gv0) (selsort l x)), (Permutation (selsort r gv0) (selsort l gv0)), (Permutation (selsort r gv0) (selsort r y)), (Permutation (selsort r gv0) (selsort r x))
(Permutation (selsort r gv0) (l ++ r)), (Permutation (selsort r gv0) (r ++ l)), (Permutation (selsort r gv0) (r ++ r)), (Permutation (selsort r gv0) []), (Permutation (l ++ l) (gv0 :: l)), (Permutation (l ++ l) (gv0 :: r)), (Permutation (l ++ l) (selsort l gv0)), (Permutation (l ++ l) (selsort r gv0)), (Permutation (l ++ r) (gv0 :: l)), (Permutation (l ++ r) (gv0 :: r))
(Permutation (l ++ r) (selsort r gv0)), (Permutation (r ++ l) (gv0 :: l)), (Permutation (r ++ l) (gv0 :: r)), (Permutation (r ++ l) (selsort l gv0)), (Permutation (r ++ l) (selsort r gv0)), (Permutation (r ++ r) (gv0 :: l)), (Permutation (r ++ r) (gv0 :: r)), (Permutation (r ++ r) (selsort l gv0)), (Permutation (r ++ r) (selsort r gv0)), (Permutation [] (gv0 :: l))
(Permutation [] (selsort l gv0)), (Permutation [] (selsort r gv0)), (In y (gv0 :: l)), (In y (gv0 :: r)), (In y (selsort l gv0)), (In y (selsort r gv0)), (In x (gv0 :: l)), (In x (gv0 :: r)), (In x (selsort l gv0)), (In x (selsort r gv0))
(In gv0 r), (In gv0 (y :: l)), (In gv0 (y :: r)), (In gv0 (x :: l)), (In gv0 (x :: r)), (In gv0 (gv0 :: l)), (In gv0 (gv0 :: r)), (In gv0 (selection_sort l)), (In gv0 (selection_sort r)), (In gv0 (selsort l y))
(In gv0 (selsort l gv0)), (In gv0 (selsort r y)), (In gv0 (selsort r x)), (In gv0 (selsort r gv0)), (In gv0 (l ++ l)), (In gv0 (l ++ r)), (In gv0 (r ++ l)), (In gv0 (r ++ r)), (In (length l) (gv0 :: l)), (In (length l) (gv0 :: r))
(In (length l) (selsort r gv0)), (In (length r) (gv0 :: l)), (In (length r) (gv0 :: r)), (In (length r) (selsort l gv0)), (In (length r) (selsort r gv0)), (y < gv0), (x < gv0), (gv0 < y), (gv0 < x), (gv0 < length l)
(length l < gv0), (length r < gv0), (y <= gv0), (x <= gv0), (gv0 <= y), (gv0 <= x), (gv0 <= length l), (gv0 <= length r), (length l <= gv0), (length r <= gv0)
(selsort l gv0 = r), (selsort l gv0 = selection_sort l), (selsort l gv0 = selection_sort r), (selsort l gv0 = l ++ l), (selsort l gv0 = l ++ r), (selsort l gv0 = r ++ l), (selsort l gv0 = r ++ r), (selsort r gv0 = l), (selsort r gv0 = r), (selsort r gv0 = selection_sort l)
(selsort r gv0 = l ++ l), (selsort r gv0 = l ++ r), (selsort r gv0 = r ++ l), (selsort r gv0 = r ++ r), (length l = gv0), (length r = gv0)

Label: 2 (2)
(false = sorted_bool r), (false = sorted_bool l), (true = sorted_bool r), (true = sorted_bool l), (y <=* r), (y <=* l), (y <=* y :: r), (y <=* y :: l), (y <=* x :: r), (y <=* x :: l)
(y <=* selection_sort l), (y <=* selsort r y), (y <=* selsort r x), (y <=* selsort l y), (y <=* selsort l x), (y <=* r ++ r), (y <=* r ++ l), (y <=* l ++ r), (y <=* l ++ l), (y <=* [])
(x <=* l), (x <=* y :: r), (x <=* y :: l), (x <=* x :: r), (x <=* x :: l), (x <=* selection_sort r), (x <=* selection_sort l), (x <=* selsort r y), (x <=* selsort r x), (x <=* selsort l y)
(x <=* r ++ r), (x <=* r ++ l), (x <=* l ++ r), (x <=* l ++ l), (x <=* []), (length r <=* r), (length r <=* l), (length r <=* y :: r), (length r <=* y :: l), (length r <=* x :: r)
(length r <=* selection_sort r), (length r <=* selection_sort l), (length r <=* selsort r y), (length r <=* selsort r x), (length r <=* selsort l y), (length r <=* selsort l x), (length r <=* r ++ r), (length r <=* r ++ l), (length r <=* l ++ r), (length r <=* l ++ l)
(length l <=* r), (length l <=* l), (length l <=* y :: r), (length l <=* y :: l), (length l <=* x :: r), (length l <=* x :: l), (length l <=* selection_sort r), (length l <=* selection_sort l), (length l <=* selsort r y), (length l <=* selsort r x)
(length l <=* selsort l x), (length l <=* r ++ r), (length l <=* r ++ l), (length l <=* l ++ r), (length l <=* l ++ l), (length l <=* []), (sorted r), (sorted l), (sorted (y :: r)), (sorted (y :: l))
(sorted (x :: l)), (sorted (selection_sort r)), (sorted (selection_sort l)), (sorted (selsort r y)), (sorted (selsort r x)), (sorted (selsort l y)), (sorted (selsort l x)), (sorted (r ++ r)), (sorted (r ++ l)), (sorted (l ++ r))
(sorted []), (Permutation r l), (Permutation r (y :: r)), (Permutation r (y :: l)), (Permutation r (x :: r)), (Permutation r (x :: l)), (Permutation r (selection_sort r)), (Permutation r (selection_sort l)), (Permutation r (selsort r y)), (Permutation r (selsort r x))
(Permutation r (selsort l x)), (Permutation r (r ++ r)), (Permutation r (r ++ l)), (Permutation r (l ++ r)), (Permutation r (l ++ l)), (Permutation r []), (Permutation l r), (Permutation l (y :: r)), (Permutation l (y :: l)), (Permutation l (x :: r))
(Permutation l (selection_sort r)), (Permutation l (selection_sort l)), (Permutation l (selsort r y)), (Permutation l (selsort r x)), (Permutation l (selsort l y)), (Permutation l (selsort l x)), (Permutation l (r ++ r)), (Permutation l (r ++ l)), (Permutation l (l ++ r)), (Permutation l (l ++ l))
(Permutation (y :: r) r), (Permutation (y :: r) l), (Permutation (y :: r) (y :: l)), (Permutation (y :: r) (x :: r)), (Permutation (y :: r) (x :: l)), (Permutation (y :: r) (selection_sort r)), (Permutation (y :: r) (selection_sort l)), (Permutation (y :: r) (selsort r y)), (Permutation (y :: r) (selsort r x)), (Permutation (y :: r) (selsort l y))
(Permutation (y :: r) (r ++ r)), (Permutation (y :: r) (r ++ l)), (Permutation (y :: r) (l ++ r)), (Permutation (y :: r) (l ++ l)), (Permutation (y :: r) []), (Permutation (y :: l) r), (Permutation (y :: l) l), (Permutation (y :: l) (y :: r)), (Permutation (y :: l) (x :: r)), (Permutation (y :: l) (x :: l))
(Permutation (y :: l) (selection_sort l)), (Permutation (y :: l) (selsort r y)), (Permutation (y :: l) (selsort r x)), (Permutation (y :: l) (selsort l y)), (Permutation (y :: l) (selsort l x)), (Permutation (y :: l) (r ++ r)), (Permutation (y :: l) (r ++ l)), (Permutation (y :: l) (l ++ r)), (Permutation (y :: l) (l ++ l)), (Permutation (y :: l) [])
(Permutation (x :: r) l), (Permutation (x :: r) (y :: r)), (Permutation (x :: r) (y :: l)), (Permutation (x :: r) (x :: l)), (Permutation (x :: r) (selection_sort r)), (Permutation (x :: r) (selection_sort l)), (Permutation (x :: r) (selsort r y)), (Permutation (x :: r) (selsort r x)), (Permutation (x :: r) (selsort l y)), (Permutation (x :: r) (selsort l x))
(Permutation (x :: r) (r ++ l)), (Permutation (x :: r) (l ++ r)), (Permutation (x :: r) (l ++ l)), (Permutation (x :: r) []), (Permutation (x :: l) r), (Permutation (x :: l) l), (Permutation (x :: l) (y :: r)), (Permutation (x :: l) (y :: l)), (Permutation (x :: l) (x :: r)), (Permutation (x :: l) (selection_sort r))
(Permutation (x :: l) (selsort r y)), (Permutation (x :: l) (selsort r x)), (Permutation (x :: l) (selsort l y)), (Permutation (x :: l) (selsort l x)), (Permutation (x :: l) (r ++ r)), (Permutation (x :: l) (r ++ l)), (Permutation (x :: l) (l ++ r)), (Permutation (x :: l) (l ++ l)), (Permutation (x :: l) []), (Permutation (selection_sort r) r)
(Permutation (selection_sort r) (y :: r)), (Permutation (selection_sort r) (y :: l)), (Permutation (selection_sort r) (x :: r)), (Permutation (selection_sort r) (x :: l)), (Permutation (selection_sort r) (selection_sort l)), (Permutation (selection_sort r) (selsort r y)), (Permutation (selection_sort r) (selsort r x)), (Permutation (selection_sort r) (selsort l y)), (Permutation (selection_sort r) (selsort l x)), (Permutation (selection_sort r) (r ++ r))
(Permutation (selection_sort r) (l ++ r)), (Permutation (selection_sort r) (l ++ l)), (Permutation (selection_sort r) []), (Permutation (selection_sort l) r), (Permutation (selection_sort l) l), (Permutation (selection_sort l) (y :: r)), (Permutation (selection_sort l) (y :: l)), (Permutation (selection_sort l) (x :: r)), (Permutation (selection_sort l) (x :: l)), (Permutation (selection_sort l) (selection_sort r))
(Permutation (selection_sort l) (selsort r x)), (Permutation (selection_sort l) (selsort l y)), (Permutation (selection_sort l) (selsort l x)), (Permutation (selection_sort l) (r ++ r)), (Permutation (selection_sort l) (r ++ l)), (Permutation (selection_sort l) (l ++ r)), (Permutation (selection_sort l) (l ++ l)), (Permutation (selection_sort l) []), (Permutation (selsort r y) r), (Permutation (selsort r y) l)
(Permutation (selsort r y) (y :: l)), (Permutation (selsort r y) (x :: r)), (Permutation (selsort r y) (x :: l)), (Permutation (selsort r y) (selection_sort r)), (Permutation (selsort r y) (selection_sort l)), (Permutation (selsort r y) (selsort r x)), (Permutation (selsort r y) (selsort l y)), (Permutation (selsort r y) (selsort l x)), (Permutation (selsort r y) (r ++ r)), (Permutation (selsort r y) (r ++ l))
(Permutation (selsort r y) (l ++ l)), (Permutation (selsort r y) []), (Permutation (selsort r x) r), (Permutation (selsort r x) l), (Permutation (selsort r x) (y :: r)), (Permutation (selsort r x) (y :: l)), (Permutation (selsort r x) (x :: r)), (Permutation (selsort r x) (x :: l)), (Permutation (selsort r x) (selection_sort r)), (Permutation (selsort r x) (selection_sort l))
(Permutation (selsort r x) (selsort l y)), (Permutation (selsort r x) (selsort l x)), (Permutation (selsort r x) (r ++ r)), (Permutation (selsort r x) (r ++ l)), (Permutation (selsort r x) (l ++ r)), (Permutation (selsort r x) (l ++ l)), (Permutation (selsort r x) []), (Permutation (selsort l y) r), (Permutation (selsort l y) l), (Permutation (selsort l y) (y :: r))
(Permutation (selsort l y) (x :: r)), (Permutation (selsort l y) (x :: l)), (Permutation (selsort l y) (selection_sort r)), (Permutation (selsort l y) (selection_sort l)), (Permutation (selsort l y) (selsort r y)), (Permutation (selsort l y) (selsort r x)), (Permutation (selsort l y) (selsort l x)), (Permutation (selsort l y) (r ++ r)), (Permutation (selsort l y) (r ++ l)), (Permutation (selsort l y) (l ++ r))
(Permutation (selsort l y) []), (Permutation (selsort l x) r), (Permutation (selsort l x) l), (Permutation (selsort l x) (y :: r)), (Permutation (selsort l x) (y :: l)), (Permutation (selsort l x) (x :: r)), (Permutation (selsort l x) (x :: l)), (Permutation (selsort l x) (selection_sort r)), (Permutation (selsort l x) (selection_sort l)), (Permutation (selsort l x) (selsort r y))
(Permutation (selsort l x) (selsort l y)), (Permutation (selsort l x) (r ++ r)), (Permutation (selsort l x) (r ++ l)), (Permutation (selsort l x) (l ++ r)), (Permutation (selsort l x) (l ++ l)), (Permutation (selsort l x) []), (Permutation (r ++ r) r), (Permutation (r ++ r) l), (Permutation (r ++ r) (y :: r)), (Permutation (r ++ r) (y :: l))
(Permutation (r ++ r) (x :: l)), (Permutation (r ++ r) (selection_sort r)), (Permutation (r ++ r) (selection_sort l)), (Permutation (r ++ r) (selsort r y)), (Permutation (r ++ r) (selsort r x)), (Permutation (r ++ r) (selsort l y)), (Permutation (r ++ r) (selsort l x)), (Permutation (r ++ r) (r ++ l)), (Permutation (r ++ r) (l ++ r)), (Permutation (r ++ r) (l ++ l))
(Permutation (r ++ l) r), (Permutation (r ++ l) l), (Permutation (r ++ l) (y :: r)), (Permutation (r ++ l) (y :: l)), (Permutation (r ++ l) (x :: r)), (Permutation (r ++ l) (x :: l)), (Permutation (r ++ l) (selection_sort r)), (Permutation (r ++ l) (selection_sort l)), (Permutation (r ++ l) (selsort r y)), (Permutation (r ++ l) (selsort r x))
(Permutation (r ++ l) (selsort l x)), (Permutation (r ++ l) (r ++ r)), (Permutation (r ++ l) (l ++ r)), (Permutation (r ++ l) (l ++ l)), (Permutation (r ++ l) []), (Permutation (l ++ r) r), (Permutation (l ++ r) l), (Permutation (l ++ r) (y :: r)), (Permutation (l ++ r) (y :: l)), (Permutation (l ++ r) (x :: r))
(Permutation (l ++ r) (selection_sort r)), (Permutation (l ++ r) (selection_sort l)), (Permutation (l ++ r) (selsort r y)), (Permutation (l ++ r) (selsort r x)), (Permutation (l ++ r) (selsort l y)), (Permutation (l ++ r) (selsort l x)), (Permutation (l ++ r) (r ++ r)), (Permutation (l ++ r) (r ++ l)), (Permutation (l ++ r) (l ++ l)), (Permutation (l ++ r) [])
(Permutation (l ++ l) l), (Permutation (l ++ l) (y :: r)), (Permutation (l ++ l) (y :: l)), (Permutation (l ++ l) (x :: r)), (Permutation (l ++ l) (x :: l)), (Permutation (l ++ l) (selection_sort r)), (Permutation (l ++ l) (selection_sort l)), (Permutation (l ++ l) (selsort r y)), (Permutation (l ++ l) (selsort r x)), (Permutation (l ++ l) (selsort l y))
(Permutation (l ++ l) (r ++ r)), (Permutation (l ++ l) (r ++ l)), (Permutation (l ++ l) (l ++ r)), (Permutation (l ++ l) []), (Permutation [] r), (Permutation [] l), (Permutation [] (y :: r)), (Permutation [] (y :: l)), (Permutation [] (x :: r)), (Permutation [] (x :: l))
(Permutation [] (selection_sort l)), (Permutation [] (selsort r y)), (Permutation [] (selsort r x)), (Permutation [] (selsort l y)), (Permutation [] (selsort l x)), (Permutation [] (r ++ r)), (Permutation [] (r ++ l)), (Permutation [] (l ++ r)), (Permutation [] (l ++ l)), (In y r)
(In y (y :: r)), (In y (y :: l)), (In y (x :: r)), (In y (x :: l)), (In y (selection_sort r)), (In y (selection_sort l)), (In y (selsort r y)), (In y (selsort r x)), (In y (selsort l y)), (In y (selsort l x))
(In y (r ++ l)), (In y (l ++ r)), (In y (l ++ l)), (In x r), (In x l), (In x (y :: r)), (In x (y :: l)), (In x (x :: r)), (In x (x :: l)), (In x (selection_sort r))
(In x (selsort r y)), (In x (selsort r x)), (In x (selsort l y)), (In x (selsort l x)), (In x (r ++ r)), (In x (r ++ l)), (In x (l ++ r)), (In x (l ++ l)), (In (length r) r), (In (length r) l)
(In (length r) (y :: l)), (In (length r) (x :: r)), (In (length r) (x :: l)), (In (length r) (selection_sort r)), (In (length r) (selection_sort l)), (In (length r) (selsort r y)), (In (length r) (selsort r x)), (In (length r) (selsort l y)), (In (length r) (selsort l x)), (In (length r) (r ++ r))
(In (length r) (l ++ r)), (In (length r) (l ++ l)), (In (length l) r), (In (length l) l), (In (length l) (y :: r)), (In (length l) (y :: l)), (In (length l) (x :: r)), (In (length l) (x :: l)), (In (length l) (selection_sort r)), (In (length l) (selection_sort l))
(In (length l) (selsort r x)), (In (length l) (selsort l y)), (In (length l) (selsort l x)), (In (length l) (r ++ r)), (In (length l) (r ++ l)), (In (length l) (l ++ r)), (In (length l) (l ++ l)), (y < x), (y < length r), (y < length l)
(x < length r), (x < length l), (length r < y), (length r < x), (length r < length l), (length l < y), (length l < x), (length l < length r), (y <= x), (y <= length r)
(x <= y), (x <= length r), (x <= length l), (length r <= y), (length r <= x), (length r <= length l), (length l <= y), (length l <= x), (length l <= length r), (selection_sort r = r)
(selection_sort r = r ++ r), (selection_sort r = r ++ l), (selection_sort r = l ++ r), (selection_sort r = l ++ l), (selection_sort l = r), (selection_sort l = l), (selection_sort l = r ++ r), (selection_sort l = r ++ l), (selection_sort l = l ++ r), (selection_sort l = l ++ l)
(selsort r y = l), (selsort r y = selection_sort r), (selsort r y = selection_sort l), (selsort r y = r ++ r), (selsort r y = r ++ l), (selsort r y = l ++ r), (selsort r y = l ++ l), (selsort r x = r), (selsort r x = l), (selsort r x = selection_sort r)
(selsort r x = r ++ r), (selsort r x = r ++ l), (selsort r x = l ++ r), (selsort r x = l ++ l), (selsort l y = r), (selsort l y = l), (selsort l y = selection_sort r), (selsort l y = selection_sort l), (selsort l y = r ++ r), (selsort l y = r ++ l)
(selsort l y = l ++ l), (selsort l x = r), (selsort l x = l), (selsort l x = selection_sort r), (selsort l x = selection_sort l), (selsort l x = r ++ r), (selsort l x = r ++ l), (selsort l x = l ++ r), (selsort l x = l ++ l), (r ++ r = r)
(r ++ l = r), (r ++ l = l), (l ++ r = r), (l ++ r = l), (l ++ l = r), (l ++ l = l), (length r = y), (length r = x), (length l = y), (length l = x)


------------------------------ SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 332.771 seconds


Label: 0 (0)
(length r = gv1), (length l = gv1)

Label: 1 (1)
(length l = gv0), (length r = gv0)

Label: 2 (2)
(Permutation (x :: l) (y :: r))


------------------------------ FINAL RESULTS ------------------------------
Time Elapsed From Start: 338.434 seconds


(select x l = (y, r) -> Permutation (x :: l) (y :: r))
(Permutation (x :: l) (y :: r) -> length l = length r)