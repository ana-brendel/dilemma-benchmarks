Lemma Synthesis Execution Log and Results
--------------------------------------------------------------------
--------------------------------------------------------------------

Label: Initial State
Assumptions: 
 -- (length l = 0)

----------------------------------
Goal: (Permutation l (selsort l 0))


------------------------------ GENERALIZED VARIABLES ------------------------------
Time Elapsed From Start: 0. seconds

gv1 : nat = 0
gv0 : (list nat) = (selsort l 0)


------------------------------ GENERALIZATIONS ------------------------------
  NOTE: The assumptions have been restricted to be only the necessary assumptions.
Time Elapsed From Start: 30.676 seconds

Label: Generalization #0
Assumptions: 
 -- (length l = 0)

----------------------------------
Goal: (Permutation l gv0)
Case: 2

Label: Generalization #1
Assumptions: 
 -- (length l = gv1)

----------------------------------
Goal: (Permutation l (selsort l gv1))
Case: 3

Label: Generalization #2
Assumptions: 
 -- (length l = 0)

----------------------------------
Goal: (Permutation l (selsort l 0))
Case: 3



------------------------------ SYNTHESIS PROBLEMS ------------------------------
Time Elapsed From Start: 31.731 seconds

 -- functions to consider -- 
@eq : (forall A : Type, A -> A -> Prop)
not : (Prop -> Prop)
@fst : (forall A B : Type, A * B -> A)
@snd : (forall A B : Type, A * B -> B)
length : (forall A : Type, list A -> nat)
app : (forall A : Type, list A -> list A -> list A)
le : (nat -> nat -> Prop)
lt : (nat -> nat -> Prop)
In : (forall A : Type, A -> list A -> Prop)
existsb : (forall A : Type, (A -> bool) -> list A -> bool)
forallb : (forall A : Type, (A -> bool) -> list A -> bool)
Forall : (forall A : Type, (A -> Prop) -> list A -> Prop)
nodup : (forall A : Type, (forall x y : A, {x = y} + {x <> y}) -> list A -> list A)
Permutation : (forall A : Type, list A -> list A -> Prop)
sorted : (list nat -> Prop)
is_a_sorting_algorithm : ((list nat -> list nat) -> Prop)
select : (nat -> list nat -> nat * list nat)
selsort : (list nat -> nat -> list nat)
selection_sort : (list nat -> list nat)
le_all : (nat -> list nat -> Prop)
sorted_bool : (list nat -> bool)

Label: 0 (0)
Abducted Assumption: n/a
Positive Examples:
   [gv0 := []; l := []]

Negative Examples:
   [gv0 := [3; 3; 3; 0]; l := []]
   [gv0 := [3; 4]; l := []]
   [gv0 := [3; 4; 4; 5; 6]; l := []]
   [gv0 := [2; 4; 3; 1; 1]; l := []]
   [gv0 := [2; 0; 2; 1]; l := []]
   [gv0 := [0; 2; 5]; l := []]
   [gv0 := [6; 1; 1; 1; 1]; l := []]
   [gv0 := [3; 2; 0; 3]; l := []]
   [gv0 := [4; 2; 0; 0]; l := []]
   [gv0 := [3; 2; 6; 2]; l := []]
   etc ...


Label: 1 (1)
Abducted Assumption: (length l = gv1)
Positive Examples:
   [gv1 := 3; l := [2; 0; 4]]
   [gv1 := 4; l := [0; 2; 2; 5]]
   [gv1 := 3; l := [4; 0; 1]]
   [gv1 := 4; l := [2; 2; 0; 2]]
   [gv1 := 4; l := [2; 2; 0; 3]]
   [gv1 := 3; l := [3; 1; 5]]
   [gv1 := 4; l := [0; 0; 5; 4]]
   [gv1 := 3; l := [1; 1; 1]]
   [gv1 := 4; l := [4; 1; 4; 4]]
   [gv1 := 4; l := [1; 0; 4; 2]]
   etc ...

Negative Examples:
   [gv1 := 3; l := [6; 3; 5; 4; 5; 5]]
   [gv1 := 0; l := [2; 0; 3; 4; 3]]
   [gv1 := 3; l := [4; 4; 4; 3]]
   [gv1 := 0; l := [2; 1; 0]]
   [gv1 := 0; l := [6; 5; 0; 1]]
   [gv1 := 2; l := [1; 2; 0; 0]]
   [gv1 := 1; l := [3; 2; 3; 1]]
   [gv1 := 3; l := [3; 5; 2; 3; 3]]
   [gv1 := 1; l := [2; 2; 0]]
   [gv1 := 2; l := [3; 5; 1]]
   etc ...


Label: 2 (2)
Abducted Assumption: (length l = 0)
Positive Examples:
   [l := []]

Negative Examples:
   [l := [4; 2; 4; 2]]
   [l := [5; 4; 3; 6; 2; 5]]
   [l := [0; 3; 2; 4]]
   [l := [4; 5; 3; 0]]
   [l := [5; 1; 6; 5]]
   [l := [5; 5; 4; 5; 2]]
   [l := [5; 4; 3; 0; 0]]
   [l := [1; 6; 5; 1; 5; 3]]
   [l := [1; 3; 4; 2; 3]]
   [l := [4; 6; 2; 0; 3]]
   etc ...



------------------------------ TERMS CONSIDERED IN SYNTHESIS ------------------------------
Time Elapsed From Start: 32.671 seconds


Label: 0 (0)
(false = sorted_bool gv0), (true = sorted_bool gv0), (sorted gv0), (sorted (selection_sort gv0)), (Permutation gv0 l), (Permutation gv0 (selection_sort gv0)), (Permutation gv0 (selection_sort l)), (Permutation l gv0), (Permutation l (selection_sort gv0)), (Permutation (selection_sort gv0) gv0)
(Permutation (selection_sort gv0) (selection_sort l)), (Permutation (selection_sort l) gv0), (Permutation (selection_sort l) (selection_sort gv0)), (selection_sort gv0 = gv0), (selection_sort gv0 = l), (selection_sort l = gv0)

Label: 1 (1)
(gv1 <=* l), (gv1 <=* gv1 :: l), (gv1 <=* selection_sort l), (gv1 <=* selsort l gv1), (gv1 <=* l ++ l), (gv1 <=* []), (length l <=* gv1 :: l), (length l <=* selsort l gv1), (sorted (gv1 :: l)), (sorted (selsort l gv1))
(Permutation l (selsort l gv1)), (Permutation (gv1 :: l) l), (Permutation (gv1 :: l) (selection_sort l)), (Permutation (gv1 :: l) (selsort l gv1)), (Permutation (gv1 :: l) (l ++ l)), (Permutation (gv1 :: l) []), (Permutation (selection_sort l) (gv1 :: l)), (Permutation (selection_sort l) (selsort l gv1)), (Permutation (selsort l gv1) l), (Permutation (selsort l gv1) (gv1 :: l))
(Permutation (selsort l gv1) (l ++ l)), (Permutation (selsort l gv1) []), (Permutation (l ++ l) (gv1 :: l)), (Permutation (l ++ l) (selsort l gv1)), (Permutation [] (gv1 :: l)), (Permutation [] (selsort l gv1)), (In gv1 l), (In gv1 (gv1 :: l)), (In gv1 (selection_sort l)), (In gv1 (selsort l gv1))
(In (length l) (gv1 :: l)), (In (length l) (selsort l gv1)), (gv1 < length l), (length l < gv1), (gv1 <= length l), (length l <= gv1), (selsort l gv1 = l), (selsort l gv1 = selection_sort l), (selsort l gv1 = l ++ l), (length l = gv1)

Label: 2 (2)
(false = sorted_bool l), (true = sorted_bool l), (sorted l), (sorted (selection_sort l)), (Permutation l (selection_sort l)), (Permutation (selection_sort l) l), (selection_sort l = l)


------------------------------ SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 73.571 seconds


Label: 0 (0)
(Permutation gv0 l), (Permutation gv0 (selection_sort l)), (Permutation l gv0), (Permutation l (selection_sort gv0)), (Permutation (selection_sort gv0) l), (Permutation (selection_sort gv0) (selection_sort l)), (Permutation (selection_sort l) gv0), (Permutation (selection_sort l) (selection_sort gv0)), (selection_sort gv0 = l), (selection_sort l = gv0)

Label: 1 (1)
(Permutation l (selsort l gv1)), (Permutation (selection_sort l) (selsort l gv1)), (Permutation (selsort l gv1) l), (length l <= gv1), (selsort l gv1 = selection_sort l), (length l = gv1)

Label: 2 (2)


------------------------------ FINAL RESULTS ------------------------------
Time Elapsed From Start: 97.068 seconds


(selection_sort l = gv0 -> Permutation l gv0)
(length l = 0 -> selection_sort l = gv0 -> Permutation l gv0)
(selection_sort gv0 = l -> Permutation l gv0)
(length l = 0 -> selection_sort gv0 = l -> Permutation l gv0)