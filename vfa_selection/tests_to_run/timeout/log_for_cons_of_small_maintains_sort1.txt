Lemma Synthesis Execution Log and Results
--------------------------------------------------------------------
--------------------------------------------------------------------

Label: Initial State
Assumptions: 
 -- (n = length bl)
 -- (selsort bl n = a :: l)
 -- (y <=* bl)
 -- (sorted (a :: l))
 -- (selsort bl n = l -> sorted l -> sorted (y :: l))

----------------------------------
Goal: (Permutation bl (selsort bl n))


------------------------------ GENERALIZED VARIABLES ------------------------------
Time Elapsed From Start: 0. seconds

gv0 : (list nat) = (selsort bl n)


------------------------------ GENERALIZATIONS ------------------------------
  NOTE: The assumptions have been restricted to be only the necessary assumptions.
Time Elapsed From Start: 103.496 seconds

Label: Generalization #0
Assumptions: 
 -- (n = length bl)
 -- (gv0 = a :: l)
 -- (y <=* bl)
 -- (sorted (a :: l))
 -- (gv0 = l -> sorted l -> sorted (y :: l))

----------------------------------
Goal: (Permutation bl gv0)
Case: 2

Label: Generalization #1
Assumptions: 
 -- (n = length bl)

----------------------------------
Goal: (Permutation bl (selsort bl n))
Case: 3



------------------------------ SYNTHESIS PROBLEMS ------------------------------
Time Elapsed From Start: 104.152 seconds

 -- functions to consider -- 
@eq : (forall A : Type, A -> A -> Prop)
not : (Prop -> Prop)
@fst : (forall A B : Type, A * B -> A)
@snd : (forall A B : Type, A * B -> B)
length : (forall A : Type, list A -> nat)
app : (forall A : Type, list A -> list A -> list A)
le : (nat -> nat -> Prop)
lt : (nat -> nat -> Prop)
In : (forall A : Type, A -> list A -> Prop)
existsb : (forall A : Type, (A -> bool) -> list A -> bool)
forallb : (forall A : Type, (A -> bool) -> list A -> bool)
Forall : (forall A : Type, (A -> Prop) -> list A -> Prop)
nodup : (forall A : Type, (forall x y : A, {x = y} + {x <> y}) -> list A -> list A)
Permutation : (forall A : Type, list A -> list A -> Prop)
sorted : (list nat -> Prop)
is_a_sorting_algorithm : ((list nat -> list nat) -> Prop)
select : (nat -> list nat -> nat * list nat)
selsort : (list nat -> nat -> list nat)
selection_sort : (list nat -> list nat)
le_all : (nat -> list nat -> Prop)
sorted_bool : (list nat -> bool)

Label: 0 (0)
Abducted Assumption: n/a
Positive Examples:
   [a := 1; bl := [1]; gv0 := [1]; l := []; n := 1; y := 1]
   [a := 1; bl := [1]; gv0 := [1]; l := []; n := 1; y := 0]
   [a := 0; bl := [0]; gv0 := [0]; l := []; n := 1; y := 0]

Negative Examples:
   [a := 1; bl := []; gv0 := [1]; l := []; n := 0; y := 2]
   [a := 1; bl := [2; 2]; gv0 := [1; 2]; l := [2]; n := 2; y := 0]
   [a := 2; bl := []; gv0 := [2; 2]; l := [2]; n := 0; y := 2]
   [a := 1; bl := [1; 0]; gv0 := [1; 2]; l := [2]; n := 2; y := 0]
   [a := 1; bl := [2; 2]; gv0 := [1]; l := []; n := 2; y := 0]
   [a := 2; bl := [1; 2]; gv0 := [2]; l := []; n := 2; y := 0]
   [a := 3; bl := []; gv0 := [3]; l := []; n := 0; y := 4]
   [a := 2; bl := []; gv0 := [2]; l := []; n := 0; y := 1]
   [a := 1; bl := [3]; gv0 := [1]; l := []; n := 1; y := 3]
   [a := 3; bl := []; gv0 := [3]; l := []; n := 0; y := 1]
   etc ...


Label: 1 (1)
Abducted Assumption: (n = length bl)
Positive Examples:
   [bl := [4; 5; 1; 1; 5]; n := 5]
   [bl := [0; 1; 3; 4]; n := 4]
   [bl := [5; 1; 4; 1; 4]; n := 5]
   [bl := [4; 2; 3]; n := 3]
   [bl := [2; 0; 4; 2; 0]; n := 5]
   [bl := [0; 0; 2; 1]; n := 4]
   [bl := [2; 2; 3; 5]; n := 4]
   [bl := [3; 2; 3; 2]; n := 4]
   [bl := [3; 0; 6]; n := 3]
   [bl := [5; 6; 6; 0]; n := 4]
   etc ...

Negative Examples:
   [bl := [4; 1; 1; 0; 6]; n := 1]
   [bl := [2; 0; 2]; n := 0]
   [bl := [4; 3; 6; 6; 6]; n := 3]
   [bl := [4; 4; 1; 2]; n := 2]
   [bl := [6; 4; 6; 4; 5]; n := 1]
   [bl := [5; 0; 3; 1]; n := 0]
   [bl := [6; 1; 4; 1; 2; 3]; n := 1]
   [bl := [4; 1; 0; 1]; n := 3]
   [bl := [2; 5; 2]; n := 2]
   [bl := [6; 5; 3]; n := 2]
   etc ...



------------------------------ TERMS CONSIDERED IN SYNTHESIS ------------------------------
Time Elapsed From Start: 105.172 seconds


Label: 0 (0)
(false = sorted_bool gv0), (true = sorted_bool gv0), (n <=* gv0), (n <=* n :: gv0), (n <=* a :: gv0), (n <=* y :: gv0), (n <=* selection_sort gv0), (n <=* selsort gv0 n), (n <=* selsort gv0 a), (n <=* selsort gv0 y)
(n <=* gv0 ++ l), (n <=* gv0 ++ gv0), (n <=* gv0 ++ bl), (n <=* bl ++ gv0), (a <=* gv0), (a <=* n :: gv0), (a <=* a :: gv0), (a <=* y :: gv0), (a <=* selection_sort gv0), (a <=* selsort gv0 n)
(a <=* selsort gv0 y), (a <=* l ++ gv0), (a <=* gv0 ++ l), (a <=* gv0 ++ gv0), (a <=* gv0 ++ bl), (a <=* bl ++ gv0), (y <=* gv0), (y <=* n :: gv0), (y <=* a :: gv0), (y <=* y :: gv0)
(y <=* selsort gv0 n), (y <=* selsort gv0 a), (y <=* selsort gv0 y), (y <=* l ++ gv0), (y <=* gv0 ++ l), (y <=* gv0 ++ gv0), (y <=* gv0 ++ bl), (y <=* bl ++ gv0), (length l <=* gv0), (length l <=* n :: gv0)
(length l <=* y :: gv0), (length l <=* selection_sort gv0), (length l <=* selsort gv0 n), (length l <=* selsort gv0 a), (length l <=* selsort gv0 y), (length l <=* l ++ gv0), (length l <=* gv0 ++ l), (length l <=* gv0 ++ gv0), (length l <=* gv0 ++ bl), (length l <=* bl ++ gv0)
(length gv0 <=* gv0), (length gv0 <=* bl), (length gv0 <=* n :: l), (length gv0 <=* n :: gv0), (length gv0 <=* n :: bl), (length gv0 <=* a :: l), (length gv0 <=* a :: gv0), (length gv0 <=* a :: bl), (length gv0 <=* y :: l), (length gv0 <=* y :: gv0)
(length gv0 <=* selection_sort l), (length gv0 <=* selection_sort gv0), (length gv0 <=* selection_sort bl), (length gv0 <=* selsort l n), (length gv0 <=* selsort l a), (length gv0 <=* selsort l y), (length gv0 <=* selsort gv0 n), (length gv0 <=* selsort gv0 a), (length gv0 <=* selsort gv0 y), (length gv0 <=* selsort bl n)
(length gv0 <=* selsort bl y), (length gv0 <=* l ++ l), (length gv0 <=* l ++ gv0), (length gv0 <=* l ++ bl), (length gv0 <=* gv0 ++ l), (length gv0 <=* gv0 ++ gv0), (length gv0 <=* gv0 ++ bl), (length gv0 <=* bl ++ l), (length gv0 <=* bl ++ gv0), (length gv0 <=* bl ++ bl)
(length bl <=* gv0), (length bl <=* n :: gv0), (length bl <=* a :: gv0), (length bl <=* y :: gv0), (length bl <=* selection_sort gv0), (length bl <=* selsort gv0 n), (length bl <=* selsort gv0 a), (length bl <=* selsort gv0 y), (length bl <=* l ++ gv0), (length bl <=* gv0 ++ l)
(length bl <=* gv0 ++ bl), (length bl <=* bl ++ gv0), (sorted gv0), (sorted (n :: gv0)), (sorted (a :: gv0)), (sorted (y :: gv0)), (sorted (selection_sort gv0)), (sorted (selsort gv0 n)), (sorted (selsort gv0 a)), (sorted (selsort gv0 y))
(sorted (gv0 ++ l)), (sorted (gv0 ++ gv0)), (sorted (gv0 ++ bl)), (sorted (bl ++ gv0)), (Permutation l gv0), (Permutation l (n :: gv0)), (Permutation l (a :: gv0)), (Permutation l (y :: gv0)), (Permutation l (selection_sort gv0)), (Permutation l (selsort gv0 n))
(Permutation l (selsort gv0 y)), (Permutation l (l ++ gv0)), (Permutation l (gv0 ++ l)), (Permutation l (gv0 ++ gv0)), (Permutation l (gv0 ++ bl)), (Permutation l (bl ++ gv0)), (Permutation gv0 l), (Permutation gv0 bl), (Permutation gv0 (n :: l)), (Permutation gv0 (n :: gv0))
(Permutation gv0 (a :: l)), (Permutation gv0 (a :: gv0)), (Permutation gv0 (a :: bl)), (Permutation gv0 (y :: l)), (Permutation gv0 (y :: gv0)), (Permutation gv0 (y :: bl)), (Permutation gv0 (selection_sort l)), (Permutation gv0 (selection_sort gv0)), (Permutation gv0 (selection_sort bl)), (Permutation gv0 (selsort l n))
(Permutation gv0 (selsort l y)), (Permutation gv0 (selsort gv0 n)), (Permutation gv0 (selsort gv0 a)), (Permutation gv0 (selsort gv0 y)), (Permutation gv0 (selsort bl n)), (Permutation gv0 (selsort bl a)), (Permutation gv0 (selsort bl y)), (Permutation gv0 (l ++ l)), (Permutation gv0 (l ++ gv0)), (Permutation gv0 (l ++ bl))
(Permutation gv0 (gv0 ++ gv0)), (Permutation gv0 (gv0 ++ bl)), (Permutation gv0 (bl ++ l)), (Permutation gv0 (bl ++ gv0)), (Permutation gv0 (bl ++ bl)), (Permutation gv0 []), (Permutation bl gv0), (Permutation bl (n :: gv0)), (Permutation bl (a :: gv0)), (Permutation bl (y :: gv0))
(Permutation bl (selsort gv0 n)), (Permutation bl (selsort gv0 a)), (Permutation bl (selsort gv0 y)), (Permutation bl (l ++ gv0)), (Permutation bl (gv0 ++ l)), (Permutation bl (gv0 ++ gv0)), (Permutation bl (gv0 ++ bl)), (Permutation bl (bl ++ gv0)), (Permutation (n :: l) gv0), (Permutation (n :: l) (n :: gv0))
(Permutation (n :: l) (y :: gv0)), (Permutation (n :: l) (selection_sort gv0)), (Permutation (n :: l) (selsort gv0 n)), (Permutation (n :: l) (selsort gv0 a)), (Permutation (n :: l) (selsort gv0 y)), (Permutation (n :: l) (l ++ gv0)), (Permutation (n :: l) (gv0 ++ l)), (Permutation (n :: l) (gv0 ++ gv0)), (Permutation (n :: l) (gv0 ++ bl)), (Permutation (n :: l) (bl ++ gv0))
(Permutation (n :: gv0) gv0), (Permutation (n :: gv0) bl), (Permutation (n :: gv0) (n :: l)), (Permutation (n :: gv0) (n :: bl)), (Permutation (n :: gv0) (a :: l)), (Permutation (n :: gv0) (a :: gv0)), (Permutation (n :: gv0) (a :: bl)), (Permutation (n :: gv0) (y :: l)), (Permutation (n :: gv0) (y :: gv0)), (Permutation (n :: gv0) (y :: bl))
(Permutation (n :: gv0) (selection_sort gv0)), (Permutation (n :: gv0) (selection_sort bl)), (Permutation (n :: gv0) (selsort l n)), (Permutation (n :: gv0) (selsort l a)), (Permutation (n :: gv0) (selsort l y)), (Permutation (n :: gv0) (selsort gv0 n)), (Permutation (n :: gv0) (selsort gv0 a)), (Permutation (n :: gv0) (selsort gv0 y)), (Permutation (n :: gv0) (selsort bl n)), (Permutation (n :: gv0) (selsort bl a))
(Permutation (n :: gv0) (l ++ l)), (Permutation (n :: gv0) (l ++ gv0)), (Permutation (n :: gv0) (l ++ bl)), (Permutation (n :: gv0) (gv0 ++ l)), (Permutation (n :: gv0) (gv0 ++ gv0)), (Permutation (n :: gv0) (gv0 ++ bl)), (Permutation (n :: gv0) (bl ++ l)), (Permutation (n :: gv0) (bl ++ gv0)), (Permutation (n :: gv0) (bl ++ bl)), (Permutation (n :: gv0) [])
(Permutation (n :: bl) (n :: gv0)), (Permutation (n :: bl) (a :: gv0)), (Permutation (n :: bl) (y :: gv0)), (Permutation (n :: bl) (selection_sort gv0)), (Permutation (n :: bl) (selsort gv0 n)), (Permutation (n :: bl) (selsort gv0 a)), (Permutation (n :: bl) (selsort gv0 y)), (Permutation (n :: bl) (l ++ gv0)), (Permutation (n :: bl) (gv0 ++ l)), (Permutation (n :: bl) (gv0 ++ gv0))
(Permutation (n :: bl) (bl ++ gv0)), (Permutation (a :: l) gv0), (Permutation (a :: l) (n :: gv0)), (Permutation (a :: l) (a :: gv0)), (Permutation (a :: l) (y :: gv0)), (Permutation (a :: l) (selection_sort gv0)), (Permutation (a :: l) (selsort gv0 n)), (Permutation (a :: l) (selsort gv0 a)), (Permutation (a :: l) (selsort gv0 y)), (Permutation (a :: l) (l ++ gv0))
(Permutation (a :: l) (gv0 ++ gv0)), (Permutation (a :: l) (gv0 ++ bl)), (Permutation (a :: l) (bl ++ gv0)), (Permutation (a :: gv0) l), (Permutation (a :: gv0) gv0), (Permutation (a :: gv0) bl), (Permutation (a :: gv0) (n :: l)), (Permutation (a :: gv0) (n :: gv0)), (Permutation (a :: gv0) (n :: bl)), (Permutation (a :: gv0) (a :: l))
(Permutation (a :: gv0) (y :: l)), (Permutation (a :: gv0) (y :: gv0)), (Permutation (a :: gv0) (y :: bl)), (Permutation (a :: gv0) (selection_sort l)), (Permutation (a :: gv0) (selection_sort gv0)), (Permutation (a :: gv0) (selection_sort bl)), (Permutation (a :: gv0) (selsort l n)), (Permutation (a :: gv0) (selsort l a)), (Permutation (a :: gv0) (selsort l y)), (Permutation (a :: gv0) (selsort gv0 n))
(Permutation (a :: gv0) (selsort gv0 y)), (Permutation (a :: gv0) (selsort bl n)), (Permutation (a :: gv0) (selsort bl a)), (Permutation (a :: gv0) (selsort bl y)), (Permutation (a :: gv0) (l ++ l)), (Permutation (a :: gv0) (l ++ gv0)), (Permutation (a :: gv0) (l ++ bl)), (Permutation (a :: gv0) (gv0 ++ l)), (Permutation (a :: gv0) (gv0 ++ gv0)), (Permutation (a :: gv0) (gv0 ++ bl))
(Permutation (a :: gv0) (bl ++ gv0)), (Permutation (a :: gv0) (bl ++ bl)), (Permutation (a :: gv0) []), (Permutation (a :: bl) gv0), (Permutation (a :: bl) (n :: gv0)), (Permutation (a :: bl) (a :: gv0)), (Permutation (a :: bl) (y :: gv0)), (Permutation (a :: bl) (selection_sort gv0)), (Permutation (a :: bl) (selsort gv0 n)), (Permutation (a :: bl) (selsort gv0 a))
(Permutation (a :: bl) (l ++ gv0)), (Permutation (a :: bl) (gv0 ++ l)), (Permutation (a :: bl) (gv0 ++ gv0)), (Permutation (a :: bl) (gv0 ++ bl)), (Permutation (a :: bl) (bl ++ gv0)), (Permutation (y :: l) gv0), (Permutation (y :: l) (n :: gv0)), (Permutation (y :: l) (a :: gv0)), (Permutation (y :: l) (y :: gv0)), (Permutation (y :: l) (selection_sort gv0))
(Permutation (y :: l) (selsort gv0 a)), (Permutation (y :: l) (selsort gv0 y)), (Permutation (y :: l) (l ++ gv0)), (Permutation (y :: l) (gv0 ++ l)), (Permutation (y :: l) (gv0 ++ gv0)), (Permutation (y :: l) (gv0 ++ bl)), (Permutation (y :: l) (bl ++ gv0)), (Permutation (y :: gv0) l), (Permutation (y :: gv0) gv0), (Permutation (y :: gv0) bl)
(Permutation (y :: gv0) (n :: gv0)), (Permutation (y :: gv0) (n :: bl)), (Permutation (y :: gv0) (a :: l)), (Permutation (y :: gv0) (a :: gv0)), (Permutation (y :: gv0) (a :: bl)), (Permutation (y :: gv0) (y :: l)), (Permutation (y :: gv0) (y :: bl)), (Permutation (y :: gv0) (selection_sort l)), (Permutation (y :: gv0) (selection_sort gv0)), (Permutation (y :: gv0) (selection_sort bl))
(Permutation (y :: gv0) (selsort l a)), (Permutation (y :: gv0) (selsort l y)), (Permutation (y :: gv0) (selsort gv0 n)), (Permutation (y :: gv0) (selsort gv0 a)), (Permutation (y :: gv0) (selsort gv0 y)), (Permutation (y :: gv0) (selsort bl n)), (Permutation (y :: gv0) (selsort bl a)), (Permutation (y :: gv0) (selsort bl y)), (Permutation (y :: gv0) (l ++ l)), (Permutation (y :: gv0) (l ++ gv0))
(Permutation (y :: gv0) (gv0 ++ l)), (Permutation (y :: gv0) (gv0 ++ gv0)), (Permutation (y :: gv0) (gv0 ++ bl)), (Permutation (y :: gv0) (bl ++ l)), (Permutation (y :: gv0) (bl ++ gv0)), (Permutation (y :: gv0) (bl ++ bl)), (Permutation (y :: gv0) []), (Permutation (y :: bl) gv0), (Permutation (y :: bl) (n :: gv0)), (Permutation (y :: bl) (a :: gv0))
(Permutation (y :: bl) (selection_sort gv0)), (Permutation (y :: bl) (selsort gv0 n)), (Permutation (y :: bl) (selsort gv0 a)), (Permutation (y :: bl) (selsort gv0 y)), (Permutation (y :: bl) (l ++ gv0)), (Permutation (y :: bl) (gv0 ++ l)), (Permutation (y :: bl) (gv0 ++ gv0)), (Permutation (y :: bl) (gv0 ++ bl)), (Permutation (y :: bl) (bl ++ gv0)), (Permutation (selection_sort l) gv0)
(Permutation (selection_sort l) (a :: gv0)), (Permutation (selection_sort l) (y :: gv0)), (Permutation (selection_sort l) (selection_sort gv0)), (Permutation (selection_sort l) (selsort gv0 n)), (Permutation (selection_sort l) (selsort gv0 a)), (Permutation (selection_sort l) (selsort gv0 y)), (Permutation (selection_sort l) (l ++ gv0)), (Permutation (selection_sort l) (gv0 ++ l)), (Permutation (selection_sort l) (gv0 ++ gv0)), (Permutation (selection_sort l) (gv0 ++ bl))
(Permutation (selection_sort gv0) l), (Permutation (selection_sort gv0) gv0), (Permutation (selection_sort gv0) bl), (Permutation (selection_sort gv0) (n :: l)), (Permutation (selection_sort gv0) (n :: gv0)), (Permutation (selection_sort gv0) (n :: bl)), (Permutation (selection_sort gv0) (a :: l)), (Permutation (selection_sort gv0) (a :: gv0)), (Permutation (selection_sort gv0) (a :: bl)), (Permutation (selection_sort gv0) (y :: l))
(Permutation (selection_sort gv0) (y :: bl)), (Permutation (selection_sort gv0) (selection_sort l)), (Permutation (selection_sort gv0) (selection_sort bl)), (Permutation (selection_sort gv0) (selsort l n)), (Permutation (selection_sort gv0) (selsort l a)), (Permutation (selection_sort gv0) (selsort l y)), (Permutation (selection_sort gv0) (selsort gv0 n)), (Permutation (selection_sort gv0) (selsort gv0 a)), (Permutation (selection_sort gv0) (selsort gv0 y)), (Permutation (selection_sort gv0) (selsort bl n))
(Permutation (selection_sort gv0) (selsort bl y)), (Permutation (selection_sort gv0) (l ++ l)), (Permutation (selection_sort gv0) (l ++ gv0)), (Permutation (selection_sort gv0) (l ++ bl)), (Permutation (selection_sort gv0) (gv0 ++ l)), (Permutation (selection_sort gv0) (gv0 ++ gv0)), (Permutation (selection_sort gv0) (gv0 ++ bl)), (Permutation (selection_sort gv0) (bl ++ l)), (Permutation (selection_sort gv0) (bl ++ gv0)), (Permutation (selection_sort gv0) (bl ++ bl))
(Permutation (selection_sort bl) gv0), (Permutation (selection_sort bl) (n :: gv0)), (Permutation (selection_sort bl) (a :: gv0)), (Permutation (selection_sort bl) (y :: gv0)), (Permutation (selection_sort bl) (selection_sort gv0)), (Permutation (selection_sort bl) (selsort gv0 n)), (Permutation (selection_sort bl) (selsort gv0 a)), (Permutation (selection_sort bl) (selsort gv0 y)), (Permutation (selection_sort bl) (l ++ gv0)), (Permutation (selection_sort bl) (gv0 ++ l))
(Permutation (selection_sort bl) (gv0 ++ bl)), (Permutation (selection_sort bl) (bl ++ gv0)), (Permutation (selsort l n) gv0), (Permutation (selsort l n) (n :: gv0)), (Permutation (selsort l n) (a :: gv0)), (Permutation (selsort l n) (y :: gv0)), (Permutation (selsort l n) (selection_sort gv0)), (Permutation (selsort l n) (selsort gv0 n)), (Permutation (selsort l n) (selsort gv0 a)), (Permutation (selsort l n) (selsort gv0 y))
(Permutation (selsort l n) (gv0 ++ l)), (Permutation (selsort l n) (gv0 ++ gv0)), (Permutation (selsort l n) (gv0 ++ bl)), (Permutation (selsort l n) (bl ++ gv0)), (Permutation (selsort l a) gv0), (Permutation (selsort l a) (n :: gv0)), (Permutation (selsort l a) (a :: gv0)), (Permutation (selsort l a) (y :: gv0)), (Permutation (selsort l a) (selection_sort gv0)), (Permutation (selsort l a) (selsort gv0 n))
(Permutation (selsort l a) (selsort gv0 y)), (Permutation (selsort l a) (l ++ gv0)), (Permutation (selsort l a) (gv0 ++ l)), (Permutation (selsort l a) (gv0 ++ gv0)), (Permutation (selsort l a) (gv0 ++ bl)), (Permutation (selsort l a) (bl ++ gv0)), (Permutation (selsort l y) gv0), (Permutation (selsort l y) (n :: gv0)), (Permutation (selsort l y) (a :: gv0)), (Permutation (selsort l y) (y :: gv0))
(Permutation (selsort l y) (selsort gv0 n)), (Permutation (selsort l y) (selsort gv0 a)), (Permutation (selsort l y) (selsort gv0 y)), (Permutation (selsort l y) (l ++ gv0)), (Permutation (selsort l y) (gv0 ++ l)), (Permutation (selsort l y) (gv0 ++ gv0)), (Permutation (selsort l y) (gv0 ++ bl)), (Permutation (selsort l y) (bl ++ gv0)), (Permutation (selsort gv0 n) l), (Permutation (selsort gv0 n) gv0)
(Permutation (selsort gv0 n) (n :: l)), (Permutation (selsort gv0 n) (n :: gv0)), (Permutation (selsort gv0 n) (n :: bl)), (Permutation (selsort gv0 n) (a :: l)), (Permutation (selsort gv0 n) (a :: gv0)), (Permutation (selsort gv0 n) (a :: bl)), (Permutation (selsort gv0 n) (y :: l)), (Permutation (selsort gv0 n) (y :: gv0)), (Permutation (selsort gv0 n) (y :: bl)), (Permutation (selsort gv0 n) (selection_sort l))
(Permutation (selsort gv0 n) (selection_sort bl)), (Permutation (selsort gv0 n) (selsort l n)), (Permutation (selsort gv0 n) (selsort l a)), (Permutation (selsort gv0 n) (selsort l y)), (Permutation (selsort gv0 n) (selsort gv0 a)), (Permutation (selsort gv0 n) (selsort gv0 y)), (Permutation (selsort gv0 n) (selsort bl n)), (Permutation (selsort gv0 n) (selsort bl a)), (Permutation (selsort gv0 n) (selsort bl y)), (Permutation (selsort gv0 n) (l ++ l))
(Permutation (selsort gv0 n) (l ++ bl)), (Permutation (selsort gv0 n) (gv0 ++ l)), (Permutation (selsort gv0 n) (gv0 ++ gv0)), (Permutation (selsort gv0 n) (gv0 ++ bl)), (Permutation (selsort gv0 n) (bl ++ l)), (Permutation (selsort gv0 n) (bl ++ gv0)), (Permutation (selsort gv0 n) (bl ++ bl)), (Permutation (selsort gv0 n) []), (Permutation (selsort gv0 a) l), (Permutation (selsort gv0 a) gv0)
(Permutation (selsort gv0 a) (n :: l)), (Permutation (selsort gv0 a) (n :: gv0)), (Permutation (selsort gv0 a) (n :: bl)), (Permutation (selsort gv0 a) (a :: l)), (Permutation (selsort gv0 a) (a :: gv0)), (Permutation (selsort gv0 a) (a :: bl)), (Permutation (selsort gv0 a) (y :: l)), (Permutation (selsort gv0 a) (y :: gv0)), (Permutation (selsort gv0 a) (y :: bl)), (Permutation (selsort gv0 a) (selection_sort l))
(Permutation (selsort gv0 a) (selection_sort bl)), (Permutation (selsort gv0 a) (selsort l n)), (Permutation (selsort gv0 a) (selsort l a)), (Permutation (selsort gv0 a) (selsort l y)), (Permutation (selsort gv0 a) (selsort gv0 n)), (Permutation (selsort gv0 a) (selsort gv0 y)), (Permutation (selsort gv0 a) (selsort bl n)), (Permutation (selsort gv0 a) (selsort bl a)), (Permutation (selsort gv0 a) (selsort bl y)), (Permutation (selsort gv0 a) (l ++ l))
(Permutation (selsort gv0 a) (l ++ bl)), (Permutation (selsort gv0 a) (gv0 ++ l)), (Permutation (selsort gv0 a) (gv0 ++ gv0)), (Permutation (selsort gv0 a) (gv0 ++ bl)), (Permutation (selsort gv0 a) (bl ++ l)), (Permutation (selsort gv0 a) (bl ++ gv0)), (Permutation (selsort gv0 a) (bl ++ bl)), (Permutation (selsort gv0 a) []), (Permutation (selsort gv0 y) l), (Permutation (selsort gv0 y) gv0)
(Permutation (selsort gv0 y) (n :: l)), (Permutation (selsort gv0 y) (n :: gv0)), (Permutation (selsort gv0 y) (n :: bl)), (Permutation (selsort gv0 y) (a :: l)), (Permutation (selsort gv0 y) (a :: gv0)), (Permutation (selsort gv0 y) (a :: bl)), (Permutation (selsort gv0 y) (y :: l)), (Permutation (selsort gv0 y) (y :: gv0)), (Permutation (selsort gv0 y) (y :: bl)), (Permutation (selsort gv0 y) (selection_sort l))
(Permutation (selsort gv0 y) (selection_sort bl)), (Permutation (selsort gv0 y) (selsort l n)), (Permutation (selsort gv0 y) (selsort l a)), (Permutation (selsort gv0 y) (selsort l y)), (Permutation (selsort gv0 y) (selsort gv0 n)), (Permutation (selsort gv0 y) (selsort gv0 a)), (Permutation (selsort gv0 y) (selsort bl n)), (Permutation (selsort gv0 y) (selsort bl a)), (Permutation (selsort gv0 y) (selsort bl y)), (Permutation (selsort gv0 y) (l ++ l))
(Permutation (selsort gv0 y) (l ++ bl)), (Permutation (selsort gv0 y) (gv0 ++ l)), (Permutation (selsort gv0 y) (gv0 ++ gv0)), (Permutation (selsort gv0 y) (gv0 ++ bl)), (Permutation (selsort gv0 y) (bl ++ l)), (Permutation (selsort gv0 y) (bl ++ gv0)), (Permutation (selsort gv0 y) (bl ++ bl)), (Permutation (selsort gv0 y) []), (Permutation (selsort bl n) gv0), (Permutation (selsort bl n) (n :: gv0))
(Permutation (selsort bl n) (y :: gv0)), (Permutation (selsort bl n) (selection_sort gv0)), (Permutation (selsort bl n) (selsort gv0 n)), (Permutation (selsort bl n) (selsort gv0 a)), (Permutation (selsort bl n) (selsort gv0 y)), (Permutation (selsort bl n) (l ++ gv0)), (Permutation (selsort bl n) (gv0 ++ l)), (Permutation (selsort bl n) (gv0 ++ gv0)), (Permutation (selsort bl n) (gv0 ++ bl)), (Permutation (selsort bl n) (bl ++ gv0))
(Permutation (selsort bl a) (n :: gv0)), (Permutation (selsort bl a) (a :: gv0)), (Permutation (selsort bl a) (y :: gv0)), (Permutation (selsort bl a) (selection_sort gv0)), (Permutation (selsort bl a) (selsort gv0 n)), (Permutation (selsort bl a) (selsort gv0 a)), (Permutation (selsort bl a) (selsort gv0 y)), (Permutation (selsort bl a) (l ++ gv0)), (Permutation (selsort bl a) (gv0 ++ l)), (Permutation (selsort bl a) (gv0 ++ gv0))
(Permutation (selsort bl a) (bl ++ gv0)), (Permutation (selsort bl y) gv0), (Permutation (selsort bl y) (n :: gv0)), (Permutation (selsort bl y) (a :: gv0)), (Permutation (selsort bl y) (y :: gv0)), (Permutation (selsort bl y) (selection_sort gv0)), (Permutation (selsort bl y) (selsort gv0 n)), (Permutation (selsort bl y) (selsort gv0 a)), (Permutation (selsort bl y) (selsort gv0 y)), (Permutation (selsort bl y) (l ++ gv0))
(Permutation (selsort bl y) (gv0 ++ gv0)), (Permutation (selsort bl y) (gv0 ++ bl)), (Permutation (selsort bl y) (bl ++ gv0)), (Permutation (l ++ l) gv0), (Permutation (l ++ l) (n :: gv0)), (Permutation (l ++ l) (a :: gv0)), (Permutation (l ++ l) (y :: gv0)), (Permutation (l ++ l) (selection_sort gv0)), (Permutation (l ++ l) (selsort gv0 n)), (Permutation (l ++ l) (selsort gv0 a))
(Permutation (l ++ l) (l ++ gv0)), (Permutation (l ++ l) (gv0 ++ l)), (Permutation (l ++ l) (gv0 ++ gv0)), (Permutation (l ++ l) (gv0 ++ bl)), (Permutation (l ++ l) (bl ++ gv0)), (Permutation (l ++ gv0) l), (Permutation (l ++ gv0) gv0), (Permutation (l ++ gv0) bl), (Permutation (l ++ gv0) (n :: l)), (Permutation (l ++ gv0) (n :: gv0))
(Permutation (l ++ gv0) (a :: l)), (Permutation (l ++ gv0) (a :: gv0)), (Permutation (l ++ gv0) (a :: bl)), (Permutation (l ++ gv0) (y :: l)), (Permutation (l ++ gv0) (y :: gv0)), (Permutation (l ++ gv0) (y :: bl)), (Permutation (l ++ gv0) (selection_sort l)), (Permutation (l ++ gv0) (selection_sort gv0)), (Permutation (l ++ gv0) (selection_sort bl)), (Permutation (l ++ gv0) (selsort l n))
(Permutation (l ++ gv0) (selsort l y)), (Permutation (l ++ gv0) (selsort gv0 n)), (Permutation (l ++ gv0) (selsort gv0 a)), (Permutation (l ++ gv0) (selsort gv0 y)), (Permutation (l ++ gv0) (selsort bl n)), (Permutation (l ++ gv0) (selsort bl a)), (Permutation (l ++ gv0) (selsort bl y)), (Permutation (l ++ gv0) (l ++ l)), (Permutation (l ++ gv0) (l ++ bl)), (Permutation (l ++ gv0) (gv0 ++ l))
(Permutation (l ++ gv0) (gv0 ++ bl)), (Permutation (l ++ gv0) (bl ++ l)), (Permutation (l ++ gv0) (bl ++ gv0)), (Permutation (l ++ gv0) (bl ++ bl)), (Permutation (l ++ gv0) []), (Permutation (l ++ bl) gv0), (Permutation (l ++ bl) (n :: gv0)), (Permutation (l ++ bl) (a :: gv0)), (Permutation (l ++ bl) (y :: gv0)), (Permutation (l ++ bl) (selection_sort gv0))
(Permutation (l ++ bl) (selsort gv0 a)), (Permutation (l ++ bl) (selsort gv0 y)), (Permutation (l ++ bl) (l ++ gv0)), (Permutation (l ++ bl) (gv0 ++ l)), (Permutation (l ++ bl) (gv0 ++ gv0)), (Permutation (l ++ bl) (gv0 ++ bl)), (Permutation (l ++ bl) (bl ++ gv0)), (Permutation (gv0 ++ l) l), (Permutation (gv0 ++ l) gv0), (Permutation (gv0 ++ l) bl)
(Permutation (gv0 ++ l) (n :: gv0)), (Permutation (gv0 ++ l) (n :: bl)), (Permutation (gv0 ++ l) (a :: l)), (Permutation (gv0 ++ l) (a :: gv0)), (Permutation (gv0 ++ l) (a :: bl)), (Permutation (gv0 ++ l) (y :: l)), (Permutation (gv0 ++ l) (y :: gv0)), (Permutation (gv0 ++ l) (y :: bl)), (Permutation (gv0 ++ l) (selection_sort l)), (Permutation (gv0 ++ l) (selection_sort gv0))
(Permutation (gv0 ++ l) (selsort l n)), (Permutation (gv0 ++ l) (selsort l a)), (Permutation (gv0 ++ l) (selsort l y)), (Permutation (gv0 ++ l) (selsort gv0 n)), (Permutation (gv0 ++ l) (selsort gv0 a)), (Permutation (gv0 ++ l) (selsort gv0 y)), (Permutation (gv0 ++ l) (selsort bl n)), (Permutation (gv0 ++ l) (selsort bl a)), (Permutation (gv0 ++ l) (selsort bl y)), (Permutation (gv0 ++ l) (l ++ l))
(Permutation (gv0 ++ l) (l ++ bl)), (Permutation (gv0 ++ l) (gv0 ++ gv0)), (Permutation (gv0 ++ l) (gv0 ++ bl)), (Permutation (gv0 ++ l) (bl ++ l)), (Permutation (gv0 ++ l) (bl ++ gv0)), (Permutation (gv0 ++ l) (bl ++ bl)), (Permutation (gv0 ++ l) []), (Permutation (gv0 ++ gv0) l), (Permutation (gv0 ++ gv0) gv0), (Permutation (gv0 ++ gv0) bl)
(Permutation (gv0 ++ gv0) (n :: gv0)), (Permutation (gv0 ++ gv0) (n :: bl)), (Permutation (gv0 ++ gv0) (a :: l)), (Permutation (gv0 ++ gv0) (a :: gv0)), (Permutation (gv0 ++ gv0) (a :: bl)), (Permutation (gv0 ++ gv0) (y :: l)), (Permutation (gv0 ++ gv0) (y :: gv0)), (Permutation (gv0 ++ gv0) (y :: bl)), (Permutation (gv0 ++ gv0) (selection_sort l)), (Permutation (gv0 ++ gv0) (selection_sort gv0))
(Permutation (gv0 ++ gv0) (selsort l n)), (Permutation (gv0 ++ gv0) (selsort l a)), (Permutation (gv0 ++ gv0) (selsort l y)), (Permutation (gv0 ++ gv0) (selsort gv0 n)), (Permutation (gv0 ++ gv0) (selsort gv0 a)), (Permutation (gv0 ++ gv0) (selsort gv0 y)), (Permutation (gv0 ++ gv0) (selsort bl n)), (Permutation (gv0 ++ gv0) (selsort bl a)), (Permutation (gv0 ++ gv0) (selsort bl y)), (Permutation (gv0 ++ gv0) (l ++ l))
(Permutation (gv0 ++ gv0) (l ++ bl)), (Permutation (gv0 ++ gv0) (gv0 ++ l)), (Permutation (gv0 ++ gv0) (gv0 ++ bl)), (Permutation (gv0 ++ gv0) (bl ++ l)), (Permutation (gv0 ++ gv0) (bl ++ gv0)), (Permutation (gv0 ++ gv0) (bl ++ bl)), (Permutation (gv0 ++ gv0) []), (Permutation (gv0 ++ bl) l), (Permutation (gv0 ++ bl) gv0), (Permutation (gv0 ++ bl) bl)
(Permutation (gv0 ++ bl) (n :: gv0)), (Permutation (gv0 ++ bl) (n :: bl)), (Permutation (gv0 ++ bl) (a :: l)), (Permutation (gv0 ++ bl) (a :: gv0)), (Permutation (gv0 ++ bl) (a :: bl)), (Permutation (gv0 ++ bl) (y :: l)), (Permutation (gv0 ++ bl) (y :: gv0)), (Permutation (gv0 ++ bl) (y :: bl)), (Permutation (gv0 ++ bl) (selection_sort l)), (Permutation (gv0 ++ bl) (selection_sort gv0))
(Permutation (gv0 ++ bl) (selsort l n)), (Permutation (gv0 ++ bl) (selsort l a)), (Permutation (gv0 ++ bl) (selsort l y)), (Permutation (gv0 ++ bl) (selsort gv0 n)), (Permutation (gv0 ++ bl) (selsort gv0 a)), (Permutation (gv0 ++ bl) (selsort gv0 y)), (Permutation (gv0 ++ bl) (selsort bl n)), (Permutation (gv0 ++ bl) (selsort bl a)), (Permutation (gv0 ++ bl) (selsort bl y)), (Permutation (gv0 ++ bl) (l ++ l))
(Permutation (gv0 ++ bl) (l ++ bl)), (Permutation (gv0 ++ bl) (gv0 ++ l)), (Permutation (gv0 ++ bl) (gv0 ++ gv0)), (Permutation (gv0 ++ bl) (bl ++ l)), (Permutation (gv0 ++ bl) (bl ++ gv0)), (Permutation (gv0 ++ bl) (bl ++ bl)), (Permutation (gv0 ++ bl) []), (Permutation (bl ++ l) gv0), (Permutation (bl ++ l) (n :: gv0)), (Permutation (bl ++ l) (a :: gv0))
(Permutation (bl ++ l) (selection_sort gv0)), (Permutation (bl ++ l) (selsort gv0 n)), (Permutation (bl ++ l) (selsort gv0 a)), (Permutation (bl ++ l) (selsort gv0 y)), (Permutation (bl ++ l) (l ++ gv0)), (Permutation (bl ++ l) (gv0 ++ l)), (Permutation (bl ++ l) (gv0 ++ gv0)), (Permutation (bl ++ l) (gv0 ++ bl)), (Permutation (bl ++ l) (bl ++ gv0)), (Permutation (bl ++ gv0) l)
(Permutation (bl ++ gv0) bl), (Permutation (bl ++ gv0) (n :: l)), (Permutation (bl ++ gv0) (n :: gv0)), (Permutation (bl ++ gv0) (n :: bl)), (Permutation (bl ++ gv0) (a :: l)), (Permutation (bl ++ gv0) (a :: gv0)), (Permutation (bl ++ gv0) (a :: bl)), (Permutation (bl ++ gv0) (y :: l)), (Permutation (bl ++ gv0) (y :: gv0)), (Permutation (bl ++ gv0) (y :: bl))
(Permutation (bl ++ gv0) (selection_sort gv0)), (Permutation (bl ++ gv0) (selection_sort bl)), (Permutation (bl ++ gv0) (selsort l n)), (Permutation (bl ++ gv0) (selsort l a)), (Permutation (bl ++ gv0) (selsort l y)), (Permutation (bl ++ gv0) (selsort gv0 n)), (Permutation (bl ++ gv0) (selsort gv0 a)), (Permutation (bl ++ gv0) (selsort gv0 y)), (Permutation (bl ++ gv0) (selsort bl n)), (Permutation (bl ++ gv0) (selsort bl a))
(Permutation (bl ++ gv0) (l ++ l)), (Permutation (bl ++ gv0) (l ++ gv0)), (Permutation (bl ++ gv0) (l ++ bl)), (Permutation (bl ++ gv0) (gv0 ++ l)), (Permutation (bl ++ gv0) (gv0 ++ gv0)), (Permutation (bl ++ gv0) (gv0 ++ bl)), (Permutation (bl ++ gv0) (bl ++ l)), (Permutation (bl ++ gv0) (bl ++ bl)), (Permutation (bl ++ gv0) []), (Permutation (bl ++ bl) gv0)
(Permutation (bl ++ bl) (a :: gv0)), (Permutation (bl ++ bl) (y :: gv0)), (Permutation (bl ++ bl) (selection_sort gv0)), (Permutation (bl ++ bl) (selsort gv0 n)), (Permutation (bl ++ bl) (selsort gv0 a)), (Permutation (bl ++ bl) (selsort gv0 y)), (Permutation (bl ++ bl) (l ++ gv0)), (Permutation (bl ++ bl) (gv0 ++ l)), (Permutation (bl ++ bl) (gv0 ++ gv0)), (Permutation (bl ++ bl) (gv0 ++ bl))
(Permutation [] gv0), (Permutation [] (n :: gv0)), (Permutation [] (a :: gv0)), (Permutation [] (y :: gv0)), (Permutation [] (selection_sort gv0)), (Permutation [] (selsort gv0 n)), (Permutation [] (selsort gv0 a)), (Permutation [] (selsort gv0 y)), (Permutation [] (l ++ gv0)), (Permutation [] (gv0 ++ l))
(Permutation [] (gv0 ++ bl)), (Permutation [] (bl ++ gv0)), (In n gv0), (In n (n :: gv0)), (In n (a :: gv0)), (In n (y :: gv0)), (In n (selection_sort gv0)), (In n (selsort gv0 n)), (In n (selsort gv0 a)), (In n (selsort gv0 y))
(In n (gv0 ++ l)), (In n (gv0 ++ gv0)), (In n (gv0 ++ bl)), (In n (bl ++ gv0)), (In a gv0), (In a (n :: gv0)), (In a (a :: gv0)), (In a (y :: gv0)), (In a (selection_sort gv0)), (In a (selsort gv0 n))
(In a (selsort gv0 y)), (In a (l ++ gv0)), (In a (gv0 ++ l)), (In a (gv0 ++ gv0)), (In a (gv0 ++ bl)), (In a (bl ++ gv0)), (In y gv0), (In y (n :: gv0)), (In y (a :: gv0)), (In y (y :: gv0))
(In y (selsort gv0 n)), (In y (selsort gv0 a)), (In y (selsort gv0 y)), (In y (l ++ gv0)), (In y (gv0 ++ l)), (In y (gv0 ++ gv0)), (In y (gv0 ++ bl)), (In y (bl ++ gv0)), (In (length l) gv0), (In (length l) (n :: gv0))
(In (length l) (y :: gv0)), (In (length l) (selection_sort gv0)), (In (length l) (selsort gv0 n)), (In (length l) (selsort gv0 a)), (In (length l) (selsort gv0 y)), (In (length l) (l ++ gv0)), (In (length l) (gv0 ++ l)), (In (length l) (gv0 ++ gv0)), (In (length l) (gv0 ++ bl)), (In (length l) (bl ++ gv0))
(In (length gv0) gv0), (In (length gv0) bl), (In (length gv0) (n :: l)), (In (length gv0) (n :: gv0)), (In (length gv0) (n :: bl)), (In (length gv0) (a :: l)), (In (length gv0) (a :: gv0)), (In (length gv0) (a :: bl)), (In (length gv0) (y :: l)), (In (length gv0) (y :: gv0))
(In (length gv0) (selection_sort l)), (In (length gv0) (selection_sort gv0)), (In (length gv0) (selection_sort bl)), (In (length gv0) (selsort l n)), (In (length gv0) (selsort l a)), (In (length gv0) (selsort l y)), (In (length gv0) (selsort gv0 n)), (In (length gv0) (selsort gv0 a)), (In (length gv0) (selsort gv0 y)), (In (length gv0) (selsort bl n))
(In (length gv0) (selsort bl y)), (In (length gv0) (l ++ l)), (In (length gv0) (l ++ gv0)), (In (length gv0) (l ++ bl)), (In (length gv0) (gv0 ++ l)), (In (length gv0) (gv0 ++ gv0)), (In (length gv0) (gv0 ++ bl)), (In (length gv0) (bl ++ l)), (In (length gv0) (bl ++ gv0)), (In (length gv0) (bl ++ bl))
(In (length bl) (n :: gv0)), (In (length bl) (a :: gv0)), (In (length bl) (y :: gv0)), (In (length bl) (selection_sort gv0)), (In (length bl) (selsort gv0 n)), (In (length bl) (selsort gv0 a)), (In (length bl) (selsort gv0 y)), (In (length bl) (l ++ gv0)), (In (length bl) (gv0 ++ l)), (In (length bl) (gv0 ++ gv0))
(In (length bl) (bl ++ gv0)), (n < length gv0), (a < length gv0), (y < length gv0), (length l < length gv0), (length gv0 < n), (length gv0 < a), (length gv0 < y), (length gv0 < length l), (length gv0 < length bl)
(n <= length gv0), (a <= length gv0), (y <= length gv0), (length l <= length gv0), (length gv0 <= n), (length gv0 <= a), (length gv0 <= y), (length gv0 <= length l), (length gv0 <= length bl), (length bl <= length gv0)
(selection_sort l = l ++ gv0), (selection_sort l = gv0 ++ l), (selection_sort l = gv0 ++ gv0), (selection_sort l = gv0 ++ bl), (selection_sort l = bl ++ gv0), (selection_sort gv0 = l), (selection_sort gv0 = gv0), (selection_sort gv0 = bl), (selection_sort gv0 = l ++ l), (selection_sort gv0 = l ++ gv0)
(selection_sort gv0 = gv0 ++ l), (selection_sort gv0 = gv0 ++ gv0), (selection_sort gv0 = gv0 ++ bl), (selection_sort gv0 = bl ++ l), (selection_sort gv0 = bl ++ gv0), (selection_sort gv0 = bl ++ bl), (selection_sort bl = gv0), (selection_sort bl = l ++ gv0), (selection_sort bl = gv0 ++ l), (selection_sort bl = gv0 ++ gv0)
(selection_sort bl = bl ++ gv0), (selsort l n = gv0), (selsort l n = selection_sort gv0), (selsort l n = l ++ gv0), (selsort l n = gv0 ++ l), (selsort l n = gv0 ++ gv0), (selsort l n = gv0 ++ bl), (selsort l n = bl ++ gv0), (selsort l a = gv0), (selsort l a = selection_sort gv0)
(selsort l a = gv0 ++ l), (selsort l a = gv0 ++ gv0), (selsort l a = gv0 ++ bl), (selsort l a = bl ++ gv0), (selsort l y = gv0), (selsort l y = selection_sort gv0), (selsort l y = l ++ gv0), (selsort l y = gv0 ++ l), (selsort l y = gv0 ++ gv0), (selsort l y = gv0 ++ bl)
(selsort gv0 n = l), (selsort gv0 n = gv0), (selsort gv0 n = bl), (selsort gv0 n = selection_sort l), (selsort gv0 n = selection_sort gv0), (selsort gv0 n = selection_sort bl), (selsort gv0 n = l ++ l), (selsort gv0 n = l ++ gv0), (selsort gv0 n = l ++ bl), (selsort gv0 n = gv0 ++ l)
(selsort gv0 n = gv0 ++ bl), (selsort gv0 n = bl ++ l), (selsort gv0 n = bl ++ gv0), (selsort gv0 n = bl ++ bl), (selsort gv0 a = l), (selsort gv0 a = gv0), (selsort gv0 a = bl), (selsort gv0 a = selection_sort l), (selsort gv0 a = selection_sort gv0), (selsort gv0 a = selection_sort bl)
(selsort gv0 a = l ++ gv0), (selsort gv0 a = l ++ bl), (selsort gv0 a = gv0 ++ l), (selsort gv0 a = gv0 ++ gv0), (selsort gv0 a = gv0 ++ bl), (selsort gv0 a = bl ++ l), (selsort gv0 a = bl ++ gv0), (selsort gv0 a = bl ++ bl), (selsort gv0 y = l), (selsort gv0 y = gv0)
(selsort gv0 y = selection_sort l), (selsort gv0 y = selection_sort gv0), (selsort gv0 y = selection_sort bl), (selsort gv0 y = l ++ l), (selsort gv0 y = l ++ gv0), (selsort gv0 y = l ++ bl), (selsort gv0 y = gv0 ++ l), (selsort gv0 y = gv0 ++ gv0), (selsort gv0 y = gv0 ++ bl), (selsort gv0 y = bl ++ l)
(selsort gv0 y = bl ++ bl), (selsort bl n = gv0), (selsort bl n = selection_sort gv0), (selsort bl n = l ++ gv0), (selsort bl n = gv0 ++ l), (selsort bl n = gv0 ++ gv0), (selsort bl n = gv0 ++ bl), (selsort bl n = bl ++ gv0), (selsort bl a = gv0), (selsort bl a = selection_sort gv0)
(selsort bl a = gv0 ++ l), (selsort bl a = gv0 ++ gv0), (selsort bl a = gv0 ++ bl), (selsort bl a = bl ++ gv0), (selsort bl y = gv0), (selsort bl y = selection_sort gv0), (selsort bl y = l ++ gv0), (selsort bl y = gv0 ++ l), (selsort bl y = gv0 ++ gv0), (selsort bl y = gv0 ++ bl)
(l ++ l = gv0), (l ++ gv0 = l), (l ++ gv0 = gv0), (l ++ gv0 = bl), (l ++ bl = gv0), (gv0 ++ l = l), (gv0 ++ l = gv0), (gv0 ++ l = bl), (gv0 ++ gv0 = l), (gv0 ++ gv0 = gv0)
(gv0 ++ bl = l), (gv0 ++ bl = gv0), (gv0 ++ bl = bl), (bl ++ l = gv0), (bl ++ gv0 = l), (bl ++ gv0 = gv0), (bl ++ gv0 = bl), (bl ++ bl = gv0), (length gv0 = n), (length gv0 = a)

Label: 1 (1)
(false = sorted_bool bl), (true = sorted_bool bl), (n <=* bl), (n <=* n :: bl), (n <=* selection_sort bl), (n <=* selsort bl n), (n <=* bl ++ bl), (n <=* []), (length bl <=* bl), (length bl <=* n :: bl)
(length bl <=* selsort bl n), (length bl <=* bl ++ bl), (length bl <=* []), (sorted bl), (sorted (n :: bl)), (sorted (selection_sort bl)), (sorted (selsort bl n)), (sorted (bl ++ bl)), (sorted []), (Permutation bl (n :: bl))
(Permutation bl (selsort bl n)), (Permutation bl (bl ++ bl)), (Permutation bl []), (Permutation (n :: bl) bl), (Permutation (n :: bl) (selection_sort bl)), (Permutation (n :: bl) (selsort bl n)), (Permutation (n :: bl) (bl ++ bl)), (Permutation (n :: bl) []), (Permutation (selection_sort bl) bl), (Permutation (selection_sort bl) (n :: bl))
(Permutation (selection_sort bl) (bl ++ bl)), (Permutation (selection_sort bl) []), (Permutation (selsort bl n) bl), (Permutation (selsort bl n) (n :: bl)), (Permutation (selsort bl n) (selection_sort bl)), (Permutation (selsort bl n) (bl ++ bl)), (Permutation (selsort bl n) []), (Permutation (bl ++ bl) bl), (Permutation (bl ++ bl) (n :: bl)), (Permutation (bl ++ bl) (selection_sort bl))
(Permutation (bl ++ bl) []), (Permutation [] bl), (Permutation [] (n :: bl)), (Permutation [] (selection_sort bl)), (Permutation [] (selsort bl n)), (Permutation [] (bl ++ bl)), (In n bl), (In n (n :: bl)), (In n (selection_sort bl)), (In n (selsort bl n))
(In (length bl) bl), (In (length bl) (n :: bl)), (In (length bl) (selection_sort bl)), (In (length bl) (selsort bl n)), (In (length bl) (bl ++ bl)), (n < length bl), (length bl < n), (n <= length bl), (length bl <= n), (selection_sort bl = bl)
(selsort bl n = bl), (selsort bl n = selection_sort bl), (selsort bl n = bl ++ bl), (bl ++ bl = bl), (length bl = n)


------------------------------ SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 483.23 seconds


Label: 0 (0)
(Permutation gv0 bl), (Permutation gv0 (selection_sort bl)), (Permutation gv0 (selsort bl n)), (Permutation gv0 (l ++ bl)), (Permutation gv0 (bl ++ l)), (Permutation bl gv0), (Permutation bl (selection_sort gv0)), (Permutation bl (l ++ gv0)), (Permutation bl (gv0 ++ l)), (Permutation (n :: gv0) (n :: bl))
(Permutation (a :: gv0) (a :: bl)), (Permutation (a :: gv0) (gv0 ++ bl)), (Permutation (a :: gv0) (bl ++ gv0)), (Permutation (a :: gv0) (bl ++ bl)), (Permutation (a :: bl) (a :: gv0)), (Permutation (a :: bl) (gv0 ++ gv0)), (Permutation (y :: bl) (y :: gv0)), (Permutation (selection_sort gv0) bl), (Permutation (selection_sort gv0) (selection_sort bl)), (Permutation (selection_sort gv0) (selsort bl n))
(Permutation (selection_sort bl) gv0), (Permutation (selection_sort bl) (selection_sort gv0)), (Permutation (selection_sort bl) (l ++ gv0)), (Permutation (selection_sort bl) (gv0 ++ l)), (Permutation (selsort bl n) gv0), (Permutation (selsort bl n) (selection_sort gv0)), (Permutation (selsort bl n) (l ++ gv0)), (Permutation (l ++ gv0) bl), (Permutation (l ++ gv0) (selection_sort bl)), (Permutation (l ++ gv0) (selsort bl n))
(Permutation (l ++ gv0) (bl ++ l)), (Permutation (l ++ bl) gv0), (Permutation (l ++ bl) (selection_sort gv0)), (Permutation (l ++ bl) (l ++ gv0)), (Permutation (l ++ bl) (gv0 ++ l)), (Permutation (gv0 ++ l) bl), (Permutation (gv0 ++ l) (selsort bl n)), (Permutation (gv0 ++ l) (bl ++ l)), (Permutation (gv0 ++ gv0) (a :: bl)), (Permutation (gv0 ++ gv0) (gv0 ++ bl))
(Permutation (gv0 ++ gv0) (bl ++ bl)), (Permutation (gv0 ++ bl) (a :: gv0)), (Permutation (gv0 ++ bl) (gv0 ++ gv0)), (Permutation (gv0 ++ bl) (bl ++ bl)), (Permutation (bl ++ l) gv0), (Permutation (bl ++ l) (selection_sort gv0)), (Permutation (bl ++ l) (l ++ gv0)), (Permutation (bl ++ l) (gv0 ++ l)), (Permutation (bl ++ gv0) (a :: gv0)), (Permutation (bl ++ gv0) (gv0 ++ gv0))
(Permutation (bl ++ bl) (a :: gv0)), (Permutation (bl ++ bl) (gv0 ++ gv0)), (Permutation (bl ++ bl) (gv0 ++ bl)), (Permutation (bl ++ bl) (bl ++ gv0)), (selection_sort gv0 = bl), (selection_sort gv0 = l ++ bl), (selection_sort gv0 = bl ++ l), (selection_sort bl = gv0), (selection_sort bl = l ++ gv0), (selection_sort bl = gv0 ++ l)
(selsort bl n = selection_sort gv0), (selsort bl n = l ++ gv0), (selsort bl n = gv0 ++ l), (l ++ gv0 = bl), (gv0 ++ l = bl), (bl ++ l = gv0)

Label: 1 (1)
(Permutation bl (selsort bl n)), (Permutation (selection_sort bl) (selsort bl n)), (Permutation (selsort bl n) bl), (Permutation (selsort bl n) (selection_sort bl)), (length bl <= n), (selsort bl n = selection_sort bl), (length bl = n)


------------------------------ FINAL RESULTS ------------------------------
Time Elapsed From Start: 1506.894 seconds


(gv0 = a :: l -> n = length bl -> bl ++ l = gv0 -> Permutation bl gv0)
(sorted (a :: l) ->
 gv0 = a :: l -> n = length bl -> bl ++ l = gv0 -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) ->
 gv0 = a :: l -> n = length bl -> bl ++ l = gv0 -> Permutation bl gv0)
(gv0 = a :: l -> gv0 ++ l = bl -> Permutation bl gv0)
(gv0 = a :: l -> n = length bl -> gv0 ++ l = bl -> Permutation bl gv0)
(y <=* bl -> gv0 = a :: l -> gv0 ++ l = bl -> Permutation bl gv0)
(y <=* bl ->
 gv0 = a :: l -> n = length bl -> gv0 ++ l = bl -> Permutation bl gv0)
(sorted (a :: l) -> gv0 = a :: l -> gv0 ++ l = bl -> Permutation bl gv0)
(sorted (a :: l) ->
 gv0 = a :: l -> n = length bl -> gv0 ++ l = bl -> Permutation bl gv0)
(sorted (a :: l) ->
 y <=* bl -> gv0 = a :: l -> gv0 ++ l = bl -> Permutation bl gv0)
(sorted (a :: l) ->
 y <=* bl ->
 gv0 = a :: l -> n = length bl -> gv0 ++ l = bl -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 gv0 = a :: l -> gv0 ++ l = bl -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 gv0 = a :: l -> n = length bl -> gv0 ++ l = bl -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 y <=* bl -> gv0 = a :: l -> gv0 ++ l = bl -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 y <=* bl ->
 gv0 = a :: l -> n = length bl -> gv0 ++ l = bl -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) -> gv0 = a :: l -> gv0 ++ l = bl -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) ->
 gv0 = a :: l -> n = length bl -> gv0 ++ l = bl -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) ->
 y <=* bl -> gv0 = a :: l -> gv0 ++ l = bl -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) ->
 y <=* bl ->
 gv0 = a :: l -> n = length bl -> gv0 ++ l = bl -> Permutation bl gv0)
(gv0 = a :: l -> l ++ gv0 = bl -> Permutation bl gv0)
(gv0 = a :: l -> n = length bl -> l ++ gv0 = bl -> Permutation bl gv0)
(y <=* bl -> gv0 = a :: l -> l ++ gv0 = bl -> Permutation bl gv0)
(y <=* bl ->
 gv0 = a :: l -> n = length bl -> l ++ gv0 = bl -> Permutation bl gv0)
(sorted (a :: l) -> gv0 = a :: l -> l ++ gv0 = bl -> Permutation bl gv0)
(sorted (a :: l) ->
 gv0 = a :: l -> n = length bl -> l ++ gv0 = bl -> Permutation bl gv0)
(sorted (a :: l) ->
 y <=* bl -> gv0 = a :: l -> l ++ gv0 = bl -> Permutation bl gv0)
(sorted (a :: l) ->
 y <=* bl ->
 gv0 = a :: l -> n = length bl -> l ++ gv0 = bl -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 gv0 = a :: l -> l ++ gv0 = bl -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 gv0 = a :: l -> n = length bl -> l ++ gv0 = bl -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 y <=* bl -> gv0 = a :: l -> l ++ gv0 = bl -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 y <=* bl ->
 gv0 = a :: l -> n = length bl -> l ++ gv0 = bl -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) -> gv0 = a :: l -> l ++ gv0 = bl -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) ->
 gv0 = a :: l -> n = length bl -> l ++ gv0 = bl -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) ->
 y <=* bl -> gv0 = a :: l -> l ++ gv0 = bl -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) ->
 y <=* bl ->
 gv0 = a :: l -> n = length bl -> l ++ gv0 = bl -> Permutation bl gv0)
(gv0 = a :: l ->
 n = length bl -> selsort bl n = gv0 ++ l -> Permutation bl gv0)
(y <=* bl ->
 gv0 = a :: l ->
 n = length bl -> selsort bl n = gv0 ++ l -> Permutation bl gv0)
(sorted (a :: l) ->
 gv0 = a :: l ->
 n = length bl -> selsort bl n = gv0 ++ l -> Permutation bl gv0)
(sorted (a :: l) ->
 y <=* bl -> gv0 = a :: l -> selsort bl n = gv0 ++ l -> Permutation bl gv0)
(sorted (a :: l) ->
 y <=* bl ->
 gv0 = a :: l ->
 n = length bl -> selsort bl n = gv0 ++ l -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 gv0 = a :: l ->
 n = length bl -> selsort bl n = gv0 ++ l -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 y <=* bl -> gv0 = a :: l -> selsort bl n = gv0 ++ l -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 y <=* bl ->
 gv0 = a :: l ->
 n = length bl -> selsort bl n = gv0 ++ l -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) ->
 gv0 = a :: l ->
 n = length bl -> selsort bl n = gv0 ++ l -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) ->
 y <=* bl ->
 gv0 = a :: l ->
 n = length bl -> selsort bl n = gv0 ++ l -> Permutation bl gv0)
(gv0 = a :: l ->
 n = length bl -> selsort bl n = l ++ gv0 -> Permutation bl gv0)
(y <=* bl ->
 gv0 = a :: l ->
 n = length bl -> selsort bl n = l ++ gv0 -> Permutation bl gv0)
(sorted (a :: l) ->
 gv0 = a :: l ->
 n = length bl -> selsort bl n = l ++ gv0 -> Permutation bl gv0)
(sorted (a :: l) ->
 y <=* bl ->
 gv0 = a :: l ->
 n = length bl -> selsort bl n = l ++ gv0 -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 gv0 = a :: l ->
 n = length bl -> selsort bl n = l ++ gv0 -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 y <=* bl ->
 gv0 = a :: l ->
 n = length bl -> selsort bl n = l ++ gv0 -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) ->
 gv0 = a :: l ->
 n = length bl -> selsort bl n = l ++ gv0 -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) ->
 y <=* bl ->
 gv0 = a :: l ->
 n = length bl -> selsort bl n = l ++ gv0 -> Permutation bl gv0)
(gv0 = a :: l -> selection_sort bl = gv0 ++ l -> Permutation bl gv0)
(gv0 = a :: l ->
 n = length bl -> selection_sort bl = gv0 ++ l -> Permutation bl gv0)
(y <=* bl ->
 gv0 = a :: l -> selection_sort bl = gv0 ++ l -> Permutation bl gv0)
(y <=* bl ->
 gv0 = a :: l ->
 n = length bl -> selection_sort bl = gv0 ++ l -> Permutation bl gv0)
(sorted (a :: l) ->
 gv0 = a :: l -> selection_sort bl = gv0 ++ l -> Permutation bl gv0)
(sorted (a :: l) ->
 gv0 = a :: l ->
 n = length bl -> selection_sort bl = gv0 ++ l -> Permutation bl gv0)
(sorted (a :: l) ->
 y <=* bl ->
 gv0 = a :: l -> selection_sort bl = gv0 ++ l -> Permutation bl gv0)
(sorted (a :: l) ->
 y <=* bl ->
 gv0 = a :: l ->
 n = length bl -> selection_sort bl = gv0 ++ l -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 gv0 = a :: l -> selection_sort bl = gv0 ++ l -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 gv0 = a :: l ->
 n = length bl -> selection_sort bl = gv0 ++ l -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 y <=* bl ->
 gv0 = a :: l -> selection_sort bl = gv0 ++ l -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 y <=* bl ->
 gv0 = a :: l ->
 n = length bl -> selection_sort bl = gv0 ++ l -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) ->
 gv0 = a :: l -> selection_sort bl = gv0 ++ l -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) ->
 gv0 = a :: l ->
 n = length bl -> selection_sort bl = gv0 ++ l -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) ->
 y <=* bl ->
 gv0 = a :: l -> selection_sort bl = gv0 ++ l -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) ->
 y <=* bl ->
 gv0 = a :: l ->
 n = length bl -> selection_sort bl = gv0 ++ l -> Permutation bl gv0)
(gv0 = a :: l -> selection_sort bl = l ++ gv0 -> Permutation bl gv0)
(gv0 = a :: l ->
 n = length bl -> selection_sort bl = l ++ gv0 -> Permutation bl gv0)
(y <=* bl ->
 gv0 = a :: l -> selection_sort bl = l ++ gv0 -> Permutation bl gv0)
(y <=* bl ->
 gv0 = a :: l ->
 n = length bl -> selection_sort bl = l ++ gv0 -> Permutation bl gv0)
(sorted (a :: l) ->
 gv0 = a :: l -> selection_sort bl = l ++ gv0 -> Permutation bl gv0)
(sorted (a :: l) ->
 gv0 = a :: l ->
 n = length bl -> selection_sort bl = l ++ gv0 -> Permutation bl gv0)
(sorted (a :: l) ->
 y <=* bl ->
 gv0 = a :: l -> selection_sort bl = l ++ gv0 -> Permutation bl gv0)
(sorted (a :: l) ->
 y <=* bl ->
 gv0 = a :: l ->
 n = length bl -> selection_sort bl = l ++ gv0 -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 gv0 = a :: l -> selection_sort bl = l ++ gv0 -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 gv0 = a :: l ->
 n = length bl -> selection_sort bl = l ++ gv0 -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 y <=* bl ->
 gv0 = a :: l -> selection_sort bl = l ++ gv0 -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 y <=* bl ->
 gv0 = a :: l ->
 n = length bl -> selection_sort bl = l ++ gv0 -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) ->
 gv0 = a :: l -> selection_sort bl = l ++ gv0 -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) ->
 gv0 = a :: l ->
 n = length bl -> selection_sort bl = l ++ gv0 -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) ->
 y <=* bl ->
 gv0 = a :: l -> selection_sort bl = l ++ gv0 -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) ->
 y <=* bl ->
 gv0 = a :: l ->
 n = length bl -> selection_sort bl = l ++ gv0 -> Permutation bl gv0)
(selection_sort bl = gv0 -> Permutation bl gv0)
(n = length bl -> selection_sort bl = gv0 -> Permutation bl gv0)
(gv0 = a :: l -> selection_sort bl = gv0 -> Permutation bl gv0)
(gv0 = a :: l ->
 n = length bl -> selection_sort bl = gv0 -> Permutation bl gv0)
(y <=* bl -> selection_sort bl = gv0 -> Permutation bl gv0)
(y <=* bl -> n = length bl -> selection_sort bl = gv0 -> Permutation bl gv0)
(y <=* bl -> gv0 = a :: l -> selection_sort bl = gv0 -> Permutation bl gv0)
(y <=* bl ->
 gv0 = a :: l ->
 n = length bl -> selection_sort bl = gv0 -> Permutation bl gv0)
(sorted (a :: l) -> selection_sort bl = gv0 -> Permutation bl gv0)
(sorted (a :: l) ->
 n = length bl -> selection_sort bl = gv0 -> Permutation bl gv0)
(sorted (a :: l) ->
 gv0 = a :: l -> selection_sort bl = gv0 -> Permutation bl gv0)
(sorted (a :: l) ->
 gv0 = a :: l ->
 n = length bl -> selection_sort bl = gv0 -> Permutation bl gv0)
(sorted (a :: l) -> y <=* bl -> selection_sort bl = gv0 -> Permutation bl gv0)
(sorted (a :: l) ->
 y <=* bl -> n = length bl -> selection_sort bl = gv0 -> Permutation bl gv0)
(sorted (a :: l) ->
 y <=* bl -> gv0 = a :: l -> selection_sort bl = gv0 -> Permutation bl gv0)
(sorted (a :: l) ->
 y <=* bl ->
 gv0 = a :: l ->
 n = length bl -> selection_sort bl = gv0 -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 selection_sort bl = gv0 -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 n = length bl -> selection_sort bl = gv0 -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 gv0 = a :: l -> selection_sort bl = gv0 -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 gv0 = a :: l ->
 n = length bl -> selection_sort bl = gv0 -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 y <=* bl -> selection_sort bl = gv0 -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 y <=* bl -> n = length bl -> selection_sort bl = gv0 -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 y <=* bl -> gv0 = a :: l -> selection_sort bl = gv0 -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 y <=* bl ->
 gv0 = a :: l ->
 n = length bl -> selection_sort bl = gv0 -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) -> selection_sort bl = gv0 -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) ->
 n = length bl -> selection_sort bl = gv0 -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) ->
 gv0 = a :: l -> selection_sort bl = gv0 -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) ->
 gv0 = a :: l ->
 n = length bl -> selection_sort bl = gv0 -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) -> y <=* bl -> selection_sort bl = gv0 -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) ->
 y <=* bl -> n = length bl -> selection_sort bl = gv0 -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) ->
 y <=* bl -> gv0 = a :: l -> selection_sort bl = gv0 -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) ->
 y <=* bl ->
 gv0 = a :: l ->
 n = length bl -> selection_sort bl = gv0 -> Permutation bl gv0)
(gv0 = a :: l ->
 n = length bl -> selection_sort gv0 = bl ++ l -> Permutation bl gv0)
(y <=* bl ->
 gv0 = a :: l ->
 n = length bl -> selection_sort gv0 = bl ++ l -> Permutation bl gv0)
(sorted (a :: l) ->
 gv0 = a :: l -> selection_sort gv0 = bl ++ l -> Permutation bl gv0)
(sorted (a :: l) ->
 y <=* bl ->
 gv0 = a :: l ->
 n = length bl -> selection_sort gv0 = bl ++ l -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 y <=* bl ->
 gv0 = a :: l ->
 n = length bl -> selection_sort gv0 = bl ++ l -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) ->
 gv0 = a :: l ->
 n = length bl -> selection_sort gv0 = bl ++ l -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) ->
 y <=* bl ->
 gv0 = a :: l ->
 n = length bl -> selection_sort gv0 = bl ++ l -> Permutation bl gv0)
(gv0 = a :: l ->
 n = length bl -> selection_sort gv0 = l ++ bl -> Permutation bl gv0)
(y <=* bl ->
 gv0 = a :: l ->
 n = length bl -> selection_sort gv0 = l ++ bl -> Permutation bl gv0)
(sorted (a :: l) ->
 gv0 = a :: l ->
 n = length bl -> selection_sort gv0 = l ++ bl -> Permutation bl gv0)
(sorted (a :: l) ->
 y <=* bl ->
 gv0 = a :: l -> selection_sort gv0 = l ++ bl -> Permutation bl gv0)
(sorted (a :: l) ->
 y <=* bl ->
 gv0 = a :: l ->
 n = length bl -> selection_sort gv0 = l ++ bl -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 y <=* bl ->
 gv0 = a :: l ->
 n = length bl -> selection_sort gv0 = l ++ bl -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) ->
 gv0 = a :: l ->
 n = length bl -> selection_sort gv0 = l ++ bl -> Permutation bl gv0)
(selection_sort gv0 = bl -> Permutation bl gv0)
(n = length bl -> selection_sort gv0 = bl -> Permutation bl gv0)
(gv0 = a :: l -> selection_sort gv0 = bl -> Permutation bl gv0)
(gv0 = a :: l ->
 n = length bl -> selection_sort gv0 = bl -> Permutation bl gv0)
(y <=* bl -> selection_sort gv0 = bl -> Permutation bl gv0)
(y <=* bl -> n = length bl -> selection_sort gv0 = bl -> Permutation bl gv0)
(y <=* bl -> gv0 = a :: l -> selection_sort gv0 = bl -> Permutation bl gv0)
(y <=* bl ->
 gv0 = a :: l ->
 n = length bl -> selection_sort gv0 = bl -> Permutation bl gv0)
(sorted (a :: l) -> selection_sort gv0 = bl -> Permutation bl gv0)
(sorted (a :: l) ->
 n = length bl -> selection_sort gv0 = bl -> Permutation bl gv0)
(sorted (a :: l) ->
 gv0 = a :: l -> selection_sort gv0 = bl -> Permutation bl gv0)
(sorted (a :: l) ->
 gv0 = a :: l ->
 n = length bl -> selection_sort gv0 = bl -> Permutation bl gv0)
(sorted (a :: l) -> y <=* bl -> selection_sort gv0 = bl -> Permutation bl gv0)
(sorted (a :: l) ->
 y <=* bl -> n = length bl -> selection_sort gv0 = bl -> Permutation bl gv0)
(sorted (a :: l) ->
 y <=* bl -> gv0 = a :: l -> selection_sort gv0 = bl -> Permutation bl gv0)
(sorted (a :: l) ->
 y <=* bl ->
 gv0 = a :: l ->
 n = length bl -> selection_sort gv0 = bl -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 selection_sort gv0 = bl -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 n = length bl -> selection_sort gv0 = bl -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 gv0 = a :: l -> selection_sort gv0 = bl -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 gv0 = a :: l ->
 n = length bl -> selection_sort gv0 = bl -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 y <=* bl -> selection_sort gv0 = bl -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 y <=* bl -> n = length bl -> selection_sort gv0 = bl -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 y <=* bl -> gv0 = a :: l -> selection_sort gv0 = bl -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 y <=* bl ->
 gv0 = a :: l ->
 n = length bl -> selection_sort gv0 = bl -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) -> selection_sort gv0 = bl -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) ->
 n = length bl -> selection_sort gv0 = bl -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) ->
 gv0 = a :: l -> selection_sort gv0 = bl -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) ->
 gv0 = a :: l ->
 n = length bl -> selection_sort gv0 = bl -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) -> y <=* bl -> selection_sort gv0 = bl -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) ->
 y <=* bl -> n = length bl -> selection_sort gv0 = bl -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) ->
 y <=* bl -> gv0 = a :: l -> selection_sort gv0 = bl -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) ->
 y <=* bl ->
 gv0 = a :: l ->
 n = length bl -> selection_sort gv0 = bl -> Permutation bl gv0)
(gv0 = a :: l ->
 n = length bl -> Permutation (selsort bl n) (l ++ gv0) -> Permutation bl gv0)
(y <=* bl ->
 gv0 = a :: l ->
 n = length bl -> Permutation (selsort bl n) (l ++ gv0) -> Permutation bl gv0)
(sorted (a :: l) ->
 gv0 = a :: l ->
 n = length bl -> Permutation (selsort bl n) (l ++ gv0) -> Permutation bl gv0)
(sorted (a :: l) ->
 y <=* bl ->
 gv0 = a :: l ->
 n = length bl -> Permutation (selsort bl n) (l ++ gv0) -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 gv0 = a :: l ->
 n = length bl -> Permutation (selsort bl n) (l ++ gv0) -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 y <=* bl ->
 gv0 = a :: l ->
 n = length bl -> Permutation (selsort bl n) (l ++ gv0) -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) ->
 gv0 = a :: l ->
 n = length bl -> Permutation (selsort bl n) (l ++ gv0) -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) ->
 y <=* bl ->
 gv0 = a :: l -> Permutation (selsort bl n) (l ++ gv0) -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) ->
 y <=* bl ->
 gv0 = a :: l ->
 n = length bl -> Permutation (selsort bl n) (l ++ gv0) -> Permutation bl gv0)
(n = length bl -> Permutation (a :: bl) (gv0 ++ gv0) -> Permutation bl gv0)
(gv0 = a :: l -> Permutation (a :: bl) (gv0 ++ gv0) -> Permutation bl gv0)
(gv0 = a :: l ->
 n = length bl -> Permutation (a :: bl) (gv0 ++ gv0) -> Permutation bl gv0)
(y <=* bl -> Permutation (a :: bl) (gv0 ++ gv0) -> Permutation bl gv0)
(y <=* bl ->
 n = length bl -> Permutation (a :: bl) (gv0 ++ gv0) -> Permutation bl gv0)
(y <=* bl ->
 gv0 = a :: l -> Permutation (a :: bl) (gv0 ++ gv0) -> Permutation bl gv0)
(y <=* bl ->
 gv0 = a :: l ->
 n = length bl -> Permutation (a :: bl) (gv0 ++ gv0) -> Permutation bl gv0)
(sorted (a :: l) ->
 n = length bl -> Permutation (a :: bl) (gv0 ++ gv0) -> Permutation bl gv0)
(sorted (a :: l) ->
 gv0 = a :: l -> Permutation (a :: bl) (gv0 ++ gv0) -> Permutation bl gv0)
(sorted (a :: l) ->
 gv0 = a :: l ->
 n = length bl -> Permutation (a :: bl) (gv0 ++ gv0) -> Permutation bl gv0)
(sorted (a :: l) ->
 y <=* bl -> Permutation (a :: bl) (gv0 ++ gv0) -> Permutation bl gv0)
(sorted (a :: l) ->
 y <=* bl ->
 n = length bl -> Permutation (a :: bl) (gv0 ++ gv0) -> Permutation bl gv0)
(sorted (a :: l) ->
 y <=* bl ->
 gv0 = a :: l -> Permutation (a :: bl) (gv0 ++ gv0) -> Permutation bl gv0)
(sorted (a :: l) ->
 y <=* bl ->
 gv0 = a :: l ->
 n = length bl -> Permutation (a :: bl) (gv0 ++ gv0) -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 n = length bl -> Permutation (a :: bl) (gv0 ++ gv0) -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 gv0 = a :: l -> Permutation (a :: bl) (gv0 ++ gv0) -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 gv0 = a :: l ->
 n = length bl -> Permutation (a :: bl) (gv0 ++ gv0) -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 y <=* bl ->
 n = length bl -> Permutation (a :: bl) (gv0 ++ gv0) -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 y <=* bl ->
 gv0 = a :: l -> Permutation (a :: bl) (gv0 ++ gv0) -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 y <=* bl ->
 gv0 = a :: l ->
 n = length bl -> Permutation (a :: bl) (gv0 ++ gv0) -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) ->
 n = length bl -> Permutation (a :: bl) (gv0 ++ gv0) -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) ->
 gv0 = a :: l -> Permutation (a :: bl) (gv0 ++ gv0) -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) ->
 gv0 = a :: l ->
 n = length bl -> Permutation (a :: bl) (gv0 ++ gv0) -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) ->
 y <=* bl ->
 n = length bl -> Permutation (a :: bl) (gv0 ++ gv0) -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) ->
 y <=* bl ->
 gv0 = a :: l -> Permutation (a :: bl) (gv0 ++ gv0) -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) ->
 y <=* bl ->
 gv0 = a :: l ->
 n = length bl -> Permutation (a :: bl) (gv0 ++ gv0) -> Permutation bl gv0)
(n = length bl -> Permutation (a :: gv0) (bl ++ bl) -> Permutation bl gv0)
(gv0 = a :: l -> Permutation (a :: gv0) (bl ++ bl) -> Permutation bl gv0)
(gv0 = a :: l ->
 n = length bl -> Permutation (a :: gv0) (bl ++ bl) -> Permutation bl gv0)
(y <=* bl ->
 n = length bl -> Permutation (a :: gv0) (bl ++ bl) -> Permutation bl gv0)
(y <=* bl ->
 gv0 = a :: l -> Permutation (a :: gv0) (bl ++ bl) -> Permutation bl gv0)
(y <=* bl ->
 gv0 = a :: l ->
 n = length bl -> Permutation (a :: gv0) (bl ++ bl) -> Permutation bl gv0)
(sorted (a :: l) -> Permutation (a :: gv0) (bl ++ bl) -> Permutation bl gv0)
(sorted (a :: l) ->
 gv0 = a :: l -> Permutation (a :: gv0) (bl ++ bl) -> Permutation bl gv0)
(sorted (a :: l) ->
 gv0 = a :: l ->
 n = length bl -> Permutation (a :: gv0) (bl ++ bl) -> Permutation bl gv0)
(sorted (a :: l) ->
 y <=* bl -> Permutation (a :: gv0) (bl ++ bl) -> Permutation bl gv0)
(sorted (a :: l) ->
 y <=* bl ->
 n = length bl -> Permutation (a :: gv0) (bl ++ bl) -> Permutation bl gv0)
(sorted (a :: l) ->
 y <=* bl ->
 gv0 = a :: l -> Permutation (a :: gv0) (bl ++ bl) -> Permutation bl gv0)
(sorted (a :: l) ->
 y <=* bl ->
 gv0 = a :: l ->
 n = length bl -> Permutation (a :: gv0) (bl ++ bl) -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 n = length bl -> Permutation (a :: gv0) (bl ++ bl) -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 gv0 = a :: l -> Permutation (a :: gv0) (bl ++ bl) -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 gv0 = a :: l ->
 n = length bl -> Permutation (a :: gv0) (bl ++ bl) -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 y <=* bl -> Permutation (a :: gv0) (bl ++ bl) -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 y <=* bl ->
 n = length bl -> Permutation (a :: gv0) (bl ++ bl) -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 y <=* bl ->
 gv0 = a :: l -> Permutation (a :: gv0) (bl ++ bl) -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 y <=* bl ->
 gv0 = a :: l ->
 n = length bl -> Permutation (a :: gv0) (bl ++ bl) -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) -> Permutation (a :: gv0) (bl ++ bl) -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) ->
 n = length bl -> Permutation (a :: gv0) (bl ++ bl) -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) ->
 gv0 = a :: l -> Permutation (a :: gv0) (bl ++ bl) -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) ->
 gv0 = a :: l ->
 n = length bl -> Permutation (a :: gv0) (bl ++ bl) -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) ->
 y <=* bl ->
 gv0 = a :: l -> Permutation (a :: gv0) (bl ++ bl) -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) ->
 y <=* bl ->
 gv0 = a :: l ->
 n = length bl -> Permutation (a :: gv0) (bl ++ bl) -> Permutation bl gv0)
(sorted (a :: l) ->
 gv0 = a :: l ->
 n = length bl -> Permutation (a :: gv0) (gv0 ++ bl) -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 gv0 = a :: l ->
 n = length bl -> Permutation (a :: gv0) (gv0 ++ bl) -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 y <=* bl ->
 gv0 = a :: l ->
 n = length bl -> Permutation (a :: gv0) (gv0 ++ bl) -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) ->
 gv0 = a :: l -> Permutation (a :: gv0) (gv0 ++ bl) -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) ->
 gv0 = a :: l ->
 n = length bl -> Permutation (a :: gv0) (gv0 ++ bl) -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) ->
 y <=* bl ->
 gv0 = a :: l ->
 n = length bl -> Permutation (a :: gv0) (gv0 ++ bl) -> Permutation bl gv0)
(gv0 = a :: l ->
 n = length bl -> Permutation (l ++ gv0) bl -> Permutation bl gv0)
(y <=* bl -> gv0 = a :: l -> Permutation (l ++ gv0) bl -> Permutation bl gv0)
(y <=* bl ->
 gv0 = a :: l ->
 n = length bl -> Permutation (l ++ gv0) bl -> Permutation bl gv0)
(sorted (a :: l) ->
 gv0 = a :: l -> Permutation (l ++ gv0) bl -> Permutation bl gv0)
(sorted (a :: l) ->
 gv0 = a :: l ->
 n = length bl -> Permutation (l ++ gv0) bl -> Permutation bl gv0)
(sorted (a :: l) ->
 y <=* bl -> gv0 = a :: l -> Permutation (l ++ gv0) bl -> Permutation bl gv0)
(sorted (a :: l) ->
 y <=* bl ->
 gv0 = a :: l ->
 n = length bl -> Permutation (l ++ gv0) bl -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 gv0 = a :: l -> Permutation (l ++ gv0) bl -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 gv0 = a :: l ->
 n = length bl -> Permutation (l ++ gv0) bl -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 y <=* bl -> gv0 = a :: l -> Permutation (l ++ gv0) bl -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 y <=* bl ->
 gv0 = a :: l ->
 n = length bl -> Permutation (l ++ gv0) bl -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) ->
 gv0 = a :: l -> Permutation (l ++ gv0) bl -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) ->
 gv0 = a :: l ->
 n = length bl -> Permutation (l ++ gv0) bl -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) ->
 y <=* bl -> gv0 = a :: l -> Permutation (l ++ gv0) bl -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) ->
 y <=* bl ->
 gv0 = a :: l ->
 n = length bl -> Permutation (l ++ gv0) bl -> Permutation bl gv0)
(gv0 = a :: l ->
 n = length bl -> Permutation (l ++ bl) gv0 -> Permutation bl gv0)
(y <=* bl -> gv0 = a :: l -> Permutation (l ++ bl) gv0 -> Permutation bl gv0)
(sorted (a :: l) ->
 gv0 = a :: l -> Permutation (l ++ bl) gv0 -> Permutation bl gv0)
(sorted (a :: l) ->
 gv0 = a :: l ->
 n = length bl -> Permutation (l ++ bl) gv0 -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 gv0 = a :: l ->
 n = length bl -> Permutation (l ++ bl) gv0 -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) ->
 gv0 = a :: l -> Permutation (l ++ bl) gv0 -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) ->
 gv0 = a :: l ->
 n = length bl -> Permutation (l ++ bl) gv0 -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) ->
 y <=* bl -> gv0 = a :: l -> Permutation (l ++ bl) gv0 -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) ->
 y <=* bl ->
 gv0 = a :: l ->
 n = length bl -> Permutation (l ++ bl) gv0 -> Permutation bl gv0)
(n = length bl -> Permutation (selsort bl n) gv0 -> Permutation bl gv0)
(gv0 = a :: l ->
 n = length bl -> Permutation (selsort bl n) gv0 -> Permutation bl gv0)
(y <=* bl ->
 n = length bl -> Permutation (selsort bl n) gv0 -> Permutation bl gv0)
(y <=* bl ->
 gv0 = a :: l ->
 n = length bl -> Permutation (selsort bl n) gv0 -> Permutation bl gv0)
(sorted (a :: l) ->
 n = length bl -> Permutation (selsort bl n) gv0 -> Permutation bl gv0)
(sorted (a :: l) ->
 gv0 = a :: l ->
 n = length bl -> Permutation (selsort bl n) gv0 -> Permutation bl gv0)
(sorted (a :: l) ->
 y <=* bl ->
 n = length bl -> Permutation (selsort bl n) gv0 -> Permutation bl gv0)
(sorted (a :: l) ->
 y <=* bl ->
 gv0 = a :: l -> Permutation (selsort bl n) gv0 -> Permutation bl gv0)
(sorted (a :: l) ->
 y <=* bl ->
 gv0 = a :: l ->
 n = length bl -> Permutation (selsort bl n) gv0 -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 n = length bl -> Permutation (selsort bl n) gv0 -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 gv0 = a :: l ->
 n = length bl -> Permutation (selsort bl n) gv0 -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 y <=* bl ->
 n = length bl -> Permutation (selsort bl n) gv0 -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 y <=* bl ->
 gv0 = a :: l -> Permutation (selsort bl n) gv0 -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 y <=* bl ->
 gv0 = a :: l ->
 n = length bl -> Permutation (selsort bl n) gv0 -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) ->
 n = length bl -> Permutation (selsort bl n) gv0 -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) ->
 gv0 = a :: l ->
 n = length bl -> Permutation (selsort bl n) gv0 -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) ->
 y <=* bl ->
 n = length bl -> Permutation (selsort bl n) gv0 -> Permutation bl gv0)
((gv0 = l -> sorted l -> sorted (y :: l)) ->
 sorted (a :: l) ->
 y <=* bl ->
 gv0 = a :: l ->
 n = length bl -> Permutation (selsort bl n) gv0 -> Permutation bl gv0)
(n = length bl -> length bl = n)
(length bl = n -> Permutation bl (selsort bl n))